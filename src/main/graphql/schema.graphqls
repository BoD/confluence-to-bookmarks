type AIConfigResponse {
  isEnabled: Boolean!

  isRovoEnabled: Boolean
}

type AbTest {
  abTestId: ID!

  controlId: ID!

  experimentId: ID!
}

enum AccessStatus {
  ANONYMOUS_ACCESS

  EXTERNAL_COLLABORATOR_ACCESS

  EXTERNAL_SHARE_ACCESS

  LICENSED_ADMIN_ACCESS

  LICENSED_USE_ACCESS

  NOT_PERMITTED

  UNLICENSED_AUTHENTICATED_ACCESS
}

enum AccessType {
  EDIT

  VIEW
}

enum AccountType {
  APP

  ATLASSIAN

  CUSTOMER

  UNKNOWN
}

input ActivatePaywallContentInput {
  contentIdToActivate: ID!

  deactivationIdentifier: String
}

type ActivatePaywallContentPayload implements Payload {
  errors: [MutationError!]!

  success: Boolean!
}

type Activities {
  all(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection!

  workedOn(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection!

  myActivities: MyActivities

  nodes(ids: [ID!]): [ActivitiesObject]
}

input ActivitiesArguments {
  accountIds: [ID!]

  cloudIds: [ID!]

  products: [ActivityProduct!]

  eventTypes: [ActivityEventType!]

  objectTypes: [ActivitiesObjectType!]

  transitions: [ActivityTransition!]

  containerIds: [ID!]

  earliestStart: String

  latestStart: String
}

type ActivitiesCommentedEvent {
  commentId: ID!
}

type ActivitiesConnection {
  edges: [ActivityEdge]

  nodes: [ActivitiesItem!]!

  pageInfo: ActivityPageInfo!
}

type ActivitiesContainer {
  id: ID!

  localResourceId: ID

  name: String

  type: ActivitiesContainerType

  product: ActivityProduct

  cloudId: String

  url: String

  iconUrl: String
}

enum ActivitiesContainerType {
  SITE

  PROJECT

  SPACE
}

type ActivitiesContributor {
  profile: ActivityUser

  lastAccessedDate: String

  count: Int
}

type ActivitiesEvent implements Node {
  id: ID!

  timestamp: String

  eventType: ActivityEventType

  user: ActivitiesUser

  extension: ActivitiesEventExtension
}

union ActivitiesEventExtension = ActivitiesTransitionedEvent|ActivitiesCommentedEvent

input ActivitiesFilter {
  type: ActivitiesFilterType

  arguments: ActivitiesArguments
}

enum ActivitiesFilterType {
  AND

  OR
}

type ActivitiesItem implements Node {
  id: ID!

  timestamp: String

  object: ActivitiesObject
}

type ActivitiesJiraIssue {
  issueKey: String
}

type ActivitiesObject implements Node {
  id: ID!

  localResourceId: ID

  name: String

  type: ActivityObjectType

  product: ActivityProduct

  cloudId: String

  url: String

  iconUrl: String

  containers: [ActivitiesContainer!]

  contributors: [ActivitiesContributor!]

  parent: ActivitiesObjectParent

  events(first: Int): [ActivitiesEvent!]

  extension: ActivitiesObjectExtension

  content: Content
}

union ActivitiesObjectExtension = ActivitiesJiraIssue

type ActivitiesObjectParent {
  id: ID!

  type: ActivityObjectType
}

enum ActivitiesObjectType {
  ISSUE

  PAGE

  BLOGPOST

  WHITEBOARD

  DATABASE

  EMBED
}

type ActivitiesTransitionedEvent {
  from: String

  to: String
}

type ActivitiesUser {
  profile: ActivityUser
}

type Activity {
  all(filter: ActivityFilter, first: Int, after: String): ActivityConnection!

  workedOn(filter: ActivityFilter, first: Int, after: String): ActivityConnection!

  myActivity: MyActivity
}

type ActivityConnection {
  edges: [ActivityItemEdge!]!

  pageInfo: ActivityPageInfo!
}

type ActivityContributor {
  profile: ActivityUser!

  lastAccessedDate: DateTime!

  count: Int
}

type ActivityEdge {
  cursor: String!

  node: ActivitiesItem
}

type ActivityEvent {
  id: ID!

  timestamp: DateTime!

  eventType: String!

  actor: ActivityUser!

  extension: ActivitiesEventExtension
}

enum ActivityEventType {
  ASSIGNED

  UNASSIGNED

  VIEWED

  COMMENTED

  UPDATED

  CREATED

  LIKED

  TRANSITIONED

  PUBLISHED

  EDITED
}

input ActivityFilter {
  actors: [ID!]

  rootContainerIds: [ID!]

  type: ActivitiesFilterType

  arguments: ActivityFilterArgs
}

input ActivityFilterArgs {
  products: [String!]

  eventTypes: [String!]

  objectTypes: [String!]

  transitions: [TransitionFilter!]

  containerIds: [ID!]

  earliestStart: DateTime

  latestStart: DateTime
}

type ActivityItemEdge {
  cursor: String!

  node: ActivityNode!
}

type ActivityNode implements Node {
  id: ID!

  object: ActivityObject!

  event: ActivityEvent!
}

type ActivityObject {
  id: ID!

  rootContainerId: ID!

  type: String!

  product: String!

  subProduct: String

  contributors: [ActivityContributor!]

  context: HydrationContext

  data: ActivityObjectData
}

union ActivityObjectData = ConfluencePage|ConfluenceWhiteboard|ConfluenceDatabase|ConfluenceEmbed|ConfluenceBlogPost|ConfluenceFooterComment|ConfluenceInlineComment

enum ActivityObjectType {
  SITE

  PROJECT

  ISSUE

  COMMENT

  SPACE

  PAGE

  BLOGPOST

  TASK

  WHITEBOARD

  DATABASE

  EMBED
}

type ActivityPageInfo {
  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String

  endCursor: String
}

enum ActivityProduct {
  JIRA

  JIRA_BUSINESS

  JIRA_SOFTWARE

  JIRA_OPS

  JIRA_SERVICE_DESK

  CONFLUENCE
}

input ActivityTransition {
  from: String

  to: String
}

type ActivityUser {
  accountId: ID!

  name: String @deprecated(reason: "No longer used in Activities V3 API")

  picture: String @deprecated(reason: "No longer used in Activities V3 API")

  user: AtlassianUser
}

input AddDefaultExCoSpacePermissionsInput {
  accountIds: [String]

  groupIds: [String]

  groupNames: [String]

  spaceKeys: [String]!
}

type AddDefaultExCoSpacePermissionsPayload {
  errors: [MutationError!]

  status: Boolean!
}

input AddLabelsInput {
  contentId: ID!

  labels: [LabelInput!]!
}

type AddLabelsPayload {
  labels: PaginatedLabelList!
}

input AddPublicLinkPermissionsInput {
  objectId: ID!

  objectType: PublicLinkPermissionsObjectType!

  permissions: [PublicLinkPermissionsType!]!
}

type AddPublicLinkPermissionsPayload implements Payload {
  data: PublicLinkPermissions

  errors: [MutationError!]

  success: Boolean!
}

type AdminAnnouncementBannerFeature {
  isEntitled: Boolean!
}

type AdminAnnouncementBannerMutationErrorExtension implements MutationErrorExtension {
  adminAnnouncementBannerList: [ConfluenceAdminAnnouncementBannerSetting]!

  errorType: String

  statusCode: Int
}

type AdminAnnouncementBannerPageInfo {
  endPage: String

  hasNextPage: Boolean

  startPage: String
}

type AdminAnnouncementBannerSettingConnection {
  nodes: [ConfluenceAdminAnnouncementBannerSetting]!

  pageInfo: AdminAnnouncementBannerPageInfo!
}

enum AdminAnnouncementBannerSettingsByCriteriaOrder {
  DEFAULT

  SCHEDULED_END_DATE

  SCHEDULED_START_DATE

  VISIBILITY
}

interface AllUpdatesFeedEvent {
  datetime: String!

  type: AllUpdatesFeedEventType!
}

enum AllUpdatesFeedEventType {
  COMMENT

  CREATE

  EDIT
}

type AllUpdatesFeedItem {
  id: ID!

  lastUpdate: AllUpdatesFeedEvent!

  content: Content!
}

enum AnalyticsClickEventName {
  companyHubLink_clicked
}

enum AnalyticsCommentType {
  inline

  page
}

enum AnalyticsContentType {
  page

  blogpost
}

enum AnalyticsDiscoverEventName {
  companyHubLink_viewed
}

enum AnalyticsEventName {
  comment_created

  companyHubLink_clicked

  companyHubLink_viewed

  database_created

  database_viewed

  page_viewed

  page_created

  page_updated

  publiclink_page_viewed

  whiteboard_created

  whiteboard_viewed

  analyticsPageModal_viewed

  pageAnalytics_viewed

  spaceAnalytics_viewed

  instanceAnalytics_viewed

  teamCalendars_viewed

  calendar_created

  automationRuleTrack_created

  inspectPermissionsDialog_viewed
}

enum AnalyticsMeasuresEventName {
  totalActivePublicLinks_sitestate_measured

  totalActiveSpaces_sitestate_measured

  totalActivePersonalSpaces_sitestate_measured

  totalActiveCommunalSpaces_sitestate_measured

  currentPageCount_sitestate_measured

  currentBlogpostCount_sitestate_measured

  currentDatabaseCount_sitestate_measured

  currentWhiteboardCount_sitestate_measured

  totalCurrentPageCount_sitestate_measured

  totalCurrentBlogpostCount_sitestate_measured

  totalCurrentDatabaseCount_sitestate_measured

  totalCurrentWhiteboardCount_sitestate_measured

  totalPagesDeactivatedOwner_sitestate_measured

  inactivePageCount_sitestate_measured

  totalActivePublicLinks_spacestate_measured

  inactivePageCount_spacestate_measured

  totalPagesDeactivatedOwner_spacestate_measured

  currentPageCount_spacestate_measured

  currentBlogpostCount_spacestate_measured

  currentDatabaseCount_spacestate_measured

  currentWhiteboardCount_spacestate_measured
}

enum AnalyticsMeasuresSpaceEventName {
  totalActivePublicLinks_spacestate_measured

  inactivePageCount_spacestate_measured

  totalPagesDeactivatedOwner_spacestate_measured

  currentPageCount_spacestate_measured

  currentBlogpostCount_spacestate_measured

  currentDatabaseCount_spacestate_measured

  currentWhiteboardCount_spacestate_measured
}

enum AnalyticsSearchEventName {
  quickSearchRequest_completed

  quickSearchResult_selected

  advancedSearchResults_shown

  advancedSearchResultLink_clicked
}

enum AnalyticsTimeseriesGranularity {
  HOUR

  DAY

  WEEK

  MONTH
}

type Anonymous implements Person {
  displayName: String

  links: LinksContextBase

  operations: [OperationCheckResult]

  permissionType: SitePermissionType

  profilePicture: Icon

  type: String
}

input AnonymousWithPermissionsInput {
  operations: [OperationCheckResultInput]!
}

type ArchiveFeature {
  isEntitled: Boolean!
}

input ArchiveSpaceInput {
  alias: String!
}

type ArchiveSpacePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ArchivedContentMetadata {
  archiveNote: String

  restoreParent: Content
}

type AtlassianUser {
  id: ID

  userName: String @deprecated(reason: "This is not being used in FE and it will not work as we have switched to Identity DataFetcher")

  displayName: String

  emails: [AtlassianUserEmail]

  groups: [AtlassianUserGroup] @deprecated(reason: "This will always be empty, use confluence.groups")

  isActive: Boolean

  title: String

  team: String

  location: String

  companyName: String

  photos: [AtlassianUserPhoto]

  locale: String

  timeZone: String

  confluence: ConfluenceUser
}

type AtlassianUserEmail {
  value: String

  isPrimary: Boolean
}

type AtlassianUserGroup {
  value: String @deprecated(reason: "This type is no longer used")

  displayName: String @deprecated(reason: "This type is no longer used")
}

type AtlassianUserPhoto {
  value: String

  isPrimary: Boolean
}

enum AttachmentStatusV2 {
  current

  trashed

  historical

  deleted

  any

  draft

  archived
}

type AttachmentV2 implements Node {
  id: ID!

  status: AttachmentStatusV2!

  title: String!

  pageId: ID

  blogPostId: ID

  customContentId: ID

  mediaType: String

  mediaTypeDescription: String

  comment: String

  fileSize: Int

  fileId: String

  webuiLink: String

  downloadLink: String

  version: VersionV2
}

type AvailableContentStates {
  customContentStates: [ContentState]

  spaceContentStates: [ContentState]
}

enum BackendExperiment {
  EINSTEIN
}

input BatchedInlineTasksInput {
  contentId: ID!

  tasks: [InlineTask]!

  trigger: PageUpdateTrigger
}

enum BillingSourceSystem {
  CCP

  HAMS
}

type BlockSmartLink implements SmartLink {
  url: String!
}

type BlogPostV2 implements Node {
  id: ID!

  status: BlogStatusV2!

  title: String!

  spaceId: ID

  authorId: ID

  createdAt: String

  version: VersionV2

  body: BodyV2

  internalProperties: InternalProperties

  operations: OperationsV2

  space: SpaceV2

  spacesV2(ids: [ID!]!): [SpaceV2]

  spaceTheme: ThemeV2

  spaceLookAndFeel: LookAndFeelV2

  spaceSettings: SpaceSettingsV2
}

type BlogPostV2Connection {
  edges: [BlogPostV2Edge]

  pageInfo: PageInfoV2!

  nodes: [BlogPostV2]
}

type BlogPostV2Edge {
  node: BlogPostV2!

  cursor: String
}

enum BlogStatusV2 {
  current

  trashed

  historical

  deleted

  draft
}

enum BodyFormatType {
  ATLAS_DOC_FORMAT

  EDITOR

  VIEW

  EXPORT_VIEW

  STYLED_VIEW

  STORAGE

  EDITOR2

  ANONYMOUS_EXPORT_VIEW
}

enum BodyFormatV2 {
  storage

  atlas_doc_format
}

type BodyV2 {
  storage: FormattedBodyV2

  atlas_doc_format: FormattedBodyV2
}

type BordersAndDividersLookAndFeel {
  color: String
}

type Breadcrumb {
  label: String

  links: LinksContextBase

  separator: String

  url: String
}

type BulkActionsFeature {
  isEntitled: Boolean!
}

type BulkArchivePagePayload {
  status: Boolean!

  taskId: String
}

input BulkArchivePagesInput {
  archiveNote: String

  areChildrenIncluded: Boolean

  descendantsNoteApplicationOption: DescendantsNoteApplicationOption

  excludedBranchRootPageIDs: [Long]

  isSelected: Boolean

  pageID: Long!
}

enum BulkBlogPostStatusV2 {
  current

  trashed

  deleted
}

input BulkDeleteContentDataClassificationLevelInput {
  contentStatuses: [ContentDataClassificationMutationContentStatus]!

  id: Long!
}

type BulkDeleteContentDataClassificationLevelPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

enum BulkPageStatusV2 {
  current

  trashed

  deleted

  archived
}

type BulkPermittedResponse {
  dontRequirePrincipalInSite: Boolean

  permissionId: String

  permitted: Boolean

  principalId: String

  resourceId: String
}

type BulkSetSpacePermissionAsyncPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!

  taskId: ID
}

input BulkSetSpacePermissionInput {
  spacePermissions: [SpacePermissionType]!

  spaceTypes: [BulkSetSpacePermissionSpaceType]!

  subjectId: ID!

  subjectType: BulkSetSpacePermissionSubjectType!
}

type BulkSetSpacePermissionPayload implements Payload {
  errors: [MutationError!]

  spacesUpdatedCount: Int!

  success: Boolean!
}

enum BulkSetSpacePermissionSpaceType {
  COLLABORATION

  GLOBAL

  KNOWLEDGE_BASE

  PERSONAL
}

enum BulkSetSpacePermissionSubjectType {
  GROUP

  USER
}

input BulkUpdateContentDataClassificationLevelInput {
  classificationLevelId: ID!

  contentStatuses: [ContentDataClassificationMutationContentStatus]!

  id: Long!
}

type BulkUpdateContentDataClassificationLevelPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input BulkUpdateMainSpaceSidebarLinksInput {
  hidden: Boolean!

  id: ID

  linkIdentifier: String

  type: SpaceSidebarLinkType
}

type ButtonLookAndFeel {
  backgroundColor: String

  color: String
}

type CQLDisplayableType {
  i18nKey: String

  label: String

  type: String
}

type CanvasToken {
  expiryDateTime: Long!

  token: String!
}

enum CatchupContentType {
  PAGE

  BLOGPOST
}

type CatchupEditMetadataForContent {
  lastVisitTimeISO: String

  editCount: Int!

  collaborators: [String]

  hasVersionChangedSinceLastVisit: Boolean

  users: [Person]
}

type CatchupLastViewedTimeResponse {
  lastViewedTimeISO: String
}

enum CatchupUpdateType {
  TOP_N
}

type CatchupVersionSummaryMetadataForContent {
  versionSummaryMetadata: [VersionSummaryMetaDataItem!]
}

type ChangeOwnerWarning {
  contentId: Long

  message: String
}

type ChildContentTypesAvailable {
  attachment: Boolean

  blogpost: Boolean

  comment: Boolean

  page: Boolean
}

type ClassificationLevelDetails {
  source: ClassificationLevelSource

  classificationLevel: ContentDataClassificationLevel
}

enum ClassificationLevelSource {
  CONTENT

  ORGANIZATION

  SPACE
}

type CollabDraft {
  document: String

  metadata: CollabDraftMetadata

  version: Int
}

type CollabDraftMetadata {
  title: String
}

enum CollabFormat {
  ADF

  PM
}

type CollabTokenResponse {
  token: String!
}

type CollaborationGraphRecommendationResult {
  id: ID!

  score: Float!

  content: Content
}

type CollaborationGraphRecommendationResults {
  nodes: [CollaborationGraphRecommendationResult!]!

  totalCount: Int!
}

input CollaborationGraphRequestContext {
  containerId: String

  objectId: String

  product: String = "confluence"

  toPrivacySafeString: String
}

type Comment {
  ancestors: [Comment]!

  author: Person!

  body(representation: DocumentRepresentation = HTML): DocumentBody!

  commentSource: Platform

  container: Content!

  contentStatus: String!

  createdAt: Date!

  createdAtNonLocalized: String!

  excerpt: String!

  id: ID!

  isInlineComment: Boolean!

  isLikedByCurrentUser: Boolean!

  likeCount: Int!

  links: Map_LinkType_String!

  location: CommentLocation!

  parentId: ID

  permissions: CommentPermissions!

  replies(depth: Int = -1): [Comment]!

  spaceId: Long!

  version: Version!

  reactionsSummary(childType: String!, pageId: ID!, contentType: String): ReactionsSummaryResponse

  reactionsSummaryList(ids: [ReactionsId]!): [ReactionsSummaryResponse]!
}

input CommentBody {
  representationFormat: ContentRepresentation!

  value: String!
}

enum CommentCreationLocation {
  EDITOR

  LIVE

  RENDERER

  WHITEBOARD
}

enum CommentDeletionLocation {
  EDITOR

  LIVE
}

type CommentEdge {
  cursor: String

  node: Comment
}

type CommentInternalProperties {
  commentSource: String
}

type CommentLinksV2 {
  editui: String

  webui: String

  tinyui: String
}

interface CommentLocation {
  type: String!
}

type CommentPermissions {
  isEditable: Boolean!

  isRemovable: Boolean!

  isResolvable: Boolean!

  isViewable: Boolean!
}

type CommentReplySuggestion {
  commentReplyType: CommentReplyType!

  text: String

  emojiId: String
}

type CommentReplySuggestions {
  commentSuggestions: [CommentReplySuggestion]!
}

enum CommentReplyType {
  QUICK_REPLY

  PROMPT

  EMOJI
}

enum CommentType {
  FOOTER

  INLINE

  RESOLVED

  UNRESOLVED
}

type CommentUpdate implements AllUpdatesFeedEvent {
  accountId: String!

  commentId: ID!

  datetime: String!

  type: AllUpdatesFeedEventType!

  user: Person!

  comment: Comment!
}

type CommentUserAction {
  id: String

  label: String

  style: String

  tooltip: String

  url: String
}

type CommentsDigestResponse {
  contentId: ID!

  summary: CommentsDigestSummaryResponse!

  summaryId: ID!

  language: String!
}

enum CommentsDigestResponseType {
  PLAIN_TEXT

  JSON
}

type CommentsDigestSummaryResponse {
  introduction: String!

  prioritizedOpenComments: [PrioritizedOpenComments!]!
}

enum CommentsType {
  FOOTER

  INLINE
}

type CompanyHubFeature {
  isEntitled: Boolean!
}

input ConfluenceAddCustomApplicationLinkInput {
  allowedGroups: [String]

  displayName: String!

  isHidden: Boolean!

  url: String!
}

type ConfluenceAddCustomApplicationLinkPayload implements Payload {
  applicationLink: ConfluenceCustomApplicationLink

  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceAdminAnnouncementBanner {
  appearance: String!

  content: String!

  id: ID!

  isDismissible: Boolean!

  title: String

  updatedAt: String!
}

type ConfluenceAdminAnnouncementBannerPayload {
  adminAnnouncementBannerSetting: ConfluenceAdminAnnouncementBannerSetting

  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceAdminAnnouncementBannerSetting {
  appearance: String!

  content: String!

  id: ID!

  isDismissible: Boolean!

  scheduledEndTime: String

  scheduledStartTime: String

  scheduledTimeZone: String

  status: ConfluenceAdminAnnouncementBannerStatusType!

  title: String

  visibility: ConfluenceAdminAnnouncementBannerVisibilityType!
}

enum ConfluenceAdminAnnouncementBannerStatusType {
  PUBLISHED

  SAVED

  SCHEDULED
}

enum ConfluenceAdminAnnouncementBannerVisibilityType {
  ALL

  AUTHORIZED
}

type ConfluenceAdminReport {
  date: String

  link: String

  reportId: ID

  user: AtlassianUser
}

type ConfluenceAdminReportPayload {
  errors: [MutationError!]

  reportId: ID!

  success: Boolean!
}

type ConfluenceAdminReportStatus {
  reports: [ConfluenceAdminReport]
}

type ConfluenceAnswer {
  author: ConfluenceUserInfo

  body: ConfluenceBodies

  comments(first: Int): PaginatedCommentList

  createdAt: String

  id: ID!

  latestVersion: ConfluenceContentVersion
}

type ConfluenceAnswerConnection {
  edges: [ConfluenceAnswerEdge]

  nodes: [ConfluenceAnswer]

  pageInfo: ConfluencePageInfo!
}

type ConfluenceAnswerEdge {
  cursor: String!

  node: ConfluenceAnswer
}

input ConfluenceAnswerFilters {
  exampleFilter: [String]
}

input ConfluenceAppLinkMapping {
  newAppLink: ConfluenceAppLinkMetadataInput!

  oldAppLink: ConfluenceAppLinkMetadataInput!
}

type ConfluenceAppLinkMetaData {
  serverId: ID!

  serverName: String!
}

input ConfluenceAppLinkMetadataInput {
  serverId: ID!

  serverName: String!
}

enum ConfluenceAttachmentSecurityLevel {
  INSECURE

  SECURE

  SMART
}

type ConfluenceAttachmentSettings {
  attachmentSecurityLevel: ConfluenceAttachmentSecurityLevel

  maxAttachmentSize: Long

  maxAttachmentsPerUpload: Int
}

type ConfluenceBlogPost {
  author: ConfluenceUserInfo

  blogPostId: ID!

  body: ConfluenceBodies

  comments(commentType: ConfluenceCommentType): [ConfluenceComment]

  id: ID!

  labels: [ConfluenceLabel]

  latestVersion: ConfluenceBlogPostVersion

  links: ConfluenceBlogPostLinks

  metadata: ConfluenceContentMetadata

  owner: ConfluenceUserInfo

  properties(keys: [String]!): [ConfluenceBlogPostProperty]

  space: ConfluenceSpace

  status: ConfluenceBlogPostStatus

  title: String

  type: ConfluenceContentType

  viewer: ConfluenceBlogPostViewerSummary
}

input ConfluenceBlogPostIdWithStatus {
  id: ID!

  status: String!
}

type ConfluenceBlogPostLinks {
  base: String

  editUi: String

  webUi: String
}

type ConfluenceBlogPostProperty {
  key: String!

  value: String!
}

enum ConfluenceBlogPostStatus {
  ARCHIVED

  CURRENT

  DELETED

  DRAFT

  HISTORICAL

  TRASHED
}

type ConfluenceBlogPostVersion {
  author: ConfluenceUserInfo

  createdAt: String

  number: Int
}

type ConfluenceBlogPostViewerSummary {
  favoritedSummary: ConfluenceFavoritedSummary

  lastContribution: ConfluenceContribution

  lastSeenAt: String
}

type ConfluenceBodies {
  anonymousExportView: ConfluenceBody

  atlasDocFormat: ConfluenceBody

  dynamic: ConfluenceBody

  editor: ConfluenceBody

  editor2: ConfluenceBody

  excerpt(length: Int = 140): String

  exportView: ConfluenceBody

  storage: ConfluenceBody

  styledView: ConfluenceBody

  view: ConfluenceBody
}

type ConfluenceBody {
  representation: ConfluenceBodyRepresentation

  value: String
}

enum ConfluenceBodyRepresentation {
  ANONYMOUS_EXPORT_VIEW

  ATLAS_DOC_FORMAT

  DYNAMIC

  EDITOR

  EDITOR2

  EXPORT_VIEW

  STORAGE

  STYLED_VIEW

  VIEW
}

input ConfluenceChangeOrderOfCustomApplicationLinkInput {
  id: ID!

  idAfter: ID

  isMoveToBeginning: Boolean
}

type ConfluenceChangeOrderOfCustomApplicationLinkPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceChildContent {
  attachment(after: String, first: Int = 25, offset: Int): PaginatedContentList! @deprecated(reason: "use content.[nodes|edges].attachments")

  blogpost(after: String, first: Int = 25, offset: Int): PaginatedContentList! @deprecated(reason: "Query content by type='blogpost' and then use content.[nodes|edges]")

  comment(after: String, depth: String = "", first: Int = 25, location: [String], offset: Int): PaginatedContentList! @deprecated(reason: "use content.[nodes|edges].comments or the top level comments query")

  page(after: String, first: Int = 25, offset: Int): PaginatedContentList! @deprecated(reason: "use content.[nodes|edges]")
}

enum ConfluenceCollaborativeEditingService {
  NCS

  SYNCHRONY
}

interface ConfluenceComment {
  author: ConfluenceUserInfo

  body: ConfluenceBodies

  commentId: ID

  container: ConfluenceCommentContainer

  id: ID!

  links: ConfluenceCommentLinks

  name: String

  status: ConfluenceCommentStatus
}

union ConfluenceCommentContainer = ConfluenceBlogPost|ConfluencePage|ConfluenceWhiteboard

type ConfluenceCommentCountSummary {
  total: Int
}

type ConfluenceCommentLinks {
  base: String

  webUi: String
}

enum ConfluenceCommentStatus {
  CURRENT

  DRAFT
}

enum ConfluenceCommentType {
  FOOTER

  INLINE
}

type ConfluenceContentBody {
  adf: String

  editor: String

  editor2: String

  exportView: String

  storage: String

  styledView: String

  view: String
}

input ConfluenceContentBodyInput {
  representation: ConfluenceContentRepresentation!

  value: String!
}

type ConfluenceContentMetadata {
  collaborativeEditingService: ConfluenceCollaborativeEditingService

  titleEmojiDraft: ConfluenceContentTitleEmoji

  titleEmojiPublished: ConfluenceContentTitleEmoji
}

enum ConfluenceContentRepresentation {
  ATLAS_DOC_FORMAT

  EDITOR

  EDITOR2

  EXPORT_VIEW

  PLAIN

  RAW

  STORAGE

  STYLED_VIEW

  VIEW

  WIKI
}

type ConfluenceContentSearchResult implements ConfluenceSearchResult {
  id: ID!

  title: String!

  url: String!

  baseUrl: String!

  excerpt: String!

  containerTitle: String!

  containerDisplayUrl: String!

  iconCssClass: String!

  lastModified: Date!

  score: Float!

  node: Content!

  content: Content
}

type ConfluenceContentSearchResults {
  nodes: [ConfluenceSearchResult!]!

  totalCount: Int!

  pageInfo: XpsPageInfo!

  abTest: AbTest
}

enum ConfluenceContentSearchScope {
  PAGE

  BLOGPOST

  ATTACHMENT

  SPACE

  WHITEBOARD

  DATABASE

  EMBED

  FOLDER
}

input ConfluenceContentSortField {
  field: ConfluenceContentSortingParameter!

  key: String

  order: SortOrder!
}

enum ConfluenceContentSortingParameter {
  LAST_MODIFIED_DATE

  TITLE
}

type ConfluenceContentTemplateRef {
  id: ID!

  moduleCompleteKey: String

  templateId: ID
}

type ConfluenceContentTitleEmoji {
  id: String

  key: String

  value: String
}

enum ConfluenceContentType {
  BLOG_POST

  PAGE

  WHITEBOARD
}

type ConfluenceContentVersion {
  author: ConfluenceUserInfo

  createdAt: String

  number: Int
}

type ConfluenceContribution {
  status: ConfluenceContributionStatus!
}

enum ConfluenceContributionStatus {
  CURRENT

  DRAFT

  UNKNOWN

  UNPUBLISHED
}

type ConfluenceConvertContentToFolderPayload {
  content: Content
}

type ConfluenceCopyPageTaskResult {
  page: ConfluencePage
}

input ConfluenceCreateAdminAnnouncementBannerInput {
  appearance: String!

  content: String!

  isDismissible: Boolean!

  scheduledEndTime: String

  scheduledStartTime: String

  scheduledTimeZone: String

  status: ConfluenceAdminAnnouncementBannerStatusType!

  title: String

  visibility: ConfluenceAdminAnnouncementBannerVisibilityType!
}

input ConfluenceCreateAnswerInput {
  body: ConfluenceContentBodyInput

  questionId: ID!
}

type ConfluenceCreateAnswerPayload implements Payload {
  answer: ConfluenceAnswer

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceCreateBlogPostInput {
  body: ConfluenceContentBodyInput

  spaceId: ID!

  status: ConfluenceMutationContentStatus

  title: String
}

type ConfluenceCreateBlogPostPayload implements Payload {
  blogPost: ConfluenceBlogPost

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceCreateBlogPostPropertyInput {
  blogPostId: ID!

  key: String!

  value: String!
}

type ConfluenceCreateBlogPostPropertyPayload {
  blogPostProperty: ConfluenceBlogPostProperty

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceCreateCommentOnAnswerInput {
  answerId: ID!

  body: ConfluenceContentBodyInput!
}

type ConfluenceCreateCommentOnAnswerPayload {
  comment: ConfluenceFooterComment

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceCreateCommentOnQuestionInput {
  body: ConfluenceContentBodyInput!

  questionId: ID!
}

type ConfluenceCreateCommentOnQuestionPayload {
  comment: ConfluenceFooterComment

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceCreateFooterCommentOnBlogPostInput {
  blogPostId: ID!

  body: ConfluenceContentBodyInput!
}

type ConfluenceCreateFooterCommentOnBlogPostPayload implements Payload {
  comment: ConfluenceFooterComment

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceCreateFooterCommentOnPageInput {
  body: ConfluenceContentBodyInput!

  pageId: ID!
}

type ConfluenceCreateFooterCommentOnPagePayload implements Payload {
  comment: ConfluenceFooterComment

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceCreatePageInput {
  body: ConfluenceContentBodyInput

  spaceId: ID!

  status: ConfluenceMutationContentStatus

  title: String
}

type ConfluenceCreatePagePayload implements Payload {
  errors: [MutationError!]

  page: ConfluencePage

  success: Boolean!
}

input ConfluenceCreatePagePropertyInput {
  key: String!

  pageId: ID!

  value: String!
}

type ConfluenceCreatePagePropertyPayload {
  errors: [MutationError!]

  pageProperty: ConfluencePageProperty

  success: Boolean!
}

input ConfluenceCreateQuestionInput {
  body: ConfluenceContentBodyInput

  spaceId: ID!

  title: String
}

type ConfluenceCreateQuestionPayload implements Payload {
  errors: [MutationError!]

  question: ConfluenceQuestion

  success: Boolean!
}

input ConfluenceCreateSpaceInput {
  key: String!

  name: String!

  type: ConfluenceSpaceType
}

type ConfluenceCreateSpacePayload implements Payload {
  errors: [MutationError!]

  space: ConfluenceSpace

  success: Boolean!
}

type ConfluenceCustomApplicationLink {
  allowedGroups: [String]

  applicationType: String

  displayName: String!

  id: ID!

  isEditable: Boolean!

  isHidden: Boolean!

  sourceApplicationName: String

  sourceApplicationUrl: String

  url: String!
}

type ConfluenceCustomPageSettings {
  footerText: String

  headerText: String
}

type ConfluenceCustomPageSpaceSettings {
  footerText: String

  headerText: String
}

type ConfluenceDatabase {
  author: ConfluenceUserInfo

  databaseId: ID!

  id: ID!

  links: ConfluenceDatabaseLinks

  owner: ConfluenceUserInfo

  space: ConfluenceSpace

  title: String
}

type ConfluenceDatabaseLinks {
  base: String

  webUi: String
}

type ConfluenceDefaultSpaceLogo {
  clientId: ID

  isLogoDisabled: Boolean

  mediaFileId: ID

  token: String
}

type ConfluenceDeleteAllTeamCalendarSubscriptionsPayload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeleteAnswerInput {
  id: ID!
}

type ConfluenceDeleteAnswerPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeleteBlogPostPropertyInput {
  blogPostId: ID!

  key: String!
}

type ConfluenceDeleteBlogPostPropertyPayload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeleteCommentInput {
  id: ID!
}

type ConfluenceDeleteCommentPayload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeleteCustomApplicationLinkInput {
  id: ID!
}

type ConfluenceDeleteCustomApplicationLinkPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeleteDraftBlogPostInput {
  id: ID!
}

type ConfluenceDeleteDraftBlogPostPayload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeleteDraftPageInput {
  id: ID!
}

type ConfluenceDeleteDraftPagePayload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeleteGlobalPageTemplateInput {
  id: ID!
}

type ConfluenceDeleteGlobalPageTemplatePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeletePagePropertyInput {
  key: String!

  pageId: ID!
}

type ConfluenceDeletePagePropertyPayload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeleteQuestionInput {
  id: ID!
}

type ConfluenceDeleteQuestionPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDeleteSpacePageTemplateInput {
  id: ID!

  spaceId: Long!
}

input ConfluenceDisableBlueprintInput {
  id: ID!

  spaceId: Long!
}

type ConfluenceDisableBlueprintPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceDisableDefaultSpaceLogoPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDisableGlobalPageBlueprintInput {
  id: ID!
}

type ConfluenceDisableGlobalPageBlueprintPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceDisableSpaceBlueprintInput {
  id: ID!
}

type ConfluenceDisableSpaceBlueprintPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

enum ConfluenceEdition {
  FREE

  PREMIUM

  STANDARD
}

type ConfluenceEditions {
  edition: ConfluenceEdition!
}

type ConfluenceEmailSettings {
  customDomainEmails: [String]

  defaultEmail: String

  email: SiteEmailAddress
}

type ConfluenceEmbed {
  author: ConfluenceUserInfo

  embedId: ID!

  id: ID!

  links: ConfluenceEmbedLinks

  metadata: ConfluenceContentMetadata

  owner: ConfluenceUserInfo

  space: ConfluenceSpace

  title: String
}

type ConfluenceEmbedLinks {
  base: String

  webUi: String
}

input ConfluenceEnableBlueprintInput {
  id: ID!

  spaceId: Long!
}

type ConfluenceEnableBlueprintPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceEnableDefaultSpaceLogoPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceEnableGlobalPageBlueprintInput {
  id: ID!
}

type ConfluenceEnableGlobalPageBlueprintPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceEnableSpaceBlueprintInput {
  id: ID!
}

type ConfluenceEnableSpaceBlueprintPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceFavoritedSummary {
  favoritedAt: String

  isFavorite: Boolean!
}

type ConfluenceFolder {
  author: ConfluenceUserInfo

  folderId: ID!

  id: ID!

  links: ConfluenceFolderLinks

  metadata: ConfluenceContentMetadata

  owner: ConfluenceUserInfo

  space: ConfluenceSpace

  title: String
}

type ConfluenceFolderLinks {
  base: String

  webUi: String
}

type ConfluenceFooterComment implements ConfluenceComment {
  author: ConfluenceUserInfo

  body: ConfluenceBodies

  commentId: ID

  container: ConfluenceCommentContainer

  id: ID!

  links: ConfluenceCommentLinks

  name: String

  status: ConfluenceCommentStatus
}

type ConfluenceFormattingSettings {
  dateFormat: String

  dateTimeFormat: String

  decimalNumberFormat: String

  longNumberFormat: String

  timeFormat: String
}

type ConfluenceGlobalBlueprint {
  contentTemplateRefs: [ConfluenceContentTemplateRef]

  id: ID!

  indexKey: String

  indexPageTemplateRef: ConfluenceContentTemplateRef

  isEnabled: Boolean

  isIndexDisabled: Boolean

  isPromoted: Boolean

  moduleCompleteKey: String

  name: String

  spaceKey: String
}

type ConfluenceGlobalBlueprintSettings {
  globalBlueprints: [ConfluenceGlobalBlueprint]

  isOnDemand: Boolean

  isToggleModulesPermitted: Boolean
}

type ConfluenceGlobalPageTemplate {
  description: String

  eligibilityStatus: String

  id: ID!

  isPromoted: Boolean

  isSpaceAdministrator: Boolean

  isSpaceCreator: Boolean

  lastUpdatedDate: String

  lastUpdater: ConfluenceUser

  name: String
}

type ConfluenceHydrationContext {
  id: ID!

  status: String!
}

type ConfluenceImportSpaceConfiguration {
  clientId: ID

  isJiraProjectEnabled: Boolean

  jiraProjectLinks: [ConfluenceJiraProjectLink]

  mediaToken: MediaToken
}

input ConfluenceImportSpaceInput {
  jiraProjectKey: String

  mediaFileId: ID!
}

type ConfluenceImportSpacePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!

  taskId: ID
}

type ConfluenceImportSpaceStatus {
  completedPercentage: Int

  elapsedTime: Long

  message: String

  state: ConfluenceImportSpaceTaskState
}

enum ConfluenceImportSpaceTaskState {
  COMPLETED

  FAILED

  IN_PROGRESS
}

type ConfluenceInlineComment implements ConfluenceComment {
  author: ConfluenceUserInfo

  body: ConfluenceBodies

  commentId: ID

  container: ConfluenceCommentContainer

  id: ID!

  links: ConfluenceCommentLinks

  name: String

  resolutionStatus: ConfluenceInlineCommentResolutionStatus

  status: ConfluenceCommentStatus
}

enum ConfluenceInlineCommentResolutionStatus {
  RESOLVED

  UNRESOLVED
}

type ConfluenceInlineTask {
  assignedTo: ConfluenceUserInfo

  body: ConfluenceContentBody

  completedBy: ConfluenceUserInfo

  container: ConfluenceInlineTaskContainer

  createdAt: String

  createdBy: ConfluenceUserInfo

  dueAt: String

  globalId: ID

  id: ID!

  status: ConfluenceInlineTaskStatus

  taskId: ID

  updatedAt: String
}

union ConfluenceInlineTaskContainer = ConfluenceBlogPost|ConfluencePage

enum ConfluenceInlineTaskStatus {
  COMPLETE

  INCOMPLETE
}

type ConfluenceJiraMacroAppLinksScanningStatus {
  additionalMessage: String

  problems: ConfluenceJiraMacroAppLinksValidatorResult

  status: ConfluenceJiraMacroAppLinksValidationStatus!
}

enum ConfluenceJiraMacroAppLinksValidationStatus {
  DONE

  ERROR

  FIXING

  NOT_STARTED

  NO_APPLINK

  SCANNING

  WAIT_FOR_CONFIG
}

type ConfluenceJiraMacroAppLinksValidatorResult {
  brokenAppLinks: [ConfluenceAppLinkMetaData]

  existingAppLinks: [ConfluenceAppLinkMetaData]
}

type ConfluenceJiraProjectLink {
  key: String

  value: String
}

type ConfluenceLabel {
  id: ID

  label: String

  prefix: String
}

type ConfluenceLanguage {
  country: String

  displayLanguage: String

  displayName: String

  encoding: String

  language: String

  name: String
}

type ConfluenceLike {
  likedAt: String

  user: ConfluenceUserInfo
}

type ConfluenceLikesSummary {
  count: Int

  likes: [ConfluenceLike]
}

type ConfluenceLoginSettings {
  enableElevatedSecurityCheck: Boolean

  loginAttemptsThreshold: Int
}

type ConfluenceLongTask {
  id: ID!

  state: ConfluenceLongTaskState

  taskId: ID
}

type ConfluenceLongTaskFailed implements ConfluenceLongTaskState {
  elapsedTime: Long

  errorMessages: [String]

  name: String
}

type ConfluenceLongTaskInProgress implements ConfluenceLongTaskState {
  elapsedTime: Long

  name: String

  percentageComplete: Int
}

"""
The result of a successful Long Task.
"""
union ConfluenceLongTaskResult = ConfluenceCopyPageTaskResult

interface ConfluenceLongTaskState {
  elapsedTime: Long

  name: String
}

type ConfluenceLongTaskSuccess implements ConfluenceLongTaskState {
  elapsedTime: Long

  name: String

  result: ConfluenceLongTaskResult
}

type ConfluenceMacro {
  count: Int

  key: String
}

type ConfluenceMacroUsage {
  unusedPluginMacros: [ConfluenceUnusedPluginMacro]

  usedPluginMacros: [ConfluenceUsedPluginMacro]
}

type ConfluenceManageApps {
  settings: ConfluenceManageAppsSettings
}

type ConfluenceManageAppsSettings {
  developmentMode: ConfluenceManageAppsSettingsProperties

  privateListings: ConfluenceManageAppsSettingsProperties
}

type ConfluenceManageAppsSettingsProperties {
  isEnabled: Boolean

  isReadOnly: Boolean

  isRefreshRequired: Boolean
}

type ConfluenceMutationApi {
  addCustomApplicationLink(input: ConfluenceAddCustomApplicationLinkInput!): ConfluenceAddCustomApplicationLinkPayload

  changeOrderOfCustomApplicationLink(input: ConfluenceChangeOrderOfCustomApplicationLinkInput!): ConfluenceChangeOrderOfCustomApplicationLinkPayload

  createAnswer(input: ConfluenceCreateAnswerInput!): ConfluenceCreateAnswerPayload

  createBlogPost(input: ConfluenceCreateBlogPostInput!): ConfluenceCreateBlogPostPayload

  createBlogPostProperty(input: ConfluenceCreateBlogPostPropertyInput!): ConfluenceCreateBlogPostPropertyPayload

  createCommentOnAnswer(input: ConfluenceCreateCommentOnAnswerInput!): ConfluenceCreateCommentOnAnswerPayload

  createCommentOnQuestion(input: ConfluenceCreateCommentOnQuestionInput!): ConfluenceCreateCommentOnQuestionPayload

  createFooterCommentOnBlogPost(input: ConfluenceCreateFooterCommentOnBlogPostInput!): ConfluenceCreateFooterCommentOnBlogPostPayload

  createFooterCommentOnPage(input: ConfluenceCreateFooterCommentOnPageInput!): ConfluenceCreateFooterCommentOnPagePayload

  createPage(input: ConfluenceCreatePageInput!): ConfluenceCreatePagePayload

  createPageProperty(input: ConfluenceCreatePagePropertyInput!): ConfluenceCreatePagePropertyPayload

  createQuestion(input: ConfluenceCreateQuestionInput!): ConfluenceCreateQuestionPayload

  createSpace(cloudId: ID!, input: ConfluenceCreateSpaceInput!): ConfluenceCreateSpacePayload

  deleteAllTeamCalendarSubscriptions: ConfluenceDeleteAllTeamCalendarSubscriptionsPayload

  deleteAnswer(input: ConfluenceDeleteAnswerInput!): ConfluenceDeleteAnswerPayload

  deleteBlogPostProperty(input: ConfluenceDeleteBlogPostPropertyInput!): ConfluenceDeleteBlogPostPropertyPayload

  deleteComment(input: ConfluenceDeleteCommentInput!): ConfluenceDeleteCommentPayload

  deleteCustomApplicationLink(input: ConfluenceDeleteCustomApplicationLinkInput!): ConfluenceDeleteCustomApplicationLinkPayload

  deleteDraftBlogPost(input: ConfluenceDeleteDraftBlogPostInput!): ConfluenceDeleteDraftBlogPostPayload

  deleteDraftPage(input: ConfluenceDeleteDraftPageInput!): ConfluenceDeleteDraftPagePayload

  deleteGlobalPageTemplate(input: ConfluenceDeleteGlobalPageTemplateInput!): ConfluenceDeleteGlobalPageTemplatePayload!

  deletePageProperty(input: ConfluenceDeletePagePropertyInput!): ConfluenceDeletePagePropertyPayload

  deleteQuestion(input: ConfluenceDeleteQuestionInput!): ConfluenceDeleteQuestionPayload

  deleteSpacePageTemplate(input: ConfluenceDeleteSpacePageTemplateInput!): ConfluenceDeleteGlobalPageTemplatePayload!

  disableBlueprint(input: ConfluenceDisableBlueprintInput!): ConfluenceDisableBlueprintPayload

  disableDefaultSpaceLogo: ConfluenceDisableDefaultSpaceLogoPayload

  disableGlobalBlueprint(input: ConfluenceDisableGlobalPageBlueprintInput!): ConfluenceDisableGlobalPageBlueprintPayload!

  disableSpaceBlueprint(input: ConfluenceDisableSpaceBlueprintInput!): ConfluenceDisableSpaceBlueprintPayload!

  enableBlueprint(input: ConfluenceEnableBlueprintInput!): ConfluenceEnableBlueprintPayload

  enableDefaultSpaceLogo: ConfluenceEnableDefaultSpaceLogoPayload

  enableGlobalBlueprint(input: ConfluenceEnableGlobalPageBlueprintInput!): ConfluenceEnableGlobalPageBlueprintPayload!

  enableSpaceBlueprint(input: ConfluenceEnableSpaceBlueprintInput!): ConfluenceEnableSpaceBlueprintPayload!

  importSpace(input: ConfluenceImportSpaceInput!): ConfluenceImportSpacePayload

  promoteBlueprint(input: ConfluencePromoteBlueprintInput!): ConfluencePromoteBlueprintPayload

  promotePageTemplate(input: ConfluencePromotePageTemplateInput!): ConfluencePromotePageTemplatePayload

  publishBlogPost(input: ConfluencePublishBlogPostInput!): ConfluencePublishBlogPostPayload

  publishPage(input: ConfluencePublishPageInput!): ConfluencePublishPagePayload

  purgeBlogPost(input: ConfluencePurgeBlogPostInput!): ConfluencePurgeBlogPostPayload

  purgePage(input: ConfluencePurgePageInput!): ConfluencePurgePagePayload

  reopenInlineComment(input: ConfluenceReopenInlineCommentInput!): ConfluenceReopenInlineCommentPayload

  repairJiraMacroAppLinks(input: ConfluenceRepairJiraMacroAppLinksInput!): ConfluenceRepairJiraMacroAppLinksPayload

  replyToComment(input: ConfluenceReplyToCommentInput!): ConfluenceReplyToCommentPayload

  requestSpaceAccess(confluenceRequestSpaceAccessInput: ConfluenceRequestSpaceAccessInput!): ConfluenceRequestSpaceAccessPayload!

  resetDefaultSpaceLogo: ConfluenceResetDefaultSpaceLogoPayload

  resetJiraMacroAppLinksScanStatus: ConfluenceResetJiraMacroAppLinksScanStatusPayload

  resolveInlineComment(input: ConfluenceResolveInlineCommentInput!): ConfluenceResolveInlineCommentPayload

  scanJiraMacroAppLinks: ConfluenceScanJiraMacroAppLinksPayload

  trashBlogPost(input: ConfluenceTrashBlogPostInput!): ConfluenceTrashBlogPostPayload

  trashPage(input: ConfluenceTrashPageInput!): ConfluenceTrashPagePayload

  unpromoteBlueprint(input: ConfluenceUnpromoteBlueprintInput!): ConfluenceUnpromoteBlueprintPayload

  unpromotePageTemplate(input: ConfluenceUnpromotePageTemplateInput!): ConfluenceUnpromotePageTemplatePayload

  updateAnswer(input: ConfluenceUpdateAnswerInput!): ConfluenceUpdateAnswerPayload

  updateComment(input: ConfluenceUpdateCommentInput!): ConfluenceUpdateCommentPayload

  updateConfluenceSiteSenderEmailAddress(input: ConfluenceUpdateSiteSenderEmailAddressInput!): ConfluenceUpdateSiteSenderEmailAddressPayload

  updateCurrentBlogPost(input: ConfluenceUpdateCurrentBlogPostInput!): ConfluenceUpdateCurrentBlogPostPayload

  updateCurrentPage(input: ConfluenceUpdateCurrentPageInput!): ConfluenceUpdateCurrentPagePayload

  updateCustomApplicationLink(input: ConfluenceUpdateCustomApplicationLinkInput!): ConfluenceUpdateCustomApplicationLinkPayload

  updateCustomPageConfiguration(input: ConfluenceUpdateCustomPageConfigurationInput!): ConfluenceUpdateCustomPageConfigurationPayload

  updateCustomPageSpaceConfiguration(input: ConfluenceUpdateCustomPageSpaceConfigurationInput!): ConfluenceUpdateCustomPageConfigurationPayload

  updateDraftBlogPost(input: ConfluenceUpdateDraftBlogPostInput!): ConfluenceUpdateDraftBlogPostPayload

  updateDraftPage(input: ConfluenceUpdateDraftPageInput!): ConfluenceUpdateDraftPagePayload

  updateEmailSiteConfiguration(input: ConfluenceUpdateEmailSiteConfigurationInput!): ConfluenceUpdateEmailSiteConfigurationPayload

  updateGlobalDefaultLanguageConfiguration(input: ConfluenceUpdateGlobalDefaultLocaleConfigurationInput!): ConfluenceUpdateGlobalDefaultLocaleConfigurationPayload

  updateGlobalPageTemplateDescription(input: ConfluenceUpdateGlobalPageTemplateDescriptionInput!): ConfluenceUpdateGlobalPageTemplateDescriptionPayload!

  updateGlobalTheme(input: ConfluenceUpdateGlobalThemeInput!): ConfluenceUpdateGlobalThemePayload

  updateIndexingLanguageConfiguration(input: ConfluenceUpdateIndexingLanguageConfigurationInput!): ConfluenceUpdateIndexingLanguageConfigurationPayload

  updateManageAppsSettings(input: ConfluenceUpdateManageAppsSettingsInput!): ConfluenceUpdateManageAppsSettingsPayload

  updateNewCodeMacro(input: ConfluenceUpdateNewCodeMacroInput!): ConfluenceUpdateNewCodeMacroPayload

  updatePdfExportConfiguration(input: ConfluenceUpdatePdfExportConfigurationInput!): ConfluenceUpdatePdfExportConfigurationPayload

  updatePdfExportSpaceConfiguration(input: ConfluenceUpdatePdfExportSpaceConfigurationInput!): ConfluenceUpdatePdfExportConfigurationPayload

  updateQuestion(input: ConfluenceUpdateQuestionInput!): ConfluenceUpdateQuestionPayload

  updateSiteConfiguration(input: ConfluenceUpdateSiteConfigurationInput!): ConfluenceUpdateSiteConfigurationPayload

  updateSiteSecurityConfiguration(input: ConfluenceUpdateSiteSecurityConfigurationInput!): ConfluenceUpdateSiteSecurityConfigurationPayload

  updateSpace(input: ConfluenceUpdateSpaceInput!): ConfluenceUpdateSpacePayload

  updateSpacePageTemplateDescription(input: ConfluenceUpdateSpacePageTemplateDescriptionInput!): ConfluenceUpdateGlobalPageTemplateDescriptionPayload!

  updateSpaceSettings(input: ConfluenceUpdateSpaceSettingsInput!): ConfluenceUpdateSpaceSettingsPayload

  updateSpaceTheme(input: ConfluenceUpdateSpaceThemeInput!): ConfluenceUpdateSpaceThemePayload

  updateTeamCalendarGlobalSettings(input: ConfluenceUpdateTeamCalendarGlobalSettingsInput!): ConfluenceUpdateTeamCalendarGlobalSettingsPayload

  updateValueBlogPostProperty(input: ConfluenceUpdateValueBlogPostPropertyInput!): ConfluenceUpdateValueBlogPostPropertyPayload

  updateValuePageProperty(input: ConfluenceUpdateValuePagePropertyInput!): ConfluenceUpdateValuePagePropertyPayload

  uploadDefaultSpaceLogo(input: ConfluenceUploadDefaultSpaceLogoInput!): ConfluenceUploadDefaultSpaceLogoPayload

  updateTeamPresenceSiteConfiguration(input: ConfluenceUpdateTeamPresenceSiteConfigurationInput!): ConfluenceUpdateTeamPresenceSiteConfigurationPayload
}

enum ConfluenceMutationContentStatus {
  CURRENT

  DRAFT
}

type ConfluenceNewCodeMacro {
  languages: [ConfluenceNewCodeMacroLanguage]

  selectedLanguage: ConfluenceNewCodeMacroLanguage

  selectedTheme: ConfluenceNewCodeMacroTheme

  themes: [ConfluenceNewCodeMacroTheme]
}

type ConfluenceNewCodeMacroLanguage {
  aliases: [String]!

  builtIn: Boolean!

  friendlyName: String!

  name: String!

  webResource: String!
}

type ConfluenceNewCodeMacroTheme {
  builtIn: Boolean!

  defaultLayout: [MapOfStringToString]!

  name: String!

  styleSheetUrl: String!

  webResource: String!
}

type ConfluenceNotificationsSettings {
  emailSettings: ConfluenceEmailSettings
}

type ConfluenceOperationCheck {
  operation: ConfluenceOperationName

  target: ConfluenceOperationTarget
}

enum ConfluenceOperationName {
  ADMINISTER

  ARCHIVE

  COPY

  CREATE

  CREATE_SPACE

  DELETE

  EXPORT

  MOVE

  PURGE

  PURGE_VERSION

  READ

  RESTORE

  RESTRICT_CONTENT

  UPDATE

  USE
}

enum ConfluenceOperationTarget {
  APPLICATION

  ATTACHMENT

  BLOG_POST

  COMMENT

  PAGE

  SPACE

  USER_PROFILE
}

type ConfluencePage {
  ancestors: [ConfluencePage]

  author: ConfluenceUserInfo

  body: ConfluenceBodies

  commentCountSummary: ConfluenceCommentCountSummary

  comments(commentType: ConfluenceCommentType): [ConfluenceComment]

  id: ID!

  labels: [ConfluenceLabel]

  latestVersion: ConfluencePageVersion

  likesSummary: ConfluenceLikesSummary

  links: ConfluencePageLinks

  metadata: ConfluenceContentMetadata

  owner: ConfluenceUserInfo

  pageId: ID!

  properties(keys: [String]!): [ConfluencePageProperty]

  space: ConfluenceSpace

  status: ConfluencePageStatus

  subtype: ConfluencePageSubType

  title: String

  type: ConfluenceContentType

  viewer: ConfluencePageViewerSummary
}

input ConfluencePageIdWithStatus {
  id: ID!

  status: String!
}

type ConfluencePageInfo {
  endCursor: String

  hasNextPage: Boolean!
}

type ConfluencePageLinks {
  base: String

  editUi: String

  webUi: String
}

type ConfluencePageProperty {
  key: String!

  value: String!
}

enum ConfluencePageStatus {
  ARCHIVED

  CURRENT

  DELETED

  DRAFT

  HISTORICAL

  TRASHED
}

enum ConfluencePageSubType {
  LIVE
}

type ConfluencePageVersion {
  author: ConfluenceUserInfo

  createdAt: String

  number: Int
}

type ConfluencePageViewerSummary {
  favoritedSummary: ConfluenceFavoritedSummary

  lastContribution: ConfluenceContribution

  lastSeenAt: String
}

type ConfluencePdfExportSettings {
  footer: String

  header: String

  style: String

  titlePage: String
}

type ConfluencePdfExportSpaceSettings {
  footer: String

  header: String

  style: String

  titlePage: String
}

input ConfluencePromoteBlueprintInput {
  id: ID!

  spaceId: Long!
}

type ConfluencePromoteBlueprintPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluencePromotePageTemplateInput {
  id: ID!

  spaceId: Long!
}

type ConfluencePromotePageTemplatePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluencePublishBlogPostInput {
  id: String!

  publishTitle: String
}

type ConfluencePublishBlogPostPayload implements Payload {
  blogPost: ConfluenceBlogPost

  errors: [MutationError!]

  success: Boolean!
}

input ConfluencePublishPageInput {
  id: String!

  publishTitle: String
}

type ConfluencePublishPagePayload implements Payload {
  errors: [MutationError!]

  page: ConfluencePage

  success: Boolean!
}

input ConfluencePurgeBlogPostInput {
  id: ID!
}

type ConfluencePurgeBlogPostPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluencePurgePageInput {
  id: ID!
}

type ConfluencePurgePagePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ConfluencePushNotificationSettings {
  customSettings: PushNotificationCustomSettings!

  group: PushNotificationSettingGroup!

  id: ID!
}

type ConfluenceQueryApi {
  answer(id: Long!): ConfluenceAnswer

  answers(ids: [Long]!): [ConfluenceAnswer]

  answersForQuestion(after: String, filters: ConfluenceAnswerFilters, first: Int = 25, questionId: Long!): ConfluenceAnswerConnection

  blogPost(id: ID!): ConfluenceBlogPost

  blogPosts(ids: [ID]!): [ConfluenceBlogPost]

  blogPostsWithStatuses(idsWithStatuses: [ConfluenceBlogPostIdWithStatus]!): [ConfluenceBlogPost]

  comment(id: ID!): ConfluenceComment

  comments(ids: [ID]!): [ConfluenceComment]

  customApplicationLinks: [ConfluenceCustomApplicationLink]

  customPageSpaceSettings(spaceId: Long!): ConfluenceCustomPageSpaceSettings

  database(id: ID!): ConfluenceDatabase

  databases(ids: [ID]!): [ConfluenceDatabase]

  defaultSpaceLogo: ConfluenceDefaultSpaceLogo

  embed(id: ID!): ConfluenceEmbed

  embeds(ids: [ID!]!): [ConfluenceEmbed]

  findSpaces(after: String, cloudId: ID!, filters: ConfluenceSpaceFilters, first: Int = 25): ConfluenceSpaceConnection

  folder(id: ID!): ConfluenceFolder

  folders(ids: [ID!]!): [ConfluenceFolder]

  globalBlueprintSettings: ConfluenceGlobalBlueprintSettings

  globalSpaceBlueprintSettings(spaceId: Long!): ConfluenceGlobalBlueprintSettings

  importSpaceConfiguration: ConfluenceImportSpaceConfiguration

  importSpaceStatus(taskId: ID!): ConfluenceImportSpaceStatus

  inlineTask(id: ID!): ConfluenceInlineTask

  jiraMacroAppLinksScanningStatus: ConfluenceJiraMacroAppLinksScanningStatus

  longTask(id: ID!): ConfluenceLongTask

  manageApps: ConfluenceManageApps

  macroUsage: ConfluenceMacroUsage

  newCodeMacro: ConfluenceNewCodeMacro

  notificationsSettings: ConfluenceNotificationsSettings

  page(id: ID!): ConfluencePage

  pages(ids: [ID]!): [ConfluencePage]

  pagesWithStatuses(idsWithStatuses: [ConfluencePageIdWithStatus]!): [ConfluencePage]

  pdfExportSpaceSettings(spaceId: Long!): ConfluencePdfExportSpaceSettings

  question(id: Long!): ConfluenceQuestion

  questions(ids: [Long]!): [ConfluenceQuestion]

  questionsForSpace(after: String, filters: ConfluenceQuestionFilters, first: Int = 25, spaceId: Long!): ConfluenceQuestionConnection

  reIndexLongTask: ConfluenceReIndexLongTask

  siteConfiguration: ConfluenceSiteConfiguration

  space(id: ID!): ConfluenceSpace

  spaceBlueprints: [ConfluenceSpaceBlueprint]

  spaces(ids: [ID]!): [ConfluenceSpace]

  systemTemplates: [ConfluenceSystemTemplate]

  teamCalendar: ConfluenceTeamCalendar!

  templates: ConfluenceTemplates

  themes: ConfluenceThemes

  validateSpaceKey(cloudId: ID!, generateUniqueKey: Boolean = false, spaceKey: String!, validateUniqueness: Boolean = false): ConfluenceValidateSpaceKeyResponse

  whiteboard(id: ID!): ConfluenceWhiteboard

  whiteboards(ids: [ID]!): [ConfluenceWhiteboard]
}

type ConfluenceQuestion {
  answersTotalCount: Int

  author: ConfluenceUserInfo

  body: ConfluenceBodies

  comments(first: Int): PaginatedCommentList

  createdAt: String

  id: ID!

  latestVersion: ConfluenceContentVersion

  title: String
}

type ConfluenceQuestionConnection {
  edges: [ConfluenceQuestionEdge]

  nodes: [ConfluenceQuestion]

  pageInfo: ConfluencePageInfo!
}

type ConfluenceQuestionEdge {
  cursor: String!

  node: ConfluenceQuestion
}

input ConfluenceQuestionFilters {
  answered: Boolean
}

type ConfluenceReIndexLongTask {
  completePercentage: Int

  elapsedTime: Long

  taskStatus: ConfluenceReIndexLongTaskStatus
}

enum ConfluenceReIndexLongTaskStatus {
  FAILED

  IN_PROGRESS

  NOT_TRIGGERED

  SUBMITTED

  SUCCEED
}

input ConfluenceReopenInlineCommentInput {
  id: ID!
}

type ConfluenceReopenInlineCommentPayload {
  comment: ConfluenceInlineComment

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceRepairJiraMacroAppLinksInput {
  appLinkMapping: [ConfluenceAppLinkMapping!]!
}

type ConfluenceRepairJiraMacroAppLinksPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceReplyToCommentInput {
  body: ConfluenceContentBodyInput!

  parentCommentId: ID!
}

type ConfluenceReplyToCommentPayload {
  comment: ConfluenceComment

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceRequestSpaceAccessInput {
  spaceKey: String!
}

type ConfluenceRequestSpaceAccessPayload implements Payload {
  errors: [MutationError!]

  spaceKey: String!

  success: Boolean!
}

type ConfluenceResetDefaultSpaceLogoPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceResetJiraMacroAppLinksScanStatusPayload implements Payload {
  errors: [MutationError!]

  scanningStatus: ConfluenceJiraMacroAppLinksScanningStatus

  success: Boolean!
}

input ConfluenceResolveInlineCommentInput {
  id: ID!
}

type ConfluenceResolveInlineCommentPayload {
  comment: ConfluenceInlineComment

  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceScanJiraMacroAppLinksPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

enum ConfluenceSearchContentStatus {
  ARCHIVED

  CURRENT

  DRAFT
}

input ConfluenceSearchContributorFilter {
  accountIds: [ID!]!
}

input ConfluenceSearchFilters {
  spaces: ConfluenceSearchSpaceFilter

  contributors: ConfluenceSearchContributorFilter

  labels: [ConfluenceSearchLabelFilter!]

  lastModified: ConfluenceSearchLastModifiedFilter

  statuses: ConfluenceSearchStatusesFilter

  titleMatchOnly: ConfluenceSearchTitleMatchOnlyFilter
}

input ConfluenceSearchLabelFilter {
  name: String!

  namespace: LabelNamespaceEnum = GLOBAL
}

input ConfluenceSearchLastModifiedFilter {
  from: String!

  to: String!
}

interface ConfluenceSearchResult {
  id: ID!

  title: String!

  url: String!

  baseUrl: String!

  excerpt: String!

  containerTitle: String!

  containerDisplayUrl: String!

  score: Float!
}

input ConfluenceSearchSpaceFilter {
  spaceKeys: [String!]!
}

input ConfluenceSearchStatusesFilter {
  statuses: [ConfluenceSearchContentStatus!]!
}

input ConfluenceSearchTitleMatchOnlyFilter {
  titleMatchOnly: Boolean = false
}

type ConfluenceSiteConfiguration {
  attachmentSettings: ConfluenceAttachmentSettings

  connectionTimeout: Int

  contactAdministratorsMessage: String

  customPageSettings: ConfluenceCustomPageSettings

  formattingSettings: ConfluenceFormattingSettings

  globalDefaultLocale: ConfluenceLanguage

  indexingLanguage: String

  installedLocales: [ConfluenceLanguage]

  isAddWildcardsToUserAndGroupSearchesEnabled: Boolean

  isAnonymousAccessToRemoteApiEnabled: Boolean

  isContactAdministratorsFormEnabled: Boolean

  isEditorConversionForSiteEnabled: Boolean

  isEditorFullWidthEnabled: Boolean

  isEmailNotificationEnabled: Boolean

  isExternalConnectionEnabled: Boolean

  isLikesEnabled: Boolean

  isNofollowExternalLinksEnabled: Boolean

  isPushNotificationEnabled: Boolean

  isRecommendedEmailNotificationEnabled: Boolean

  isSystemAdminEnabled: Boolean

  isXsrfAddCommentsEnabled: Boolean

  loginSettings: ConfluenceLoginSettings

  maxRssItems: Int

  pageTimeout: Int

  pdfExportSettings: ConfluencePdfExportSettings

  rssTimeout: Int

  siteHomePage: String

  siteTitle: String

  socketTimeout: Int

  teamPresenceSettings: ConfluenceTeamPresenceSettings
}

enum ConfluenceSiteEmailAddressStatus {
  ACTIVE

  INACTIVE

  SITE_EMAIL_ADDRESS_NOT_PRESENT
}

type ConfluenceSpace {
  createdBy: ConfluenceUserInfo

  createdDate: String

  description: ConfluenceSpaceDescription

  homepage: ConfluencePage

  icon: ConfluenceSpaceIcon

  id: ID!

  key: String

  links: ConfluenceSpaceLinks

  metadata: ConfluenceSpaceMetadata

  name: String

  operations: [ConfluenceOperationCheck]

  settings: ConfluenceSpaceSettings

  spaceId: ID!

  status: ConfluenceSpaceStatus

  type: ConfluenceSpaceType
}

type ConfluenceSpaceBlueprint {
  id: ID!

  isEnabled: Boolean

  moduleCompleteKey: String

  name: String
}

type ConfluenceSpaceConnection {
  edges: [ConfluenceSpaceEdge]

  nodes: [ConfluenceSpace]

  pageInfo: ConfluencePageInfo!
}

type ConfluenceSpaceDescription {
  plain: String

  view: String
}

type ConfluenceSpaceEdge {
  cursor: String!

  node: ConfluenceSpace
}

input ConfluenceSpaceFilters {
  name: String

  type: ConfluenceSpaceType
}

type ConfluenceSpaceIcon {
  height: Int

  isDefault: Boolean

  path: String

  width: Int
}

type ConfluenceSpaceLinks {
  base: String

  webUi: String
}

type ConfluenceSpaceMetadata {
  labels: [ConfluenceLabel]

  recentCommenters: [ConfluenceUserInfo]

  recentWatchers: [ConfluenceUserInfo]

  totalCommenters: Long

  totalCurrentBlogPosts: Long

  totalCurrentPages: Long

  totalWatchers: Long
}

type ConfluenceSpaceSearchResult implements ConfluenceSearchResult {
  id: ID!

  title: String!

  url: String!

  baseUrl: String!

  excerpt: String!

  containerTitle: String!

  containerDisplayUrl: String!

  spaceKey: String!

  spaceIconPath: String!

  score: Float!

  node: Space!

  space: Space
}

enum ConfluenceSpaceSettingEditorVersion {
  V1

  V2
}

type ConfluenceSpaceSettings {
  editorVersions: ConfluenceSpaceSettingsEditorVersions

  routeOverrideEnabled: Boolean
}

type ConfluenceSpaceSettingsEditorVersions {
  blogPost: ConfluenceSpaceSettingEditorVersion

  default: ConfluenceSpaceSettingEditorVersion

  page: ConfluenceSpaceSettingEditorVersion
}

enum ConfluenceSpaceStatus {
  ARCHIVED

  CURRENT

  TRASHED
}

enum ConfluenceSpaceType {
  GLOBAL

  PERSONAL
}

type ConfluenceSystemTemplate {
  id: ID!

  moduleCompleteKey: String

  moduleKey: String

  name: String

  pluginKey: String
}

type ConfluenceTeamCalendar {
  globalSettings: ConfluenceTeamCalendarGlobalSettings
}

type ConfluenceTeamCalendarDaysOfWeekOptions {
  key: ConfluenceTeamCalendarWeekValues

  value: String
}

type ConfluenceTeamCalendarGlobalSettings {
  allowSiteAdmin: Boolean

  daysOfWeekOptions: [ConfluenceTeamCalendarDaysOfWeekOptions]

  disablePrivateUrls: Boolean

  displayWeekNumbers: Boolean

  startDayOfWeek: ConfluenceTeamCalendarWeekValues

  timeFormat: ConfluenceTeamCalendarTimeFormatTypes
}

enum ConfluenceTeamCalendarTimeFormatTypes {
  DISPLAY_TIME_FORMAT_12

  DISPLAY_TIME_FORMAT_24
}

enum ConfluenceTeamCalendarWeekValues {
  DEFAULT

  FIVE

  FOUR

  ONE

  SEVEN

  SIX

  THREE

  TWO
}

type ConfluenceTeamPresenceSettings {
  isEnabledOnContentView: Boolean
}

type ConfluenceTemplates {
  globalPageTemplates: [ConfluenceGlobalPageTemplate]

  spacePageTemplates(spaceId: Long!): [ConfluenceGlobalPageTemplate]

  spaceTemplates(spaceId: Long!): [ConfluenceGlobalPageTemplate]
}

type ConfluenceTheme {
  completeKey: String

  configPath: String

  description: String

  i18nDescriptionKey: String

  i18nNameKey: String

  iconLocation: String

  name: String
}

type ConfluenceThemes {
  currentGlobalTheme: ConfluenceTheme

  currentSpaceTheme(spaceId: Long!): ConfluenceTheme

  globalThemes: [ConfluenceTheme]

  spaceThemes(spaceId: Long!): [ConfluenceTheme]
}

input ConfluenceTrashBlogPostInput {
  id: ID!
}

type ConfluenceTrashBlogPostPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceTrashPageInput {
  id: ID!
}

type ConfluenceTrashPagePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUnpromoteBlueprintInput {
  id: ID!

  spaceId: Long!
}

type ConfluenceUnpromoteBlueprintPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUnpromotePageTemplateInput {
  id: ID!

  spaceId: Long!
}

type ConfluenceUnpromotePageTemplatePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceUnusedPluginMacro {
  macroNames: [String]

  pluginKey: String

  pluginName: String
}

input ConfluenceUpdateAdminAnnouncementBannerInput {
  appearance: String

  content: String

  id: ID!

  isDismissible: Boolean

  scheduledEndTime: String

  scheduledStartTime: String

  scheduledTimeZone: String

  status: ConfluenceAdminAnnouncementBannerStatusType

  title: String

  visibility: ConfluenceAdminAnnouncementBannerVisibilityType
}

input ConfluenceUpdateAnswerInput {
  body: ConfluenceContentBodyInput

  id: ID!

  version: Int!
}

type ConfluenceUpdateAnswerPayload implements Payload {
  answer: ConfluenceAnswer

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateCommentInput {
  body: ConfluenceContentBodyInput!

  id: ID!
}

type ConfluenceUpdateCommentPayload {
  comment: ConfluenceComment

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateCurrentBlogPostInput {
  body: ConfluenceContentBodyInput

  id: ID!

  title: String
}

type ConfluenceUpdateCurrentBlogPostPayload implements Payload {
  blogPost: ConfluenceBlogPost

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateCurrentPageInput {
  body: ConfluenceContentBodyInput

  id: ID!

  title: String
}

type ConfluenceUpdateCurrentPagePayload implements Payload {
  errors: [MutationError!]

  page: ConfluencePage

  success: Boolean!
}

input ConfluenceUpdateCustomApplicationLinkInput {
  allowedGroups: [String]

  displayName: String

  id: ID!

  isHidden: Boolean!

  url: String
}

type ConfluenceUpdateCustomApplicationLinkPayload implements Payload {
  applicationLink: ConfluenceCustomApplicationLink

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateCustomPageConfigurationInput {
  footerText: String!

  headerText: String!
}

type ConfluenceUpdateCustomPageConfigurationPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateCustomPageSpaceConfigurationInput {
  footerText: String!

  headerText: String!

  spaceId: Long!
}

input ConfluenceUpdateDraftBlogPostInput {
  body: ConfluenceContentBodyInput

  id: ID!

  title: String
}

type ConfluenceUpdateDraftBlogPostPayload implements Payload {
  blogPost: ConfluenceBlogPost

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateDraftPageInput {
  body: ConfluenceContentBodyInput

  id: ID!

  title: String
}

type ConfluenceUpdateDraftPagePayload implements Payload {
  errors: [MutationError!]

  page: ConfluencePage

  success: Boolean!
}

input ConfluenceUpdateEmailSiteConfigurationInput {
  isEnableRecommendedEmailNotification: Boolean!
}

type ConfluenceUpdateEmailSiteConfigurationPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateGlobalDefaultLocaleConfigurationInput {
  globalDefaultLocale: String!
}

type ConfluenceUpdateGlobalDefaultLocaleConfigurationPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateGlobalPageTemplateDescriptionInput {
  description: String!

  id: ID!
}

type ConfluenceUpdateGlobalPageTemplateDescriptionPayload implements Payload {
  errors: [MutationError!]

  globalPageTemplate: ConfluenceGlobalPageTemplate

  success: Boolean!
}

input ConfluenceUpdateGlobalThemeInput {
  themeKey: String
}

type ConfluenceUpdateGlobalThemePayload implements Payload {
  currentGlobalTheme: ConfluenceTheme

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateIndexingLanguageConfigurationInput {
  indexingLanguage: String!
}

type ConfluenceUpdateIndexingLanguageConfigurationPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateManageAppsSettingsInput {
  isDevelopmentModeEnabled: Boolean!

  isPrivateListingEnabled: Boolean!
}

type ConfluenceUpdateManageAppsSettingsPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateNewCodeMacroInput {
  languageName: String!

  themeName: String!
}

type ConfluenceUpdateNewCodeMacroPayload implements Payload {
  errors: [MutationError!]

  newCodeMacro: ConfluenceNewCodeMacro

  success: Boolean!
}

input ConfluenceUpdatePdfExportConfigurationInput {
  footer: String!

  header: String!

  style: String!

  titlePage: String!
}

type ConfluenceUpdatePdfExportConfigurationMutationErrorExtension implements MutationErrorExtension {
  baseUrl: String

  errorType: String

  statusCode: Int

  url: String
}

type ConfluenceUpdatePdfExportConfigurationPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdatePdfExportSpaceConfigurationInput {
  footer: String!

  header: String!

  spaceId: Long!

  style: String!

  titlePage: String!
}

input ConfluenceUpdateQuestionInput {
  body: ConfluenceContentBodyInput

  id: ID!

  title: String

  version: Int!
}

type ConfluenceUpdateQuestionPayload implements Payload {
  errors: [MutationError!]

  question: ConfluenceQuestion

  success: Boolean!
}

input ConfluenceUpdateSiteConfigurationInput {
  connectionTimeout: Int!

  customContactMessage: String!

  dateFormat: String!

  dateTimeFormat: String!

  decimalNumberFormat: String!

  globalDefaultLocale: String!

  indexingLanguage: String!

  isContactAdministratorsFormEnabled: Boolean!

  isEditorConversionForSiteEnabled: Boolean!

  isEditorFullWidthEnabled: Boolean!

  isEmailNotificationEnabled: Boolean!

  isExternalConnectionsEnabled: Boolean!

  isLikesEnabled: Boolean!

  isPushNotificationEnabled: Boolean!

  longNumberFormat: String!

  maxAttachmentSize: Long!

  maxNumberOfAttachmentsPerUpload: Int!

  siteHomePage: String!

  siteTitle: String!

  socketTimeout: Int!

  timeFormat: String!
}

type ConfluenceUpdateSiteConfigurationMutationErrorExtension implements MutationErrorExtension {
  errorType: String

  groupName: String

  spaceName: String

  statusCode: Int
}

type ConfluenceUpdateSiteConfigurationPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateSiteSecurityConfigurationInput {
  attachmentSecurityLevel: ConfluenceAttachmentSecurityLevel!

  isAddWildcardsToUserAndGroupSearchesEnabled: Boolean!

  isAnonymousAccessToRemoteApiEnabled: Boolean!

  isElevatedSecurityCheckEnabled: Boolean!

  isNofollowExternalLinksEnabled: Boolean!

  isXsrfAddCommentsEnabled: Boolean!

  loginAttemptsThreshold: Int!

  maxRssItems: Int!

  pageTimeout: Int!

  rssTimeout: Int!
}

type ConfluenceUpdateSiteSecurityConfigurationPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateSiteSenderEmailAddressInput {
  emailAddress: String!
}

type ConfluenceUpdateSiteSenderEmailAddressPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateSpaceInput {
  id: ID!

  name: String
}

input ConfluenceUpdateSpacePageTemplateDescriptionInput {
  description: String!

  id: ID!

  spaceId: Long!
}

type ConfluenceUpdateSpacePayload implements Payload {
  errors: [MutationError!]

  space: ConfluenceSpace

  success: Boolean!
}

input ConfluenceUpdateSpaceSettingsInput {
  id: String!

  routeOverrideEnabled: Boolean!
}

type ConfluenceUpdateSpaceSettingsPayload implements Payload {
  confluenceSpaceSettings: ConfluenceSpaceSettings

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateSpaceThemeInput {
  spaceId: Long!

  themeKey: String
}

type ConfluenceUpdateSpaceThemePayload implements Payload {
  currentTheme: ConfluenceTheme

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateTeamCalendarGlobalSettingsInput {
  allowSiteAdmin: Boolean!

  disablePrivateUrls: Boolean!

  displayWeekNumbers: Boolean!

  startDayOfWeek: ConfluenceTeamCalendarWeekValues!

  timeFormat: ConfluenceTeamCalendarTimeFormatTypes!
}

type ConfluenceUpdateTeamCalendarGlobalSettingsPayload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateTeamPresenceSiteConfigurationInput {
  isEnabledOnContentView: Boolean!
}

type ConfluenceUpdateTeamPresenceSiteConfigurationPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateValueBlogPostPropertyInput {
  blogPostId: ID!

  key: String!

  value: String!
}

type ConfluenceUpdateValueBlogPostPropertyPayload {
  blogPostProperty: ConfluenceBlogPostProperty

  errors: [MutationError!]

  success: Boolean!
}

input ConfluenceUpdateValuePagePropertyInput {
  key: String!

  pageId: ID!

  value: String!
}

type ConfluenceUpdateValuePagePropertyPayload {
  errors: [MutationError!]

  pageProperty: ConfluencePageProperty

  success: Boolean!
}

input ConfluenceUploadDefaultSpaceLogoInput {
  fileStoreId: ID!
}

type ConfluenceUploadDefaultSpaceLogoPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ConfluenceUsedPluginMacro {
  macros: [ConfluenceMacro!]

  pageCount: Int

  pluginName: String
}

type ConfluenceUser {
  accessStatus: AccessStatus!

  accountId: String

  currentUser: CurrentUserOperations

  groups: [String]! @deprecated(reason: "Use groupWithId instead")

  groupsWithId: [Group]!

  hasBlog: Boolean

  hasPersonalSpace: Boolean

  locale: String!

  operations: [OperationCheckResult]!

  permissionType: SitePermissionType @deprecated(reason: "Consider using accessStatus as an alternative")

  roles: GraphQLConfluenceUserRoles

  userKey: String

  space: Space
}

type ConfluenceUserInfo {
  id: ID!

  type: ConfluenceUserType!
}

enum ConfluenceUserType {
  ANONYMOUS

  KNOWN
}

type ConfluenceValidateSpaceKeyResponse {
  generatedUniqueKey: String

  isValid: Boolean!
}

type ConfluenceWhiteboard {
  author: ConfluenceUserInfo

  comments(commentType: ConfluenceCommentType): [ConfluenceComment]

  id: ID!

  links: ConfluenceWhiteboardLinks

  owner: ConfluenceUserInfo

  space: ConfluenceSpace

  title: String

  type: ConfluenceContentType

  whiteboardId: ID!
}

type ConfluenceWhiteboardLinks {
  base: String

  webUi: String
}

type Confluence_cqlMetaData {
  cqlContentTypes(category: String = "content"): [CQLDisplayableType]!
}

type Confluence_dataSecurityPolicy {
  getClassificationLevelArisBlockingAction(action: DataSecurityPolicyAction!): [String]!

  getContentIdsBlockedForAction(action: DataSecurityPolicyAction!, contentIds: [Long]!, spaceId: Long!): [Long]!

  isActionEnabledForContent(action: DataSecurityPolicyAction!, contentId: Long!, contentStatus: DataSecurityPolicyDecidableContentStatus!, contentVersion: Int!, spaceId: Long, spaceKey: String): DataSecurityPolicyDecision!

  isActionEnabledForSpace(action: DataSecurityPolicyAction!, spaceId: Long, spaceKey: String): DataSecurityPolicyDecision!

  isActionEnabledForWorkspace(action: DataSecurityPolicyAction!): DataSecurityPolicyDecision!
}

type Confluence_users {
  current: Person @deprecated(reason: "Consider using user(current: true) as an alternative")
}

input ContactAdminMutationInput {
  content: ContactAdminMutationInputContent!

  recaptchaResponseToken: String
}

input ContactAdminMutationInputContent {
  from: String!

  requestDetails: String!

  subject: String!
}

enum ContactAdminPageDisabledReason {
  CONFIG_OFF

  NO_ADMIN_EMAILS

  NO_MAIL_SERVER

  NO_RECAPTCHA
}

type ContainerLookAndFeel {
  background: String

  backgroundAttachment: String

  backgroundBlendMode: String

  backgroundClip: String

  backgroundColor: String

  backgroundImage: String

  backgroundOrigin: String

  backgroundPosition: String

  backgroundRepeat: String

  backgroundSize: String

  borderRadius: String

  padding: String
}

type ContainerSummary {
  displayUrl: String

  links: LinksContextBase

  title: String
}

enum ContainerType {
  PAGE

  BLOGPOST

  SPACE

  WHITEBOARD
}

type Content {
  ancestors: [Content]

  archivableDescendantsCount: Long!

  archiveNote: String

  archivedContentMetadata: ArchivedContentMetadata

  attachments(after: String, first: Int = 25, offset: Int): PaginatedContentList

  blank: Boolean!

  body: ContentBodyPerRepresentation

  childTypes: ChildContentTypesAvailable

  children(after: String, first: Int = 25, offset: Int, type: String = "page"): PaginatedContentList

  classificationLevelDetails: ClassificationLevelDetails

  classificationLevelId(contentStatus: ContentDataClassificationQueryContentStatus!): String

  classificationLevelOverrideId: String

  comments(after: String, depth: String = "", first: Int = 25, location: [String], offset: Int, recentFirst: Boolean = false): PaginatedContentList

  container: SpaceOrContent

  contentProperties: ContentProperties

  contentState(isDraft: Boolean = false): ContentState

  contentStateLastUpdated(format: GraphQLDateFormat): Date

  creatorId: String

  currentUserIsWatching: Boolean!

  deletableDescendantsCount: Long!

  dynamicMobileBody(imageLazyLoading: Boolean! = true, pagePropertiesReportMacroRenderAtServer: Boolean! = false): ContentBody

  embeddedProduct: String

  excerpt(length: Int = 140): String!

  extensions: [KeyValueHierarchyMap]

  hasGroupRestriction(groupID: String!, permission: InspectPermissions!): Boolean!

  hasInheritedGroupRestriction(groupID: String!, permission: InspectPermissions!): Boolean!

  hasInheritedRestriction(accountID: String!, permission: InspectPermissions!): Boolean!

  hasInheritedRestrictions: Boolean!

  hasRestriction(accountID: String!, permission: InspectPermissions!): Boolean!

  hasRestrictions: Boolean!

  hasViewRestrictions: Boolean!

  hasVisibleChildPages: Boolean!

  history: History

  id: ID

  incomingLinks(after: String, first: Int = 50): PaginatedContentList

  inContentTree: Boolean!

  isExportEnabled: Boolean!

  labels(after: String, first: Int = 200, offset: Int, orderBy: LabelSort, prefix: [String]): PaginatedLabelList

  likes(after: String, first: Long = 25, offset: Int): LikesResponse

  links: LinksDownloadEdituiWebuiContextSelfTinyuiCollectionBase

  macroRenderedOutput: [MapOfStringToFormattedBody]

  mediaSession: ContentMediaSession!

  metadata: ContentMetadata!

  mobileContentBody(imageLazyLoading: Boolean! = true, pagePropertiesReportMacroRenderAtServer: Boolean! = false): String

  operations: [OperationCheckResult]

  outgoingLinks: OutgoingLinks

  properties(key: String, keys: [String], limit: Int = 10, start: Int): PaginatedJsonContentPropertyList

  referenceId: String

  restrictions: ContentRestrictions

  schedulePublishDate: String

  schedulePublishInfo: SchedulePublishInfo

  space: Space

  status: String

  subType: String

  title: String

  type: String

  version: Version

  visibleDescendantsCount: Long!

  contentAnalyticsViews: ContentAnalyticsViews

  contentAnalyticsViewers: ContentAnalyticsViewers

  smartFeatures: SmartPageFeatures

  dataClassificationLevel: ContentDataClassificationLevel

  classificationLevelMetadata: ContentDataClassificationLevel

  contentReactionsSummary: ReactionsSummaryResponse

  contentAnalyticsViewsByUser(accountIds: [String], limit: Int): ContentAnalyticsViewsByUser
}

enum ContentAccessInputType {
  EVERYONE_CAN_EDIT

  EVERYONE_CAN_VIEW

  EVERYONE_NO_ACCESS

  PRIVATE
}

enum ContentAccessType {
  EVERYONE_CAN_EDIT

  EVERYONE_CAN_VIEW

  EVERYONE_NO_ACCESS
}

enum ContentAction {
  created

  updated

  viewed
}

type ContentAnalyticsLastViewedAtByPage {
  nodes: [ContentAnalyticsLastViewedAtByPageItem]
}

type ContentAnalyticsLastViewedAtByPageItem {
  contentId: ID!

  lastViewedAt: String!
}

type ContentAnalyticsPageViewInfo {
  userId: ID!

  views: Int!

  lastVersionViewed: Int!

  lastVersionViewedUrl: String

  lastViewedAt: String!

  user: AtlassianUser!

  userProfile: AtlassianUser
}

type ContentAnalyticsTotalViewsByPage {
  nodes: [ContentAnalyticsTotalViewsByPageItem]
}

type ContentAnalyticsTotalViewsByPageItem {
  contentId: ID!

  totalViews: Int!
}

type ContentAnalyticsViewers {
  count: Int!
}

type ContentAnalyticsViews {
  count: Int!
}

type ContentAnalyticsViewsByDate {
  nodes: [ContentAnalyticsViewsByDateItem]
}

type ContentAnalyticsViewsByDateItem {
  date: String!

  total: Int!
}

type ContentAnalyticsViewsByUser {
  id: ID!

  pageViews: [ContentAnalyticsPageViewInfo!]!
}

type ContentBody {
  content: Content

  embeddedContent: [EmbeddedContent]!

  links: LinksContextBase

  macroRenderedOutput: FormattedBody

  macroRenderedRepresentation: String

  mediaToken: EmbeddedMediaToken

  representation: String

  value: String

  webresource: WebResourceDependencies
}

input ContentBodyInput {
  representation: String!

  value: String!
}

type ContentBodyPerRepresentation {
  atlas_doc_format: ContentBody

  dynamic: ContentBody

  editor: ContentBody

  editor2: ContentBody

  export_view: ContentBody

  plain: ContentBody

  raw: ContentBody

  storage: ContentBody

  styled_view: ContentBody

  view: ContentBody

  wiki: ContentBody
}

type ContentContributors {
  count: Int

  edges: [PersonEdge]

  isCurrentUserContributor: Boolean

  nodes: [Person]

  pageInfo: PageInfo
}

type ContentCreationMetadata {
  currentUserPermissions: PermissionMetadata!

  parent: Content

  space: Space!
}

type ContentDataClassificationLevel {
  color: String

  description: String

  guideline: String

  id: String!

  name: String!

  order: Int

  status: String!
}

enum ContentDataClassificationMutationContentStatus {
  CURRENT

  DRAFT
}

enum ContentDataClassificationQueryContentStatus {
  ARCHIVED

  CURRENT

  DRAFT
}

enum ContentDeleteActionType {
  DELETE_DRAFT

  DELETE_DRAFT_IF_BLANK

  MOVE_TO_TRASH

  PURGE_FROM_TRASH
}

type ContentEdge {
  cursor: String

  node: Content
}

type ContentHistory {
  by: Person!

  collaborators: ContributorUsers

  friendlyWhen: String!

  message: String!

  minorEdit: Boolean!

  number: Int!

  state: ContentState

  when: String!
}

type ContentHistoryEdge {
  cursor: String

  node: ContentHistory
}

type ContentLookAndFeel {
  body: ContainerLookAndFeel

  container: ContainerLookAndFeel

  header: ContainerLookAndFeel

  screen: ScreenLookAndFeel
}

type ContentMediaSession {
  accessTokens: MediaAccessTokens!

  collection: String!

  configuration: MediaConfiguration!

  downloadToken: MediaToken!

  mediaPickerUserToken: MediaPickerUserToken

  token: MediaToken!
}

input ContentMention {
  mentionLocalId: ID

  mentionedUserAccountId: ID!

  notificationAction: NotificationAction!
}

type ContentMetadata {
  comments: ContentMetadata_CommentsMetadataProvider_comments

  createdDate: String

  currentuser: ContentMetadata_CurrentUserMetadataProvider_currentuser

  frontend: ContentMetadata_SpaFriendlyMetadataProvider_frontend

  labels: [Label]

  lastModifiedDate: String

  likes: LikesModelMetadataDto

  simple: ContentMetadata_SimpleContentMetadataProvider_simple

  sourceTemplateEntityId: String
}

type ContentMetadata_CommentsMetadataProvider_comments {
  commentsCount: Int
}

type ContentMetadata_CurrentUserMetadataProvider_currentuser {
  favourited: FavouritedSummary

  lastcontributed: ContributionStatusSummary

  lastmodified: LastModifiedSummary

  scheduled: ScheduledPublishSummary

  viewed: RecentlyViewedSummary
}

type ContentMetadata_SimpleContentMetadataProvider_simple {
  adfExtensions: [String]

  hasComment: Boolean

  hasInlineComment: Boolean

  isFabric: Boolean
}

type ContentMetadata_SpaFriendlyMetadataProvider_frontend {
  collabService: String

  collabServiceWithMigration: String

  commentMacroNamesNotSpaFriendly: [String]

  commentsSpaFriendly: Boolean

  contentHash: String

  coverPictureWidth: String

  embedUrl: String

  embedded: Boolean!

  embeddedWithMigration: Boolean!

  fabricEditorEligibility: String

  fabricEditorSupported: Boolean

  macroNamesNotSpaFriendly: [String]

  migratedRecently: Boolean

  spaFriendly: Boolean
}

enum ContentPermissionType {
  EDIT

  VIEW
}

type ContentPermissions {
  contentAccess: ContentAccessType!

  contentPermissionsHash: String!

  currentUser: SubjectUserOrGroup

  currentUserWithEffectivePermissions: UsersWithEffectiveRestrictions!

  subjectsWithEffectiveContentPermissions(after: String, filterText: String, first: Int = 100): PaginatedSubjectUserOrGroupList!

  subjectsWithPermissions(after: String, filterText: String, first: Int = 100): PaginatedSubjectUserOrGroupList!
}

type ContentPermissionsPayload {
  status: Boolean!
}

type ContentProperties {
  draft: DraftContentProperties

  latest: PublishedContentProperties
}

type ContentPropertyV2 {
  key: String!

  value: JSON!

  version: VersionV2!
}

enum ContentRendererMode {
  EDITOR

  PDF

  RENDERER
}

enum ContentRepresentation {
  ATLAS_DOC_FORMAT

  EDITOR

  EDITOR2

  EXPORT_VIEW

  PLAIN

  RAW

  STORAGE

  STYLED_VIEW

  VIEW

  WIKI
}

enum ContentRepresentationV2 {
  atlas_doc_format

  editor

  editor2

  export_view

  plain

  raw

  storage

  styled_view

  view

  wiki
}

type ContentRestriction {
  content: Content

  links: LinksContextSelfBase

  operation: String

  restrictions: SubjectsByType
}

type ContentRestrictions {
  administer: ContentRestriction

  archive: ContentRestriction

  copy: ContentRestriction

  create: ContentRestriction

  create_space: ContentRestriction

  delete: ContentRestriction

  export: ContentRestriction

  move: ContentRestriction

  purge: ContentRestriction

  purge_version: ContentRestriction

  read: ContentRestriction

  restore: ContentRestriction

  restrict_content: ContentRestriction

  update: ContentRestriction

  use: ContentRestriction
}

type ContentRestrictionsPageResponse {
  links: LinksContextSelfBase

  restrictionsHash: String
}

enum ContentRole {
  DEFAULT

  EDITOR

  VIEWER
}

input ContentSpecificCreateInput {
  key: String!

  value: String!
}

type ContentState {
  color: String!

  id: ID

  isCallerPermitted: Boolean

  name: String!

  restrictionLevel: ContentStateRestrictionLevel!
}

input ContentStateInput {
  color: String

  id: Long

  name: String

  spaceKey: String
}

enum ContentStateRestrictionLevel {
  NONE

  PAGE_OWNER
}

type ContentStateSettings {
  contentStatesAllowed: Boolean

  customContentStatesAllowed: Boolean

  spaceContentStates: [ContentState]

  spaceContentStatesAllowed: Boolean
}

type ContentTemplate {
  body: EnrichableMap_ContentRepresentation_ContentBody

  description: String

  editorVersion: String

  labels: [Label]!

  links: LinksContextSelfBase

  name: String

  originalTemplate: ModuleCompleteKey

  referencingBlueprint: String

  space: Space

  templateId: String

  templateType: String

  templatePropertySet: TemplatePropertySet
}

input ContentTemplateBodyInput {
  atlasDocFormat: ContentBodyInput!
}

type ContentTemplateEdge {
  cursor: String

  node: ContentTemplate
}

input ContentTemplateLabelInput {
  id: ID!

  label: String

  name: String!

  prefix: String
}

input ContentTemplateSpaceInput {
  key: String!
}

enum ContentType {
  PAGE

  BLOG
}

type ContentVersion {
  contentId: ID!

  contentProperties: ContentProperties

  number: Int!

  updatedTime: String!

  author: AtlassianUser
}

type ContentVersionEdge {
  cursor: String

  node: ContentVersion!
}

type ContentVersionHistoryConnection {
  edges: [ContentVersionEdge]

  nodes: [ContentVersion!]!

  pageInfo: ContentVersionHistoryPageInfo!
}

input ContentVersionHistoryFilter {
  contentType: String!
}

type ContentVersionHistoryPageInfo {
  endCursor: String

  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String
}

type ContributionStatusSummary {
  status: String

  when: String
}

type ContributorUsers {
  links: LinksContextBase

  userAccountIds: [String]!

  userKeys: [String]

  users: [Person]!
}

type Contributors {
  links: LinksContextBase

  publishers: ContributorUsers
}

input ConvertMetadataInput {
  ari: String
}

input ConvertNoteInput {
  destination: DestinationInput!

  title: String

  body: String

  metadata: ConvertMetadataInput!
}

type ConvertNotePayload {
  errors: [NoteMutationError!]

  success: Boolean!

  redirect: String
}

input ConvertPageToLiveEditActionInput {
  contentId: ID!
}

type ConvertPageToLiveEditActionPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ConvertPageToLiveEditValidationResult {
  hasFooterComments: Boolean

  hasReactions: Boolean

  hasUnsupportedMacros: Boolean

  isValid: Boolean!

  message: String
}

type CopySpacePermissionsPayload {
  status: Boolean!
}

type CountGroupByEventName {
  nodes: [CountGroupByEventNameItem!]!

  pageInfo: GroupByPageInfo!
}

type CountGroupByEventNameItem {
  count: Int!

  eventName: String!
}

type CountGroupByPage {
  nodes: [CountGroupByPageItem!]!

  pageInfo: GroupByPageInfo!
}

type CountGroupByPageItem {
  page: String!

  count: Int!
}

type CountGroupBySpace {
  nodes: [CountGroupBySpaceItem!]!

  pageInfo: GroupByPageInfo!
}

type CountGroupBySpaceItem {
  space: String!

  count: Int!
}

type CountGroupByUser {
  nodes: [CountGroupByUserItem!]!

  pageInfo: GroupByPageInfo!
}

type CountGroupByUserItem {
  count: Int!

  userId: String!

  user: AtlassianUser!
}

type CountUsersGroupByPage {
  nodes: [CountUsersGroupByPageItem!]!

  pageInfo: GroupByPageInfo!
}

type CountUsersGroupByPageItem {
  user: Int!

  page: String!
}

input CreateCommentInput {
  commentBody: CommentBody!

  commentSource: Platform

  containerId: ID!

  parentCommentId: ID
}

input CreateContentInput {
  contentSpecificCreateInput: [ContentSpecificCreateInput!]

  parentId: ID

  spaceId: String

  spaceKey: String

  status: GraphQLContentStatus!

  title: String

  type: String!
}

input CreateContentMentionNotificationActionInput {
  contentId: ID!

  mentions: [ContentMention]!
}

type CreateContentMentionNotificationActionPayload implements Payload {
  contentId: String!

  errors: [MutationError!]

  success: Boolean!
}

input CreateContentTemplateInput {
  body: ContentTemplateBodyInput!

  description: String

  labels: [ContentTemplateLabelInput]

  name: String!

  space: ContentTemplateSpaceInput

  templateType: GraphQLContentTemplateType!
}

input CreateContentTemplateLabelsInput {
  contentTemplateId: ID!

  labels: [ContentTemplateLabelInput]!
}

input CreateFaviconFilesInput {
  fileStoreId: ID!
}

type CreateFaviconFilesPayload implements Payload {
  errors: [MutationError!]

  faviconFiles: [FaviconFile!]

  success: Boolean!
}

input CreateInlineCommentInput {
  commentBody: CommentBody!

  commentSource: Platform

  containerId: ID!

  createdFrom: CommentCreationLocation!

  lastFetchTimeMillis: Long!

  matchIndex: Int!

  numMatches: Int!

  originalSelection: String!

  parentCommentId: ID

  publishedVersion: Int

  step: Step
}

input CreateInlineContentInput {
  contentSpecificCreateInput: [ContentSpecificCreateInput!]

  createdInContentId: ID!

  spaceId: String

  spaceKey: String

  title: String

  type: String!
}

input CreateInlineTaskNotificationInput {
  contentId: ID!

  tasks: [IndividualInlineTaskNotificationInput]!
}

type CreateInlineTaskNotificationPayload implements Payload {
  contentId: ID!

  errors: [MutationError!]

  success: Boolean!

  tasks: [IndividualInlineTaskNotification]!
}

type CreateInvitationUrlPayload {
  id: ID!

  expiration: String!

  rules: [InvitationUrlRule!]!

  status: InvitationUrlsStatus!

  url: String!
}

input CreateLivePageInput {
  parentId: ID

  spaceKey: String!

  title: String
}

input CreateMentionNotificationInput {
  contentId: ID!

  mentionLocalId: ID

  mentionedUserAccountId: ID!
}

type CreateMentionNotificationPayload implements Payload {
  contentId: String!

  errors: [MutationError!]

  success: Boolean!
}

input CreateMentionReminderNotificationInput {
  contentId: ID!

  mentionData: [MentionData!]!
}

type CreateMentionReminderNotificationPayload implements Payload {
  contentId: String!

  errors: [MutationError!]

  failedAccountIds: [String]

  success: Boolean!
}

input CreateMetadataInput {
  isPinned: Boolean = false

  productLink: String

  labels: [String!]

  extraProps: [PropInput!]
}

input CreateNoteInput {
  title: String

  body: String

  metadata: CreateMetadataInput
}

type CreateNotePayload {
  errors: [NoteMutationError!]

  success: Boolean!

  note: NoteResponse
}

input CreatePageV2Input {
  body: FormattedBodyV2Input

  parentId: ID

  spaceId: ID!

  status: PageCreateStatusV2

  title: String
}

type CreatePageV2Payload {
  pageV2: PageV2
}

input CreatePersonalSpaceInput {
  copySpacePermissionsFromSpaceKey: String

  initialPermissionOption: InitialPermissionOptions

  spaceName: String!
}

input CreateSpaceAdditionalSettingsInput {
  jiraProject: CreateSpaceJiraProjectInput

  spaceTypeSettings: SpaceTypeSettingsInput
}

input CreateSpaceInput {
  additionalSettings: CreateSpaceAdditionalSettingsInput

  copySpacePermissionsFromSpaceKey: String

  initialPermissionOption: InitialPermissionOptions

  spaceKey: String!

  spaceLogoDataURI: String

  spaceName: String!

  spaceTemplateKey: String
}

input CreateSpaceJiraProjectInput {
  jiraProjectKey: String!

  jiraProjectName: String

  jiraServerId: String!
}

type CreateUpdate implements AllUpdatesFeedEvent {
  accountId: String!

  datetime: String!

  type: AllUpdatesFeedEventType!

  user: Person!
}

type CurrentConfluenceUser {
  isAnonymous: Boolean!

  key: String
}

type CurrentUserOperations {
  canFollow: Boolean

  followed: Boolean
}

type CustomPermissionsFeature {
  customRoleCountLimit: Int!

  isEntitled: Boolean!
}

enum DataSecurityPolicyAction {
  APP_ACCESS

  PAGE_EXPORT

  PUBLIC_LINKS
}

enum DataSecurityPolicyCoverageType {
  CLASSIFICATION_LEVEL

  CONTAINER

  NONE

  WORKSPACE
}

enum DataSecurityPolicyDecidableContentStatus {
  ARCHIVED

  CURRENT

  DRAFT
}

type DataSecurityPolicyDecision {
  action: DataSecurityPolicyAction

  allowed: Boolean

  appliedCoverage: DataSecurityPolicyCoverageType
}

type Date {
  value: String!
}

scalar DateTime

input DeactivatePaywallContentInput {
  deactivationIdentifier: ID!
}

type DeactivatePaywallContentPayload implements Payload {
  errors: [MutationError!]!

  success: Boolean!
}

enum DeactivatedPageOwnerUserType {
  FORMER_USERS

  NON_FORMER_USERS
}

type DeactivatedUserPageCountEntity {
  pageCount: Int

  user: AtlassianUser
}

type DeactivatedUserPageCountEntityEdge {
  cursor: String

  node: DeactivatedUserPageCountEntity
}

type DefaultSpaceRoleAssignmentsConnection {
  edges: [SpaceRoleAssignmentEdge]

  nodes: [SpaceRoleAssignment!]!

  pageInfo: SpacePermissionPageInfo!
}

input DeleteContentDataClassificationLevelInput {
  contentStatus: ContentDataClassificationMutationContentStatus!

  id: Long!
}

type DeleteContentDataClassificationLevelPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type DeleteContentResponsePayload {
  contentId: ID!

  wasDeleted: Boolean!
}

input DeleteContentTemplateLabelInput {
  contentTemplateId: ID!

  labelId: ID!
}

type DeleteContentTemplateLabelPayload {
  contentTemplateId: ID!

  labelId: ID!
}

input DeleteDefaultSpaceRoleAssignmentsInput {
  principalsList: [RoleAssignmentPrincipalInput!]!
}

type DeleteDefaultSpaceRoleAssignmentsPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input DeleteExCoSpacePermissionsInput {
  accountId: String!
}

type DeleteExCoSpacePermissionsPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type DeleteExternalCollaboratorDefaultSpacePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input DeleteInlineCommentInput {
  commentId: ID!

  step: Step
}

input DeleteLabelInput {
  contentId: ID!

  label: String!
}

type DeleteLabelPayload {
  contentId: ID!

  label: String!
}

input DeleteNoteInput {
  ari: String!
}

type DeleteNotePayload {
  errors: [NoteMutationError!]

  success: Boolean!

  ari: String
}

input DeletePagesInput {
  areChildrenIncluded: Boolean

  excludedBranchRootPageIDs: [Long]

  isSelected: Boolean

  pageID: Long!
}

type DeletePagesPayload {
  status: Boolean!

  taskId: String
}

input DeleteRelationInput {
  relationName: RelationType!

  sourceType: RelationSourceType!

  sourceKey: String!

  targetType: RelationTargetType!

  targetKey: String!
}

type DeleteRelationPayload {
  targetKey: String!

  sourceKey: String!

  relationName: String!
}

input DeleteSpaceDefaultClassificationLevelInput {
  id: Long!
}

type DeleteSpaceDefaultClassificationLevelPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input DeleteSpaceRoleAssignmentsInput {
  principalList: [RoleAssignmentPrincipalInput!]!

  spaceId: Long!
}

type DeleteSpaceRoleAssignmentsPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

enum Depth {
  ALL

  ROOT
}

enum DescendantsNoteApplicationOption {
  ALL

  NONE

  ROOTS
}

input DestinationInput {
  product: Product!

  contentType: ContentType!
}

type DetailCreator {
  accountId: String!

  canView: Boolean!

  name: String!
}

type DetailLabels {
  displayTitle: String!

  name: String!

  urlPath: String!
}

type DetailLastModified {
  friendlyModificationDate: String!

  sortableDate: String!
}

type DetailLine {
  commentsCount: Int!

  creator: DetailCreator

  details: [String]!

  id: Long!

  labels: [DetailLabels]!

  lastModified: DetailLastModified

  likesCount: Int!

  macroId: String

  reactionsCount: Int!

  relativeLink: String!

  rowId: Int!

  subRelativeLink: String!

  subTitle: String!

  title: String!

  unresolvedCommentsCount: Int!
}

type DetailsSummaryLines {
  asyncRenderSafe: Boolean!

  currentPage: Int!

  detailLines: [DetailLine]!

  macroId: String

  renderedHeadings: [String]!

  totalPages: Int!

  webResources: [String]!
}

type DisablePublicLinkForPagePayload {
  pageId: ID!
}

type DiscoveredFeature {
  date: String

  featureKey: String

  pluginKey: String

  userKey: String
}

type DocumentBody {
  representation: DocumentRepresentation!

  value: String!
}

enum DocumentRepresentation {
  ATLAS_DOC_FORMAT

  HTML

  STORAGE

  VIEW
}

type DraftContentProperties {
  coverPictureWidth: String
}

type EditUpdate implements AllUpdatesFeedEvent {
  accountId: String!

  datetime: String!

  type: AllUpdatesFeedEventType!

  version: Int!

  user: Person!
}

type Editions {
  confluence: ConfluenceEdition!
}

enum EditorConversionSetting {
  NONE

  SUPPORTED
}

input EditorDraftSyncInput {
  contentId: ID!

  doSetRelations: Boolean

  ncsStepVersion: Int
}

type EditorDraftSyncPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type EditorVersions {
  blogpost: String

  default: String

  page: String
}

type EditorVersionsMetadataDto {
  blogpost: String

  default: String

  page: String
}

type EmbeddedContent {
  entity: Content

  entityId: Long

  entityType: String

  links: LinksContextBase
}

type EmbeddedMediaToken {
  collectionIds: [String]

  contentId: ID

  expiryDateTime: String

  fileIds: [String]

  links: LinksContextBase

  token: String
}

type EmbeddedMediaTokenV2 {
  collectionIds: [String]

  contentId: ID

  expiryDateTime: String

  fileIds: [String]

  mediaUrl: String

  token: String
}

type EmbeddedSmartLink implements SmartLink {
  layout: String!

  url: String!

  width: Float!
}

type EnablePublicLinkForPagePayload {
  pageId: ID!

  publicLinkUrlPath: String!
}

type EnabledContentTypes {
  isBlogsEnabled: Boolean!

  isDatabasesEnabled: Boolean!

  isEmbedsEnabled: Boolean!

  isFoldersEnabled: Boolean!

  isLivePagesEnabled: Boolean!

  isWhiteboardsEnabled: Boolean!
}

input EnabledContentTypesInput {
  isBlogsEnabled: Boolean

  isDatabasesEnabled: Boolean

  isEmbedsEnabled: Boolean

  isFoldersEnabled: Boolean

  isLivePagesEnabled: Boolean

  isWhiteboardsEnabled: Boolean
}

type EnabledFeatures {
  isAnalyticsEnabled: Boolean!

  isAppsEnabled: Boolean!

  isAutomationEnabled: Boolean!

  isCalendarsEnabled: Boolean!

  isContentManagerEnabled: Boolean!

  isQuestionsEnabled: Boolean!

  isShortcutsEnabled: Boolean!
}

input EnabledFeaturesInput {
  isAnalyticsEnabled: Boolean

  isAppsEnabled: Boolean

  isAutomationEnabled: Boolean

  isCalendarsEnabled: Boolean

  isContentManagerEnabled: Boolean

  isQuestionsEnabled: Boolean

  isShortcutsEnabled: Boolean
}

type EnrichableMap_ContentRepresentation_ContentBody {
  atlas_doc_format: ContentBody

  dynamic: ContentBody

  editor: ContentBody

  editor2: ContentBody

  export_view: ContentBody

  plain: ContentBody

  raw: ContentBody

  storage: ContentBody

  styled_view: ContentBody

  view: ContentBody

  wiki: ContentBody
}

type Entitlements {
  adminAnnouncementBanner: AdminAnnouncementBannerFeature!

  archive: ArchiveFeature!

  bulkActions: BulkActionsFeature!

  companyHub: CompanyHubFeature!

  customPermissions: CustomPermissionsFeature!

  externalCollaborator: ExternalCollaboratorFeature!

  nestedActions: NestedActionsFeature!

  premiumExtensions: PremiumExtensionsFeature!

  teamCalendar: TeamCalendarFeature!

  whiteboardFeatures: WhiteboardFeatures
}

type EntityCountBySpace {
  nodes: [EntityCountBySpaceItem!]!
}

type EntityCountBySpaceItem {
  space: String!

  count: Int!
}

type EntityTimeseriesCount {
  nodes: [EntityTimeseriesCountItem!]!
}

type EntityTimeseriesCountItem {
  date: String!

  count: Int!
}

enum Environment {
  DEVELOPMENT

  STAGING

  PRODUCTION
}

type Error {
  status: Int!

  message: String!
}

type EventCTR {
  nodes: [EventCTRItems!]!
}

type EventCTRItems {
  clicks: Long!

  ctr: Float!

  discoveries: Long!
}

type EventTimeseriesCTR {
  nodes: [EventTimeseriesCTRItems!]!
}

type EventTimeseriesCTRItems {
  timestamp: String!

  ctr: Float!
}

type ExperimentalGenerateSpaceKeyResponse {
  key: String!
}

type ExperimentalSpaceProperty {
  key: String!

  value: String!

  version: ExperimentalSpacePropertyVersion
}

type ExperimentalSpacePropertyVersion {
  contentTypeModified: Boolean

  message: String

  minorEdit: Boolean!

  number: Int!

  when: String!
}

type ExperimentalSpaceSettings {
  editor: EditorVersions

  routeOverrideEnabled: Boolean!
}

type ExperimentalTCCustomEventType {
  created: String

  icon: String

  periodInMins: Int

  customEventTypeId: String

  title: String

  parentSubCalendarId: String
}

type ExperimentalTCDecoratedSubCalendar {
  administrable: Boolean!

  childSubCalendars: [ExperimentalTCDecoratedSubCalendar!]

  editable: Boolean!

  deletable: Boolean!

  eventsEditable: Boolean!

  eventsHidden: Boolean!

  groupsPermittedToEdit: [String]

  groupsPermittedToView: [String]

  reminderMe: Boolean

  subCalendar: ExperimentalTCSubCalendar!

  subscriberCount: Int

  usersPermittedToEdit: [ExperimentalTCUser]

  usersPermittedToView: [ExperimentalTCUser]
}

type ExperimentalTCEventTypeDisableResponse {
  modifiedSubCalendarId: String

  payload: [ExperimentalTCDecoratedSubCalendar]

  success: Boolean
}

type ExperimentalTCEventTypeReminder {
  eventTypeId: String

  periodInMins: Int

  isCustomEventType: Boolean
}

type ExperimentalTCJiraCalendarDurations {
  startDateFieldName: String!

  endDateFieldName: String!
}

type ExperimentalTCSubCalendar {
  applicationId: String

  applicationName: String

  color: String

  customEventTypes: [ExperimentalTCCustomEventType]

  dateFieldNames: [String!]

  description: String

  disableEventTypes: [String]

  durations: [ExperimentalTCJiraCalendarDurations!]

  id: String

  jql: String

  name: String

  parentId: String

  sanboxEventTypeReminders: [ExperimentalTCEventTypeReminder]

  searchFilterId: Int

  sourceLocation: String

  spaceKey: String

  spaceName: String

  subscriptionId: String

  subscriptionType: String

  timeZoneId: String

  type: String
}

type ExperimentalTCUser {
  avatarUrl: String

  fullName: String

  id: String
}

type ExtendedProfile {
  title: String

  location: String

  organization: String

  department: String

  teamType: String
}

type ExternalCollaboratorDefaultSpace {
  enabled: Boolean!

  spaceId: Long!

  space: Space
}

type ExternalCollaboratorFeature {
  isEntitled: Boolean!
}

enum ExternalCollaboratorsSortField {
  NAME
}

input ExternalCollaboratorsSortType {
  field: ExternalCollaboratorsSortField

  isAscending: Boolean
}

type FaviconFile {
  fileStoreId: ID!

  filename: String!
}

input FaviconFileInput {
  fileStoreId: ID!

  filename: String!
}

input FavouritePageInput {
  pageId: ID!
}

type FavouritePagePayload {
  content: Content!
}

type FavouriteSpacePayload {
  isSpaceFavourited: Boolean
}

type FavouritedSummary {
  favouritedDate: String

  isFavourite: Boolean
}

type FeatureDiscoveryPayload {
  date: String

  featureKey: String!

  pluginKey: String!

  status: Boolean!

  userKey: String
}

type FeatureFlag {
  id: ID!

  value: String!

  valueType: FeatureFlagValueType!

  explanation: FeatureFlagExplanation
}

type FeatureFlagEdge {
  cursor: String!

  node: FeatureFlag!
}

type FeatureFlagExplanation {
  kind: String

  ruleId: String

  ruleIndex: Int
}

type FeatureFlagInfo {
  hasNextPage: Boolean!
}

enum FeatureFlagPrefix {
  FABRIC

  FRONTEND

  PLATFORM

  SSR
}

enum FeatureFlagValueType {
  ARRAY

  BOOLEAN

  NUMBER

  OBJECT

  STRING
}

interface FeedEvent {
  datetime: String!

  groupSize: Int!

  type: FeedEventType!
}

type FeedEventComment implements FeedEvent {
  accountId: String!

  commentId: ID!

  datetime: String!

  groupSize: Int!

  type: FeedEventType!

  user: Person!

  comment: Comment
}

type FeedEventCreate implements FeedEvent {
  accountId: String!

  datetime: String!

  groupSize: Int!

  type: FeedEventType!

  user: Person!
}

type FeedEventEdit implements FeedEvent {
  accountId: String!

  datetime: String!

  groupSize: Int!

  type: FeedEventType!

  version: Int!

  user: Person!
}

enum FeedEventType {
  COMMENT

  CREATE

  EDIT
}

type FeedItem {
  id: String!

  mostRelevantUpdate: Int!

  recentActionsCount: Int!

  source: [FeedItemSourceType!]!

  summaryLineUpdate: FeedEvent!

  content: Content!
}

type FeedItemEdge {
  cursor: String

  node: FeedItem!
}

enum FeedItemSourceType {
  PERSON

  SPACE
}

type FeedPageInfo {
  hasPreviousPage: Boolean!

  hasNextPage: Boolean!

  startCursor: String

  endCursor: String!
}

type FeedPageInformation {
  hasPreviousPage: Boolean!

  hasNextPage: Boolean!

  startCursor: String

  endCursor: String!
}

enum FeedType {
  DIRECT

  FOLLOWING

  POPULAR
}

type FilteredPrincipalSubjectKey {
  displayName: String

  group: Group

  id: String

  permissionDisplayType: PermissionDisplayType!

  user: User
}

input FollowUserInput {
  accountId: String!
}

type FollowUserPayload {
  currentUserFollowing: Boolean!
}

type FollowingFeedGetUserConfig {
  spaceIds: [Long]!

  accountIds: [String]!

  servingRecommendations: Boolean!

  spaces: [Space]

  users: [Person]
}

type FooterComment implements CommentLocation {
  type: String!
}

enum FooterCommentStatusV2 {
  current

  trashed

  historical

  deleted

  draft

  archived
}

type FooterCommentV2 implements Node {
  links: CommentLinksV2

  id: ID!

  status: FooterCommentStatusV2!

  title: String!

  blogPostId: ID

  pageId: ID

  parentCommentId: ID

  version: VersionV2!

  body: BodyV2!

  internalProperties: CommentInternalProperties
}

type FooterCommentV2Connection {
  edges: [FooterCommentV2Edge]

  pageInfo: PageInfoV2!

  nodes: [FooterCommentV2]
}

type FooterCommentV2Edge {
  node: FooterCommentV2!

  cursor: String
}

type FormattedBody {
  embeddedContent: [EmbeddedContent]!

  links: LinksContextBase

  macroRenderedOutput: FormattedBody

  macroRenderedRepresentation: String

  representation: String

  value: String

  webresource: WebResourceDependencies
}

type FormattedBodyV2 {
  representation: BodyFormatV2!

  value: String!
}

input FormattedBodyV2Input {
  representation: BodyFormatV2!

  value: String!
}

type FormattedPageV2 {
  representation: SpaceDescriptionEnum!

  value: String!
}

type FrontCover {
  frontCoverState: String

  showFrontCover: Boolean!
}

type FrontendExperimentsBootstrap {
  value: String!
}

type FrontendResource {
  attributes: [MapOfStringToString]!

  type: String

  url: String
}

type FrontendResourceRenderResponse {
  resourceList: [FrontendResource!]!
}

type FutureContentTypeMobileSupport {
  bodyText: [String]

  contentType: String!

  heading: String!

  imageLink: String

  isSupportedNow: Boolean!
}

type GenericMutationErrorExtension implements MutationErrorExtension {
  errorType: String

  statusCode: Int
}

type GlobalSpaceConfiguration {
  publicLinkDefaultSpaceStatus: PublicLinkDefaultSpaceStatus
}

type GlobalSpaceIdentifier {
  spaceIdentifier: String
}

input GrantContentAccessInput {
  accessType: AccessType!

  accountIdOrUsername: String!

  contentId: String!
}

type GrantContentAccessPayload {
  success: Boolean!
}

type GraphQLConfluenceUserRoles {
  canBeSuperAdmin: Boolean!

  canUseConfluence: Boolean!

  isSuperAdmin: Boolean!
}

type GraphQLContactAdminStatus {
  success: Boolean!
}

enum GraphQLContentStatus {
  ARCHIVED

  CURRENT

  DELETED

  DRAFT
}

enum GraphQLContentTemplateType {
  BLUEPRINT

  PAGE
}

enum GraphQLCoverPictureWidth {
  FIXED

  FULL
}

enum GraphQLDateFormat {
  GLOBAL

  MILLIS

  USER

  USER_FRIENDLY
}

enum GraphQLFrontCoverState {
  HIDDEN

  SHOWN

  TRANSITION

  UNSET
}

type GraphQLGlobalDescription {
  id: ID!
}

type GraphQLGroupCountsResult {
  groupCounts: [MapOfStringToInteger]!
}

type GraphQLInlineTask {
  assignedTo: GraphQLUserInfo

  body: ConfluenceContentBody

  completedBy: GraphQLUserInfo

  container: ConfluenceInlineTaskContainer

  createdAt: String

  createdBy: GraphQLUserInfo

  dueAt: String

  globalId: ID

  id: ID!

  status: ConfluenceInlineTaskStatus

  taskId: ID

  updatedAt: String
}

enum GraphQLLabelSortDirection {
  ASCENDING

  DESCENDING
}

enum GraphQLLabelSortField {
  LABELLING_CREATIONDATE

  LABELLING_ID
}

type GraphQLMutationResponse {
  success: Boolean!
}

enum GraphQLPageStatus {
  CURRENT

  DRAFT

  HISTORICAL

  TRASHED
}

enum GraphQLReactionContentType {
  PAGE

  BLOGPOST

  COMMENT
}

type GraphQLRelevantFeedFilters {
  relevantFeedSpacesFilter: [Long]!

  relevantFeedUsersFilter: [String]!
}

type GraphQLSmartLinkContent {
  contentId: ID!

  contentType: String

  embedURL: String!

  iconURL: String

  parentPageId: String!

  spaceId: String!

  title: String
}

input GraphQLSpaceShortcutsInput {
  iconUrl: String

  isPinnedPage: Boolean!

  shortcutId: ID!

  title: String

  url: String
}

enum GraphQLTemplateContentAppearance {
  DEFAULT

  FULL_WIDTH
}

type GraphQLUserAndGroupSearchResults {
  groups: [Group]!

  users: [Person]!
}

type GraphQLUserInfo {
  accountId: String!

  displayName: String

  profilePicture: Icon

  type: ConfluenceUserType!
}

type Group {
  id: String

  links: LinksContextSelfBase

  name: String

  permissionType: SitePermissionType
}

type GroupByPageInfo {
  next: String
}

type GroupEdge {
  cursor: String

  node: Group
}

type GroupWithPermissions {
  currentUserCanEdit: Boolean

  id: String

  links: LinksSelf

  name: String

  operations: [OperationCheckResult]
}

type GroupWithPermissionsEdge {
  cursor: String

  node: GroupWithPermissions
}

input GroupWithPermissionsInput {
  id: ID!

  operations: [OperationCheckResultInput]!
}

type GroupWithRestrictions {
  group: Group

  hasSpaceEditPermission: Boolean

  hasSpaceViewPermission: Boolean

  id: String

  links: LinksSelf

  name: String

  permissionType: SitePermissionType

  restrictingContent: Content
}

type GroupWithRestrictionsEdge {
  cursor: String

  node: GroupWithRestrictions
}

type HardDeleteSpacePayload {
  errors: [MutationError!]

  success: Boolean!

  taskId: String
}

type HeaderLookAndFeel {
  backgroundColor: String

  button: ButtonLookAndFeel

  primaryNavigation: NavigationLookAndFeel

  search: SearchFieldLookAndFeel

  secondaryNavigation: NavigationLookAndFeel
}

type HeaderLookAndFeelV2 {
  backgroundColor: String

  button: ButtonLookAndFeel

  primaryNavigation: NavigationLookAndFeelV2

  search: SearchFieldLookAndFeel

  secondaryNavigation: NavigationLookAndFeelV2
}

type History {
  contributors: Contributors

  createdBy: Person

  createdDate: String

  lastOwnedBy: Person

  lastUpdated: Version

  latest: Boolean

  links: LinksContextSelfBase

  nextVersion: Version

  ownedBy: Person

  previousVersion: Version
}

type HomeUserSettings {
  relevantFeedFilters: GraphQLRelevantFeedFilters!

  shouldShowActivityFeed: Boolean!

  shouldShowSpaces: Boolean!
}

input HomeUserSettingsInput {
  shouldShowActivityFeed: Boolean

  shouldShowSpaces: Boolean
}

type HomeWidget {
  id: ID!

  state: HomeWidgetState!
}

input HomeWidgetInput {
  id: ID!

  state: HomeWidgetState!
}

enum HomeWidgetState {
  COLLAPSED

  EXPANDED
}

type Homepage {
  title: String

  uri: String
}

type HtmlDocument {
  html: String

  webResourceDependencies: WebResourceDependencies
}

type HtmlMeta {
  css: String!

  html: String!

  js: [String]!

  spaUnfriendlyMacros: [SpaUnfriendlyMacro!]!
}

type HydrationContext {
  confluence: ConfluenceHydrationContext

  jiraComment: JiraCommentHydrationContext
}

type Icon {
  height: Int

  isDefault: Boolean

  path(type: PathType = RELATIVE_NO_CONTEXT): String!

  width: Int
}

type IncomingLinksCount {
  count: Int
}

type IndividualInlineTaskNotification {
  notificationAction: NotificationAction

  operation: Operation!

  recipientAccountId: ID!

  recipientMentionLocalId: ID

  taskId: ID!
}

input IndividualInlineTaskNotificationInput {
  notificationAction: NotificationAction

  operation: Operation!

  recipientAccountId: ID!

  recipientMentionLocalId: ID

  taskId: ID!
}

enum InitialPermissionOptions {
  COPY_FROM_SPACE

  DEFAULT

  PRIVATE
}

type InlineComment implements CommentLocation {
  inlineCommentRepliesCount: Int!

  inlineMarkerRef: String

  inlineResolveProperties: InlineCommentResolveProperties

  inlineText: String

  type: String!
}

type InlineCommentPropertiesV2 {
  inlineMarkerRef: String!

  inlineOriginalSelection: String!
}

enum InlineCommentResolutionStatusV2 {
  open

  reopened

  resolved

  dangling
}

type InlineCommentResolveProperties {
  resolved: Boolean!

  resolvedByDangling: Boolean!

  resolvedFriendlyDate: String

  resolvedTime: Long

  resolvedUser: String
}

enum InlineCommentStatusV2 {
  current

  trashed

  historical

  deleted

  draft

  archived
}

type InlineCommentV2 implements Node {
  _links: CommentLinksV2

  id: ID!

  status: InlineCommentStatusV2!

  title: String!

  version: VersionV2!

  body: BodyV2!

  resolutionLastModifierId: String

  resolutionLastModifiedAt: String

  resolutionStatus: InlineCommentResolutionStatusV2

  properties: InlineCommentPropertiesV2

  parentCommentId: ID

  internalProperties: CommentInternalProperties
}

type InlineCommentV2Connection {
  edges: [InlineCommentV2Edge]

  pageInfo: PageInfoV2!

  nodes: [InlineCommentV2]
}

type InlineCommentV2Edge {
  node: InlineCommentV2!

  cursor: String
}

type InlineSmartLink implements SmartLink {
  url: String!
}

input InlineTask {
  status: TaskStatus!

  taskId: ID!
}

input InlineTasksByMetadata {
  accountIds: InlineTasksQueryAccountIds

  after: String

  completedDateRange: InlineTasksQueryDateRange

  createdDateRange: InlineTasksQueryDateRange

  dueDate: InlineTasksQueryDateRange

  first: Int!

  forCurrentPageOnly: Boolean

  isNoDueDate: Boolean

  pageIds: [Long]

  sortParameters: InlineTasksQuerySortParameters

  spaceIds: [Long]

  status: TaskStatus
}

input InlineTasksInput {
  cid: ID!

  status: TaskStatus!

  taskId: ID!

  trigger: PageUpdateTrigger
}

input InlineTasksQueryAccountIds {
  assigneeAccountIds: [String]

  completedByAccountIds: [String]

  creatorAccountIds: [String]
}

input InlineTasksQueryDateRange {
  endDate: Long

  startDate: Long
}

type InlineTasksQueryResult {
  endCursor: String

  inlineTasks: [GraphQLInlineTask]
}

enum InlineTasksQuerySortColumn {
  ASSIGNEE

  DUE_DATE

  PAGE_TITLE
}

enum InlineTasksQuerySortOrder {
  ASCENDING

  DESCENDING
}

input InlineTasksQuerySortParameters {
  sortColumn: InlineTasksQuerySortColumn!

  sortOrder: InlineTasksQuerySortOrder!
}

enum InspectPermissions {
  COMMENT

  EDIT

  VIEW
}

type InstanceAnalyticsCount {
  user: Int!
}

type InternalProperties {
  confRev: String

  subType: String
}

type InvitationUrl {
  id: String!

  expiration: String!

  rules: [InvitationUrlRule!]!

  status: InvitationUrlsStatus!

  url: String!
}

type InvitationUrlRule {
  resource: ID!

  role: ID!
}

type InvitationUrlsPayload {
  urls: [InvitationUrl]!
}

enum InvitationUrlsStatus {
  ACTIVE

  EXPIRED

  DELETED
}

"""
scalar type represents JSON
"""
scalar JSON

type JiraCommentHydrationContext {
  id: ID!

  issueId: ID!
}

type JiraProject {
  icons: [Icon]

  id: ID!

  key: String!

  name: String!
}

type JiraProjectsResult {
  nodes: [JiraProject!]!
}

type JiraServer {
  authUrl: String

  id: ID!

  isCurrentUserAuthenticated: Boolean!

  name: String!

  url: String!
}

type JiraServersResult {
  nodes: [JiraServer!]!
}

type JsonContentProperty {
  content: Content

  id: String

  key: String

  links: LinksContextSelfBase

  value: String

  version: Version
}

type JsonContentPropertyEdge {
  cursor: String

  node: JsonContentProperty
}

type KeyValueHierarchyMap {
  fields: [KeyValueHierarchyMap]

  key: String

  value: String
}

type KnowledgeGraphObjectResponse {
  contentId: ID!

  contentType: ConfluenceContentType!

  objectData: String!

  createdAt: String!
}

enum KnowledgeGraphObjectType {
  snippet_v1
}

type KnownUser implements Person {
  accountId: String

  accountType: String

  displayName: String

  email: String

  links: LinksContextSelfBase

  operations: [OperationCheckResult]

  permissionType: SitePermissionType

  personalSpace: Space

  profilePicture: Icon

  publicName: String

  timeZone: String

  type: String

  userKey: String

  username: String
}

type Label {
  id: ID

  label: String

  name: String

  prefix: String
}

type LabelEdge {
  cursor: String

  node: Label
}

input LabelInput {
  name: String!

  prefix: String!
}

enum LabelNamespaceEnum {
  GLOBAL

  MY

  TEAM
}

type LabelSearchResults {
  otherLabels: [Label]!

  suggestedLabels: [Label]!
}

input LabelSort {
  direction: GraphQLLabelSortDirection!

  sortField: GraphQLLabelSortField!
}

type LastModifiedSummary {
  friendlyLastModified: String

  version: Version
}

type LayerScreenLookAndFeel {
  background: String

  backgroundAttachment: String

  backgroundBlendMode: String

  backgroundClip: String

  backgroundColor: String

  backgroundImage: String

  backgroundOrigin: String

  backgroundPosition: String

  backgroundRepeat: String

  backgroundSize: String

  height: String

  width: String
}

type License {
  billingPeriod: String

  billingSourceSystem: BillingSourceSystem

  licenseConsumingUserCount: Int!

  licenseStatus: LicenseStatus!

  trialEndDate: String

  userLimit: Long
}

type LicenseState {
  billingPeriod: String

  billingSourceSystem: BillingSourceSystem!

  ccpEntitlementId: String

  isUgcUalEnabled: Boolean!

  licenseStatus: LicenseStatus!

  productKey: String!

  trialEndDate: String

  trialEndTime: Long

  unitCount: Long
}

type LicenseStates {
  confluence: LicenseState
}

enum LicenseStatus {
  ACTIVE

  SUSPENDED

  UNLICENSED
}

type LicensedProduct {
  licenseStatus: LicenseStatus!

  productKey: String!
}

input LikeContentInput {
  contentId: ID!
}

type LikeContentPayload {
  content: Content!
}

type LikeEntity {
  creationDate: String

  currentUserIsFollowing: Boolean

  user: User
}

type LikeEntityEdge {
  cursor: String

  node: LikeEntity
}

type LikesModelMetadataDto {
  count: Int!

  currentUser: Boolean!

  links: LinksContextBase

  summary: String

  users: [Person]!
}

type LikesResponse {
  count: Int

  currentUserLikes: Boolean

  edges: [LikeEntityEdge]

  followees(limit: Int = 3): [User]!

  nodes: [LikeEntity]

  pageInfo: PageInfo
}

type LinksContextBase {
  base: String

  context: String
}

type LinksContextSelfBase {
  base: String

  context: String

  self: String
}

type LinksDownloadEdituiWebuiContextSelfTinyuiCollectionBase {
  base: String

  collection: String

  context: String

  download: String

  editui: String

  self: String

  tinyui: String

  webui: String
}

type LinksSelf {
  self: String
}

type LocalStorage {
  booleanValues(keys: [String]!): [LocalStorageBooleanPair]!

  stringValues(keys: [String]!): [LocalStorageStringPair]!
}

type LocalStorageBooleanPair {
  key: String!

  value: Boolean
}

input LocalStorageBooleanPairInput {
  key: String!

  value: Boolean
}

input LocalStorageInput {
  booleanValues: [LocalStorageBooleanPairInput]

  stringValues: [LocalStorageStringPairInput]
}

type LocalStorageStringPair {
  key: String!

  value: String
}

input LocalStorageStringPairInput {
  key: String!

  value: String
}

"""
Long type
"""
scalar Long

type LookAndFeel {
  bordersAndDividers: BordersAndDividersLookAndFeel

  content: ContentLookAndFeel

  header: HeaderLookAndFeel

  headings: [MapOfStringToString]!

  horizontalHeader: HeaderLookAndFeel

  links: LinksContextBase

  menus: MenusLookAndFeel
}

type LookAndFeelSettings {
  custom: LookAndFeel

  global: LookAndFeel

  selected: String

  theme: LookAndFeel
}

type LookAndFeelV2 {
  bordersAndDividers: BordersAndDividersLookAndFeel

  content: ContentLookAndFeel

  header: HeaderLookAndFeelV2

  horizontalHeader: HeaderLookAndFeelV2

  menus: MenusLookAndFeelV2
}

type LoomToken {
  token: String!
}

enum LoomUserStatus {
  LINKED

  LINKED_ENTERPRISE

  MASTERED

  NOT_FOUND
}

type Macro {
  adf: String!

  contentId: ID!

  macroId: ID!

  renderedMacro: RenderedMacro
}

type MacroBody {
  mediaToken: EmbeddedMediaToken

  representation: String

  value: String

  webResourceDependencies: WebResourceDependencies
}

type MacroConnection {
  edges: [MacroEdge]

  pageInfo: PageInfoV2!

  nodes: [Macro]
}

type MacroEdge {
  cursor: String

  node: Macro!
}

type MapOfStringToFormattedBody {
  key: String

  value: FormattedBody
}

type MapOfStringToInteger {
  key: String

  value: Int
}

type MapOfStringToString {
  key: String

  value: String
}

type Map_LinkType_String {
  download: String

  editui: String

  tinyui: String

  webui: String
}

input Mark {
  attrs: MarkAttribute

  type: String!
}

input MarkAttribute {
  annotationType: String!

  id: String!
}

input MarkCommentsAsReadInput {
  commentIds: [ID!]!
}

type MarkCommentsAsReadPayload {
  errors: [String]!

  success: Boolean!
}

type MediaAccessTokens {
  readOnlyToken: MediaToken

  readWriteToken: MediaToken
}

type MediaAttachment {
  id: ID!

  html: String!
}

type MediaAttachmentError {
  error: Error!
}

input MediaAttachmentInput {
  file: MediaFile!

  minorEdit: Boolean
}

union MediaAttachmentOrError = MediaAttachment|MediaAttachmentError

type MediaConfiguration {
  clientId: String!

  fileStoreUrl: String!

  maxFileSize: Long
}

input MediaFile {
  id: ID!

  name: String!

  size: Int!

  mimeType: String
}

type MediaPickerUserToken {
  id: String

  token: String
}

type MediaToken {
  duration: Int!

  expiryDateTime: Long!

  value: String!
}

input MentionData {
  mentionedUserAccountId: ID!

  mentionLocalIds: [String]
}

type MenuHoverOrFocus {
  backgroundColor: String
}

type MenusLookAndFeel {
  color: String

  hoverOrFocus: [MapOfStringToString]
}

type MenusLookAndFeelV2 {
  color: String

  hoverOrFocus: MenuHoverOrFocus
}

type MetaTags {
  metaTags: [String!]!
}

type MigrateSpaceShortcutsPayload {
  errors: [MutationError!]

  parentPageId: String

  smartLinksContentList: [GraphQLSmartLinkContent]!

  success: Boolean!
}

input MissionControlOverview {
  metricOrder: [String]!

  spaceId: Long
}

enum MobilePlatform {
  ANDROID

  IOS
}

input ModelRequestParams {
  experience: String!

  caller: String!
}

type ModuleCompleteKey {
  moduleKey: String

  pluginKey: String
}

input MoveBlogInput {
  blogPostId: Long!

  targetSpaceId: Long!
}

type MoveBlogPayload {
  content: Content
}

input MovePageAsChildInput {
  pageId: ID!

  parentId: ID!
}

input MovePageAsSiblingInput {
  pageId: ID!

  siblingId: ID!
}

type MovePagePayload {
  movedPage: ID!

  page: Page

  content: Content
}

input MovePageTopLevelInput {
  pageId: ID!

  targetSpaceKey: String!
}

type Mutation {
  setFeedUserConfig(input: SetFeedUserConfigInput!): SetFeedUserConfigPayload!

  setRecommendedPagesStatus(input: SetRecommendedPagesStatusInput!): SetRecommendedPagesStatusPayload!

  setRecommendedPagesSpaceStatus(input: SetRecommendedPagesSpaceStatusInput!): SetRecommendedPagesSpaceStatusPayload!

  patchCommentsSummary(input: PatchCommentsSummaryInput!): PatchCommentsSummaryPayload!

  createInvitationUrl: CreateInvitationUrlPayload!

  activatePaywallContent(input: ActivatePaywallContentInput!): ActivatePaywallContentPayload!

  addDefaultExCoSpacePermissions(spacePermissionsInput: AddDefaultExCoSpacePermissionsInput!): AddDefaultExCoSpacePermissionsPayload!

  addPublicLinkPermissions(input: AddPublicLinkPermissionsInput!): AddPublicLinkPermissionsPayload!

  archivePages(input: [BulkArchivePagesInput]!): BulkArchivePagePayload

  archiveSpace(input: ArchiveSpaceInput!): ArchiveSpacePayload

  attachDanglingComment(input: ReattachInlineCommentInput!): Comment!

  bulkArchivePages(archiveNote: String, includeChildren: [Boolean], pageIDs: [Long]): BulkArchivePagePayload @deprecated(reason: "Use archivePages mutation instead")

  bulkDeleteContentDataClassificationLevel(input: BulkDeleteContentDataClassificationLevelInput!): BulkDeleteContentDataClassificationLevelPayload!

  bulkSetSpacePermission(input: BulkSetSpacePermissionInput!): BulkSetSpacePermissionPayload

  bulkSetSpacePermissionAsync(input: BulkSetSpacePermissionInput!): BulkSetSpacePermissionAsyncPayload

  bulkUnarchivePages(includeChildren: [Boolean], pageIDs: [Long], parentPageId: Long): BulkArchivePagePayload

  bulkUpdateContentDataClassificationLevel(input: BulkUpdateContentDataClassificationLevelInput!): BulkUpdateContentDataClassificationLevelPayload!

  bulkUpdateMainSpaceSidebarLinks(input: [BulkUpdateMainSpaceSidebarLinksInput]!, spaceKey: String!): [SpaceSidebarLink]!

  clearRestrictionsForFree(contentId: ID!): ContentRestrictionsPageResponse!

  confluence: ConfluenceMutationApi

  contactAdmin(input: ContactAdminMutationInput!): GraphQLContactAdminStatus!

  convertPageToLiveEditAction(input: ConvertPageToLiveEditActionInput!): ConvertPageToLiveEditActionPayload

  convertToFolder(id: ID!): ConfluenceConvertContentToFolderPayload

  copyDefaultSpacePermissions(spaceKey: String!): CopySpacePermissionsPayload!

  copySpacePermissions(shouldIncludeExCo: Boolean = false, sourceSpaceKey: String!, targetSpaceKey: String!): CopySpacePermissionsPayload!

  createAdminAnnouncementBanner(announcementBanner: ConfluenceCreateAdminAnnouncementBannerInput!): ConfluenceAdminAnnouncementBannerPayload

  createContentTemplateLabels(input: CreateContentTemplateLabelsInput!): PaginatedLabelList!

  createContentContextual(input: CreateContentInput!): Content!

  createContentGlobal(input: CreateContentInput!): Content!

  createContentInline(input: CreateInlineContentInput!): Content!

  createContentMentionNotificationAction(input: CreateContentMentionNotificationActionInput!): CreateContentMentionNotificationActionPayload!

  createFaviconFiles(input: CreateFaviconFilesInput!): CreateFaviconFilesPayload!

  createFooterComment(input: CreateCommentInput!): Comment!

  createInlineComment(input: CreateInlineCommentInput!): Comment!

  createInlineTaskNotification(input: CreateInlineTaskNotificationInput!): CreateInlineTaskNotificationPayload!

  createLivePage(input: CreateLivePageInput!): Content

  createMentionNotification(input: CreateMentionNotificationInput!): CreateMentionNotificationPayload!

  createMentionReminderNotification(input: CreateMentionReminderNotificationInput!): CreateMentionReminderNotificationPayload!

  createOnboardingSpace(spaceType: String!): String!

  createOrUpdateArchivePageNote(archiveNote: String!, pageId: Long!): String @deprecated(reason: "Use updateArchiveNotes mutation instead")

  createPersonalSpace(input: CreatePersonalSpaceInput!): Space!

  createSpace(input: CreateSpaceInput!): Space!

  createSpaceContentState(contentState: ContentStateInput!): ContentState!

  createSystemSpace(input: SystemSpaceHomepageInput!): Space!

  createTemplate(contentTemplate: CreateContentTemplateInput!): ContentTemplate!

  deactivatePaywallContent(input: DeactivatePaywallContentInput!): DeactivatePaywallContentPayload!

  deleteComment(commentIdToDelete: ID!, deleteFrom: CommentDeletionLocation): Boolean!

  deleteContent(action: ContentDeleteActionType!, contentId: ID!): DeleteContentResponsePayload!

  deleteContentDataClassificationLevel(input: DeleteContentDataClassificationLevelInput!): DeleteContentDataClassificationLevelPayload!

  deleteContentState(stateInput: ContentStateInput!): ContentState!

  deleteContentTemplateLabel(input: DeleteContentTemplateLabelInput!): DeleteContentTemplateLabelPayload!

  deleteDefaultSpaceRoleAssignments(input: DeleteDefaultSpaceRoleAssignmentsInput!): DeleteDefaultSpaceRoleAssignmentsPayload

  deleteExCoSpacePermissions(input: [DeleteExCoSpacePermissionsInput]!): [DeleteExCoSpacePermissionsPayload]!

  deleteExternalCollaboratorDefaultSpace: DeleteExternalCollaboratorDefaultSpacePayload!

  deleteInlineComment(input: DeleteInlineCommentInput!): Boolean!

  deletePages(input: [DeletePagesInput]!): DeletePagesPayload

  deleteSpaceDefaultClassificationLevel(input: DeleteSpaceDefaultClassificationLevelInput!): DeleteSpaceDefaultClassificationLevelPayload

  deleteSpaceRoleAssignments(input: DeleteSpaceRoleAssignmentsInput!): DeleteSpaceRoleAssignmentsPayload

  deleteTemplate(contentTemplateId: ID!): ID!

  disableExperiment(experimentKey: String!): TapExperiment!

  disablePublicLinkForPage(pageId: ID!): DisablePublicLinkForPagePayload

  disablePublicLinkForSite: PublicLinkSitePayload!

  disableSuperAdmin: SuperAdminPayload

  editorDraftSyncAction(input: EditorDraftSyncInput!): EditorDraftSyncPayload

  enableExperiment(experimentKey: String!): TapExperiment!

  enablePublicLinkForPage(pageId: ID!): EnablePublicLinkForPagePayload

  enablePublicLinkForSite: PublicLinkSitePayload!

  enableSuperAdmin: SuperAdminPayload

  favouritePage(favouritePageInput: FavouritePageInput!): FavouritePagePayload

  favouriteSpace(spaceKey: String!): FavouriteSpacePayload

  followUser(followUserInput: FollowUserInput!): FollowUserPayload

  generateAdminReport: ConfluenceAdminReportPayload

  generatePermsReport(id: ID!, targetType: PermsReportTargetType!): ConfluenceAdminReportPayload

  grantContentAccess(grantContentAccessInput: GrantContentAccessInput!): GrantContentAccessPayload!

  hardDeleteSpace(spaceKey: String!): HardDeleteSpacePayload!

  likeContent(input: LikeContentInput!): LikeContentPayload!

  markCommentsAsRead(input: MarkCommentsAsReadInput!): MarkCommentsAsReadPayload!

  markFeatureDiscovered(featureKey: String!, pluginKey: String!): FeatureDiscoveryPayload

  migrateSpaceShortcuts(shortcutsList: [GraphQLSpaceShortcutsInput]!, spaceId: ID!): MigrateSpaceShortcutsPayload

  moveBlog(input: MoveBlogInput!): MoveBlogPayload

  openUpSpacePermissions(spaceKey: String!): Boolean!

  publicLinkPagesAdminAction(pageIds: [ID!]!, action: PublicLinkAdminAction!): PublicLinkPagesAdminActionPayload

  publicLinkSpacesAction(spaceIds: [ID!]!, action: PublicLinkAdminAction!): PublicLinkSpacesActionPayload

  recoverSpaceAdminPermission(input: RecoverSpaceAdminPermissionInput!): RecoverSpaceAdminPermissionPayload

  recoverSpaceWithAdminRoleAssignment(input: RecoverSpaceWithAdminRoleAssignmentInput!): RecoverSpaceWithAdminRoleAssignmentPayload!

  refreshTeamCalendar(subCalendarId: String!): Boolean

  removeAllDirectUserSpacePermissions(accountId: String!): RemoveSpacePermissionsPayload!

  removeContentState(contentId: ID!): Boolean!

  removeGroupSpacePermissions(spacePermissionsInput: RemoveGroupSpacePermissionsInput!): RemoveSpacePermissionsPayload!

  removePublicLinkPermissions(input: RemovePublicLinkPermissionsInput!): RemovePublicLinkPermissionsPayload!

  removeUserSpacePermissions(spacePermissionsInput: RemoveUserSpacePermissionsInput!): RemoveSpacePermissionsPayload!

  replyInlineComment(input: ReplyInlineCommentInput!): Comment!

  requestAccessExco: Boolean!

  requestPageAccess(requestPageAccessInput: RequestPageAccessInput!): RequestPageAccessPayload!

  resetExCoSpacePermissions(input: ResetExCoSpacePermissionsInput!): ResetExCoSpacePermissionsPayload!

  resetSpaceContentStates(spaceKey: String!): ContentStateSettings!

  resetSpaceRolesFromAnotherSpace(input: ResetSpaceRolesFromAnotherSpaceInput!): ResetSpaceRolesFromAnotherSpacePayload

  resetSystemSpaceHomepage(input: SystemSpaceHomepageInput!): Space!

  resetToDefaultSpaceRoleAssignments(input: ResetToDefaultSpaceRoleAssignmentsInput!): ResetToDefaultSpaceRoleAssignmentsPayload!

  resolveInlineComment(commentId: ID!, dangling: Boolean!, resolved: Boolean!): ResolveInlineCommentPayload

  resolveRestrictions(input: [ResolveRestrictionsInput]!): ResolveRestrictionsPayload!

  restoreSpace(spaceKey: String!): RestoreSpacePayload!

  revertToLegacyEditor(contentId: ID!): RevertToLegacyEditorResult!

  setBatchedTaskStatus(batchedInlineTasksInput: BatchedInlineTasksInput!): GraphQLMutationResponse

  setContentAccess(accessType: ContentAccessInputType!, contentId: ID!): ContentPermissionsPayload!

  setContentState(contentId: ID!, contentState: ContentStateInput!): ContentState

  setContentStateAndPublish(contentId: ID!, contentState: ContentStateInput!): ContentState

  setContentStateSettings(contentStatesSetting: Boolean!, customStatesSetting: Boolean!, spaceKey: String!, spaceStatesSetting: Boolean!): ContentStateSettings!

  setDefaultSpaceRoleAssignments(input: SetDefaultSpaceRoleAssignmentsInput!): SetDefaultSpaceRoleAssignmentsPayload!

  setEditorConversionSettings(spaceKey: String!, value: EditorConversionSetting!): EditorConversionSetting!

  setOnboardingState(states: [OnboardingStateInput!]): [OnboardingState!]!

  setOnboardingStateToComplete(key: [String]): [OnboardingState!]!

  setPublicLinkDefaultSpaceStatus(status: PublicLinkDefaultSpaceStatus!): GlobalSpaceConfiguration!

  setRelevantFeedFilters(relevantFeedSpacesFilter: [Long]!, relevantFeedUsersFilter: [String]!): HomeUserSettings

  setShowActivityFeed(showActivityFeed: Boolean!): HomeUserSettings @deprecated(reason: "Use updateHomeUserSettings")

  setSpaceRoleAssignments(input: SetSpaceRoleAssignmentsInput!): SetSpaceRoleAssignmentsPayload

  setTaskStatus(inlineTasksInput: InlineTasksInput!): GraphQLMutationResponse

  shareResource(shareResourceInput: ShareResourceInput!): ShareResourcePayload

  softDeleteSpace(spaceKey: String!): SoftDeleteSpacePayload!

  templateMigration(spaceKey: String!): TemplateMigration

  templatize(input: TemplatizeInput!): ID!

  unarchiveSpace(input: UnarchiveSpaceInput!): UnarchiveSpacePayload

  unfavouritePage(favouritePageInput: FavouritePageInput!): FavouritePagePayload

  unfavouriteSpace(spaceKey: String!): FavouriteSpacePayload

  unfollowUser(followUserInput: FollowUserInput!): FollowUserPayload

  unlikeContent(input: LikeContentInput!): LikeContentPayload!

  unwatchBlogs(watchSpaceInput: WatchSpaceInput!): WatchSpacePayload

  unwatchContent(watchContentInput: WatchContentInput!): WatchContentPayload

  unwatchSpace(watchSpaceInput: WatchSpaceInput!): WatchSpacePayload

  updateAdminAnnouncementBanner(announcementBanner: ConfluenceUpdateAdminAnnouncementBannerInput!): ConfluenceAdminAnnouncementBannerPayload

  updateArchiveNotes(input: [UpdateArchiveNotesInput]!): UpdateArchiveNotesPayload

  updateComment(input: UpdateCommentInput!): Comment!

  updateContentDataClassificationLevel(input: UpdateContentDataClassificationLevelInput!): UpdateContentDataClassificationLevelPayload!

  updateContentPermissions(contentId: ID!, input: [UpdateContentPermissionsInput]!): ContentPermissionsPayload!

  updateCoverPictureWidth(input: UpdateCoverPictureWidthInput!): UpdateCoverPictureWidthPayload!

  updateEmbed(input: UpdateEmbedInput!): Content!

  updateExCoSpacePermissions(input: [UpdateExCoSpacePermissionsInput]!): [UpdateExCoSpacePermissionsPayload]!

  updateExternalCollaboratorDefaultSpace(input: UpdateExternalCollaboratorDefaultSpaceInput!): UpdateExternalCollaboratorDefaultSpacePayload!

  updateHomeUserSettings(homeUserSettings: HomeUserSettingsInput!): HomeUserSettings

  updateLocalStorage(localStorage: LocalStorageInput!): LocalStorage!

  updateNestedPageOwners(input: UpdatedNestedPageOwnersInput!): UpdateNestedPageOwnersPayload

  updateOwner(input: UpdateOwnerInput!): UpdateOwnerPayload!

  updatePageOwners(input: UpdatePageOwnersInput!): UpdatePageOwnersPayload

  updatePageStatuses(input: UpdatePageStatusesInput!): UpdatePageStatusesPayload

  updatePushNotificationCustomSettings(customSettings: PushNotificationCustomSettingsInput!): ConfluencePushNotificationSettings!

  updatePushNotificationGroupSetting(group: PushNotificationGroupInputType!): ConfluencePushNotificationSettings!

  updateSiteLookAndFeel(input: UpdateSiteLookAndFeelInput!): UpdateSiteLookAndFeelPayload!

  updateSitePermission(input: SitePermissionInput!): SitePermission!

  updateSpaceDefaultClassificationLevel(input: UpdateSpaceDefaultClassificationLevelInput!): UpdateSpaceDefaultClassificationLevelPayload!

  updateSpacePermissionDefaults(input: [UpdateDefaultSpacePermissionsInput!]!): UpdateDefaultSpacePermissionsPayload

  updateSpacePermissionDefaultsV2(input: UpdateDefaultSpacePermissionsInputV2!): UpdateDefaultSpacePermissionsPayloadV2

  updateSpacePermissions(input: UpdateSpacePermissionsInput!): UpdateSpacePermissionsPayload

  updateSpacePermissionsV2(input: UpdateSpacePermissionsInputV2!): UpdateSpacePermissionsPayloadV2

  updateSpaceTypeSettings(input: UpdateSpaceTypeSettingsInput!): UpdateSpaceTypeSettingsPayload!

  updateTemplate(contentTemplate: UpdateContentTemplateInput!): ContentTemplate!

  updateTemplatePropertySet(input: UpdateTemplatePropertySetInput!): UpdateTemplatePropertySetPayload

  updateTitle(contentId: ID!, title: String): Content!

  updateUserPreferences(userPreferences: UserPreferencesInput!): UserPreferences!

  watchBlogs(watchSpaceInput: WatchSpaceInput!): WatchSpacePayload

  watchContent(watchContentInput: WatchContentInput!): WatchContentPayload

  watchSpace(watchSpaceInput: WatchSpaceInput!): WatchSpacePayload

  newPage(input: NewPageInput!): NewPagePayload

  updatePage(input: UpdatePageInput!): UpdatePagePayload

  movePageBefore(input: MovePageAsSiblingInput!): MovePagePayload

  movePageAfter(input: MovePageAsSiblingInput!): MovePagePayload

  movePageAppend(input: MovePageAsChildInput!): MovePagePayload

  movePageTopLevel(input: MovePageTopLevelInput!): MovePagePayload

  updateRelation(input: UpdateRelationInput!): UpdateRelationPayload

  deleteRelation(input: DeleteRelationInput!): DeleteRelationPayload

  addLabels(input: AddLabelsInput!): AddLabelsPayload

  deleteLabel(input: DeleteLabelInput!): DeleteLabelPayload

  createPageV2(input: CreatePageV2Input!): CreatePageV2Payload!

  deletePageV2(id: ID!): Boolean

  updatePageV2(input: UpdatePageV2Input!): UpdatePageV2Payload!

  addReaction(contentId: String!, containerId: String!, containerType: ContainerType!, contentType: GraphQLReactionContentType!, emojiId: String!): SaveReactionResponse!

  deleteReaction(contentId: String!, containerId: String!, containerType: ContainerType!, contentType: GraphQLReactionContentType!, emojiId: String!): SaveReactionResponse!

  runImport(input: RunImportInput!): RunImportPayload!

  experimentalCancelScheduledPublish(contentId: ID!): Boolean

  experimentalTeamCalendar_EventType_Disable(subCalendarId: String!, disableEventTypes: [String!]): ExperimentalTCEventTypeDisableResponse

  createNote(input: CreateNoteInput!): CreateNotePayload

  updateNote(input: UpdateNoteInput!): UpdateNotePayload

  deleteNote(input: DeleteNoteInput!): DeleteNotePayload

  convertNoteToContent(input: ConvertNoteInput!): ConvertNotePayload
}

type MutationError {
  extensions: [MutationErrorExtension]

  message: String
}

interface MutationErrorExtension {
  errorType: String

  statusCode: Int
}

type MyActivities {
  all(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection

  workedOn(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection

  viewed(filters: [ActivitiesFilter!], first: Int, after: String): ActivitiesConnection

  nodes(ids: [ID!]): [ActivitiesObject]
}

type MyActivity {
  all(filter: MyActivityFilter, first: Int, after: String): ActivityConnection!

  workedOn(filter: MyActivityFilter, first: Int, after: String): ActivityConnection!

  viewed(filter: MyActivityFilter, first: Int, after: String): ActivityConnection!
}

input MyActivityFilter {
  rootContainerIds: [ID!]

  type: ActivitiesFilterType

  arguments: ActivityFilterArgs
}

type MyVisitedPages {
  nodes: MyVisitedPagesItems!

  pageInfo: MyVisitedPagesInfo!
}

type MyVisitedPagesInfo {
  endCursor: String

  hasNextPage: Boolean!
}

type MyVisitedPagesItems {
  pages: [ID!]!

  content: [Content]
}

type MyVisitedSpaces {
  nodes: MyVisitedSpacesItems!

  pageInfo: MyVisitedSpacesInfo!
}

type MyVisitedSpacesInfo {
  endCursor: String

  hasNextPage: Boolean!
}

type MyVisitedSpacesItems {
  spaceIds: [ID!]!

  spaces: [Space]
}

type NavigationHoverOrFocus {
  backgroundColor: String

  color: String
}

type NavigationLookAndFeel {
  color: String

  highlightColor: String

  hoverOrFocus: [MapOfStringToString]
}

type NavigationLookAndFeelV2 {
  color: String

  highlightColor: String

  hoverOrFocus: NavigationHoverOrFocus
}

type NestedActionsFeature {
  isEntitled: Boolean!
}

input NestedPageInput {
  areChildrenIncluded: Boolean

  excludedBranchRootPageIDs: [Long]

  isSelected: Boolean

  pageID: Long!
}

input NewPageInput {
  space: SpaceInput!

  page: PageInput!
}

type NewPagePayload {
  pageId: ID!

  contentId: ID!

  restrictions: PageRestrictions

  page: Page

  content: Content!
}

interface Node {
  id: ID!
}

type NoteConnection {
  edges: [NoteEdge]

  nodes: [NoteResponse]

  noteInfo: NoteInfo!
}

type NoteEdge {
  cursor: String!

  node: NoteResponse!
}

type NoteInfo {
  hasNextNode: Boolean!

  hasPreviousNode: Boolean!

  startCursor: String

  endCursor: String
}

type NoteMutationError {
  extensions: [NoteMutationErrorExtension]

  message: String
}

type NoteMutationErrorExtension {
  errorType: String

  statusCode: Int
}

enum NoteOrder {
  RELATED_LAST_MODIFIED
}

type NoteResponse {
  ari: String!

  title: String

  body: String

  bodyExcerpt: String

  collectionName: String!

  createdAt: DateTime

  isPinned: Boolean!

  productLink: String

  thumbnailId: String

  labels: [String!]

  updatedAt: DateTime

  extraProps: [Prop!]
}

input NotesByCreatorInput {
  first: Int = 20

  after: String

  last: Int = 20

  before: String

  orderBy: NotesByDateLastModifiedOrder = DATE_LAST_MODIFIED

  isAscending: Boolean = false
}

enum NotesByDateLastModifiedOrder {
  DATE_LAST_MODIFIED
}

input NotesByProductLinkInput {
  isAscending: Boolean = true

  limit: Int = 50

  orderBy: NoteOrder = RELATED_LAST_MODIFIED

  productLink: String!

  relatedNextCursor: String

  remainingNextCursor: String
}

enum NotificationAction {
  DONT_NOTIFY

  NOTIFY
}

"""
High level representation of a Number could be a float or an integer
"""
scalar Number

type OnboardingState {
  key: String!

  value: String
}

input OnboardingStateInput {
  key: String!

  value: String!
}

enum Operation {
  ASSIGNED

  COMPLETE

  DELETED

  IN_COMPLETE

  REWORDED

  UNASSIGNED
}

type OperationCheckResult {
  links: LinksContextBase

  operation: String

  targetType: String
}

input OperationCheckResultInput {
  operation: String!

  targetType: String!
}

type OperationV2 {
  operation: String!

  targetType: String!
}

type OperationsV2 {
  results: [OperationV2]
}

type Organization {
  orgId: String
}

type OrganizationContext {
  hasPaidProduct: Boolean
}

type OutgoingLinks {
  internalOutgoingLinks(after: String, first: Int = 50): PaginatedContentList
}

enum OutputDeviceType {
  DESKTOP

  EMAIL

  MOBILE
}

enum PTGraphQLPageStatus {
  CURRENT

  DRAFT

  HISTORICAL

  TRASHED
}

type PTPage {
  ancestors: [PTPage]

  children(after: String, first: Int = 25, offset: Int): PTPaginatedPageList

  followingSiblings(after: String, first: Int = 25, offset: Int): PTPaginatedPageList

  hasChildren: Boolean!

  hasInheritedRestrictions: Boolean!

  hasRestrictions: Boolean!

  id: ID!

  nearestAncestors(after: String, first: Int = 5, offset: Int): PTPaginatedPageList

  previousSiblings(after: String, first: Int = 25, offset: Int): PTPaginatedPageList

  mediaSession: PageMediaSession

  page: Page

  blank: Boolean @deprecated(reason: "Extension field")

  createdDate(format: GraphQLDateFormat): Date @deprecated(reason: "Extension field")

  emojiTitleDraft: String @deprecated(reason: "Extension field")

  emojiTitlePublished: String @deprecated(reason: "Extension field")

  lastUpdatedDate(format: GraphQLDateFormat): Date @deprecated(reason: "Extension field")

  links: Map_LinkType_String @deprecated(reason: "Extension field")

  properties(key: String, keys: [String], limit: Int = 10, start: Int): PaginatedJsonContentPropertyList @deprecated(reason: "Extension field")

  status: GraphQLPageStatus @deprecated(reason: "Extension field")

  subType: String @deprecated(reason: "Extension field")

  title: String @deprecated(reason: "Extension field")

  type: String @deprecated(reason: "Extension field")
}

type PTPageEdge {
  cursor: String!

  node: PTPage!
}

type PTPageInfo {
  endCursor: String

  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String
}

type PTPaginatedPageList {
  count: Int

  edges: [PTPageEdge]

  nodes: [PTPage]

  pageInfo: PTPageInfo
}

type Page {
  ancestors: [Page]!

  blank: Boolean

  children(after: String, first: Int = 25, offset: Int): PaginatedPageList

  createdDate(format: GraphQLDateFormat): Date

  emojiTitleDraft: String

  emojiTitlePublished: String

  followingSiblings(after: String, first: Int = 25, offset: Int): PaginatedPageList

  hasChildren: Boolean

  hasInheritedRestrictions: Boolean!

  hasRestrictions: Boolean!

  id: ID

  lastUpdatedDate(format: GraphQLDateFormat): Date

  links: Map_LinkType_String

  nearestAncestors(after: String, first: Int = 5, offset: Int): PaginatedPageList

  previousSiblings(after: String, first: Int = 25, offset: Int): PaginatedPageList

  properties(key: String, keys: [String], limit: Int = 10, start: Int): PaginatedJsonContentPropertyList

  status: GraphQLPageStatus

  subType: String

  title: String

  type: String

  mediaSession: PageMediaSession
}

enum PageActivityAction {
  created

  updated
}

enum PageActivityActionSubject {
  page

  comment
}

interface PageActivityEvent {
  action: PageActivityAction!

  actionSubject: PageActivityActionSubject!

  timestamp: String!
}

type PageActivityEventCreatedComment implements PageActivityEvent {
  accountId: String!

  action: PageActivityAction!

  actionSubject: PageActivityActionSubject!

  commentId: String!

  commentType: AnalyticsCommentType!

  groupSize: Int!

  timestamp: String!

  user: AtlassianUser!

  comment: Comment!
}

type PageActivityEventCreatedPage implements PageActivityEvent {
  accountId: String!

  action: PageActivityAction!

  actionSubject: PageActivityActionSubject!

  groupSize: Int!

  pageVersion: Int!

  timestamp: String!

  user: AtlassianUser!
}

type PageActivityEventUpdatedPage implements PageActivityEvent {
  accountId: String!

  action: PageActivityAction!

  actionSubject: PageActivityActionSubject!

  groupSize: Int!

  pageVersion: Int!

  timestamp: String!

  user: AtlassianUser!
}

type PageActivityPageInfo {
  endCursor: String!

  hasNextPage: Boolean!
}

type PageAnalyticsCount {
  count: Int!
}

enum PageAnalyticsCountType {
  ALL

  USER
}

type PageAnalyticsTimeseriesCount {
  nodes: [PageAnalyticsTimeseriesCountItem!]!
}

type PageAnalyticsTimeseriesCountItem {
  date: String!

  count: Int!
}

enum PageAnalyticsTimeseriesCountType {
  ALL
}

input PageBodyInput {
  representation: BodyFormatType = ATLAS_DOC_FORMAT

  value: String!
}

enum PageCardInPageTreeHoverPreference {
  NO_OPTION_SELECTED

  NO_SHOW_PAGECARD

  SHOW_PAGECARD
}

enum PageCopyRestrictionValidationStatus {
  INVALID_MULTIPLE

  INVALID_SINGLE

  VALID
}

enum PageCreateStatusV2 {
  current

  draft
}

type PageEdge {
  cursor: String

  node: Page
}

enum PageFormatV2 {
  view

  plain
}

type PageGroupRestriction {
  name: String!
}

input PageGroupRestrictionInput {
  id: ID

  name: String!
}

type PageInfo {
  endCursor: String

  hasNextPage: Boolean

  hasPreviousPage: Boolean

  startCursor: String
}

type PageInfoV2 {
  hasNextPage: Boolean!

  endCursor: String

  hasPreviousPage: Boolean!

  startCursor: String
}

input PageInput {
  title: String

  status: PageStatusInput

  parentId: ID

  body: PageBodyInput

  restrictions: PageRestrictionsInput
}

type PageMediaSession {
  collection: String!

  token: MediaToken!

  configuration: MediaConfiguration!
}

type PageRestriction {
  group: [PageGroupRestriction!]

  user: [PageUserRestriction!]
}

input PageRestrictionInput {
  group: [PageGroupRestrictionInput!]

  user: [PageUserRestrictionInput!]
}

type PageRestrictions {
  read: PageRestriction

  update: PageRestriction
}

input PageRestrictionsInput {
  read: PageRestrictionInput

  update: PageRestrictionInput
}

enum PageStatusInput {
  DRAFT

  CURRENT
}

enum PageStatusV2 {
  current

  trashed

  historical

  deleted

  draft

  archived
}

enum PageUpdateStatusV2 {
  archived

  current

  deleted

  draft
}

enum PageUpdateTrigger {
  CREATE_PAGE

  DISCARD_CHANGES

  EDIT_PAGE

  LINK_REFACTORING

  MIGRATE_PAGE_COLLAB

  OWNER_CHANGE

  PAGE_RENAME

  PERSONAL_TASKLIST

  REVERT

  SPACE_CREATE

  UNKNOWN

  VIEW_PAGE
}

type PageUserRestriction {
  id: ID!
}

input PageUserRestrictionInput {
  id: ID!
}

type PageV2 implements Node {
  id: ID!

  status: PageStatusV2!

  title: String!

  parentType: ParentContent

  position: Int

  spaceId: ID

  parentId: ID

  authorId: ID

  ownerId: ID

  lastOwnerId: ID

  createdAt: String

  version: VersionV2

  body(format: BodyFormatV2 = atlas_doc_format): BodyV2

  internalProperties: InternalProperties

  operations: OperationsV2

  isFavoritedByCurrentUser: Boolean

  space: SpaceV2

  spacesV2(ids: [ID!]!): [SpaceV2]

  spaceTheme: ThemeV2

  spaceLookAndFeel: LookAndFeelV2

  spaceSettings: SpaceSettingsV2

  parentPage: PageV2

  pagesV2(ids: [ID!]!, status: [BulkPageStatusV2!] = [current,archived]): [PageV2]
}

type PageV2Connection {
  edges: [PageV2Edge]

  pageInfo: PageInfoV2!

  nodes: [PageV2]
}

type PageV2Edge {
  node: PageV2!

  cursor: String
}

type PageValidationResult {
  isValid: Boolean!

  message: String
}

enum PagesDisplayPersistenceOption {
  CARDS

  COMPACT_LIST

  LIST
}

enum PagesSortField {
  LAST_MODIFIED_DATE

  RELEVANT

  TITLE
}

enum PagesSortOrder {
  ASC

  DESC
}

type PagesSortPersistenceOption {
  field: PagesSortField!

  order: PagesSortOrder!
}

input PagesSortPersistenceOptionInput {
  field: PagesSortField!

  order: PagesSortOrder!
}

type PaginatedAllUpdatesFeed {
  nodes: [AllUpdatesFeedItem!]!

  pageInfo: FeedPageInfo!
}

type PaginatedCommentList {
  count: Int

  edges: [CommentEdge]

  nodes: [Comment]

  pageInfo: PageInfo

  totalCount: Int
}

type PaginatedContentHistoryList {
  count: Int

  edges: [ContentHistoryEdge]

  nodes: [ContentHistory]

  pageInfo: PageInfo
}

type PaginatedContentList {
  count: Int

  edges: [ContentEdge]

  links: LinksContextBase

  nodes: [Content]

  pageInfo: PageInfo
}

type PaginatedContentListWithChild {
  child: ConfluenceChildContent

  count: Int

  edges: [ContentEdge]

  links: LinksContextBase

  nodes: [Content]

  pageInfo: PageInfo
}

type PaginatedContentTemplateList {
  count: Int

  edges: [ContentTemplateEdge]

  links: LinksContextBase

  nodes: [ContentTemplate]

  pageInfo: PageInfo
}

type PaginatedDeactivatedUserPageCountEntityList {
  count: Int

  edges: [DeactivatedUserPageCountEntityEdge]

  nodes: [DeactivatedUserPageCountEntity]

  pageInfo: PageInfo
}

type PaginatedFeatureFlagList {
  count: Int

  edges: [FeatureFlagEdge]

  nodes: [FeatureFlag]

  pageInfo: FeatureFlagInfo
}

type PaginatedFeed {
  edges: [FeedItemEdge!]!

  nodes: [FeedItem!]!

  pageInfo: FeedPageInformation!
}

type PaginatedGroupList {
  count: Int

  edges: [GroupEdge]

  links: LinksContextBase

  nodes: [Group]

  pageInfo: PageInfo
}

type PaginatedGroupWithPermissions {
  count: Int

  edges: [GroupWithPermissionsEdge]

  nodes: [GroupWithPermissions]

  pageInfo: PageInfo
}

type PaginatedGroupWithRestrictions {
  count: Int

  edges: [GroupWithRestrictionsEdge]

  links: LinksContextBase

  nodes: [GroupWithRestrictions]

  pageInfo: PageInfo
}

type PaginatedJsonContentPropertyList {
  count: Int

  edges: [JsonContentPropertyEdge]

  links: LinksContextBase

  nodes: [JsonContentProperty]

  pageInfo: PageInfo
}

type PaginatedLabelList {
  count: Int

  edges: [LabelEdge]

  links: LinksContextBase

  nodes: [Label]

  pageInfo: PageInfo
}

type PaginatedPageActivity {
  nodes: [PageActivityEvent]!

  pageInfo: PageActivityPageInfo!
}

type PaginatedPageList {
  count: Int

  edges: [PageEdge]

  nodes: [Page]

  pageInfo: PageInfo
}

type PaginatedPersonList {
  count: Int

  edges: [PersonEdge]

  nodes: [Person]

  pageInfo: PageInfo
}

type PaginatedPopularFeed {
  edges: [PopularFeedItemEdge!]!

  nodes: [PopularFeedItem!]!

  pageInfo: FeedPageInfo!
}

type PaginatedPopularSpaceFeed {
  data: PopularSpaceFeedPage!

  pageInfo: FeedPageInfo!
}

type PaginatedSearchResultList {
  count: Int

  edges: [SearchResultEdge]

  links: LinksContextBase

  nodes: [SearchResult]

  pageInfo: PageInfo
}

type PaginatedSmartLinkList {
  count: Int

  edges: [SmartLinkEdge]

  nodes: [SmartLink]

  pageInfo: PageInfo
}

type PaginatedSnippetList {
  count: Int

  edges: [SnippetEdge]

  nodes: [Snippet]

  pageInfo: PageInfo
}

type PaginatedSpaceDumpPageList {
  count: Int

  edges: [SpaceDumpPageEdge]

  nodes: [SpaceDumpPage]

  pageInfo: PageInfo
}

type PaginatedSpaceDumpPageRestrictionList {
  count: Int

  edges: [SpaceDumpPageRestrictionEdge]

  nodes: [SpaceDumpPageRestriction]

  pageInfo: PageInfo
}

type PaginatedSpaceList {
  count: Int

  edges: [SpaceEdge]

  links: LinksContextBase

  nodes: [Space]

  pageInfo: PageInfo
}

type PaginatedSpacePermissionSubjectList {
  count: Int

  edges: [SpacePermissionSubjectEdge]

  groupCount: Int!

  nodes: [SpacePermissionSubject]

  pageInfo: PageInfo

  totalCount: Int!

  userCount: Int!
}

type PaginatedStalePagePayloadList {
  count: Int

  edges: [StalePagePayloadEdge]

  nodes: [StalePagePayload]

  pageInfo: PageInfo
}

type PaginatedSubjectUserOrGroupList {
  count: Int

  edges: [SubjectUserOrGroupEdge]

  groupCount: Int!

  nodes: [SubjectUserOrGroup]

  pageInfo: PageInfo

  totalCount: Int!

  userCount: Int!
}

type PaginatedTemplateBodyList {
  count: Int

  edges: [TemplateBodyEdge]

  links: LinksContextBase

  nodes: [TemplateBody]

  pageInfo: PageInfo
}

type PaginatedTemplateCategoryList {
  count: Int

  edges: [TemplateCategoryEdge]

  links: LinksContextBase

  nodes: [TemplateCategory]

  pageInfo: PageInfo
}

type PaginatedTemplateInfoList {
  count: Int

  edges: [TemplateInfoEdge]

  links: LinksContextBase

  nodes: [TemplateInfo]

  pageInfo: PageInfo
}

type PaginatedUserList {
  count: Int

  edges: [UserEdge]

  links: LinksContextBase

  nodes: [User]

  pageInfo: PageInfo
}

type PaginatedUserWithPermissions {
  count: Int

  edges: [UserEdge]

  nodes: [User]

  pageInfo: PageInfo
}

type PaginatedUserWithRestrictions {
  count: Int

  edges: [UserWithRestrictionsEdge]

  links: LinksContextBase

  nodes: [UserWithRestrictions]

  pageInfo: PageInfo
}

enum ParentContent {
  database

  embed

  page

  whiteboard
}

input PatchCommentsSummaryInput {
  contentId: ID!

  contentType: SummaryType!

  commentsType: CommentsType!

  language: String
}

type PatchCommentsSummaryMutationErrorExtension implements MutationErrorExtension {
  errorType: String

  statusCode: Int
}

type PatchCommentsSummaryPayload {
  contentId: ID!

  summary: String!

  summaryId: ID!

  language: String!

  errors: [MutationError!]
}

enum PathType {
  ABSOLUTE

  RELATIVE

  RELATIVE_NO_CONTEXT
}

interface Payload {
  errors: [MutationError!]

  success: Boolean!
}

type PaywallContentSingle {
  deactivationIdentifier: String!

  link: String

  title: String
}

enum PaywallStatus {
  ACTIVE

  DEACTIVATED

  UNSET
}

enum PermissionDisplayType {
  ANONYMOUS

  GROUP

  GUEST_USER

  LICENSED_USER
}

type PermissionMetadata {
  setPermission: Boolean!
}

type PermissionsViaGroups {
  edit: [Group]!

  view: [Group]!
}

type PermsReportDownloadLink {
  url: String
}

enum PermsReportTargetType {
  GROUP

  USER
}

interface Person {
  displayName: String

  operations: [OperationCheckResult]

  permissionType: SitePermissionType

  profilePicture: Icon

  type: String
}

type PersonEdge {
  cursor: String

  node: Person
}

enum Platform {
  ANDROID

  IOS

  WEB
}

type PopularFeedItem {
  id: ID!

  content: Content!
}

type PopularFeedItemEdge {
  cursor: String

  node: PopularFeedItem!
}

type PopularSpaceFeedPage {
  page: [PopularFeedItem!]!
}

type PremiumExtensionsFeature {
  isEntitled: Boolean!
}

input PremiumToolsDropdownPersistence {
  premiumToolsDropdownStatus: PremiumToolsDropdownStatus!

  spaceKey: String!
}

enum PremiumToolsDropdownStatus {
  COLLAPSED

  EXPANDED

  UNSET
}

enum PrincipalFilterType {
  GROUP

  GUEST

  TEAM

  USER
}

enum PrincipalType {
  GROUP

  USER
}

type PrioritizedOpenComments {
  referenceCommentIds: [ID!]!

  title: String!

  recap: String!

  why: String!

  actionNeeded: String!
}

enum Product {
  CONFLUENCE
}

type Prop {
  key: String!

  value: String!
}

input PropInput {
  key: String!

  value: String!
}

type PublicLink {
  id: ID!

  lastEnabledBy: String

  lastEnabledDate: String

  publicLinkUrlPath: String

  status: PublicLinkStatus!

  title: String

  type: String!

  lastEnabledByUser: Person!
}

enum PublicLinkAdminAction {
  ON

  OFF

  BLOCK

  UNBLOCK
}

type PublicLinkConnection {
  nodes: [PublicLink]!

  pageInfo: PublicLinkPageInfo!
}

type PublicLinkContentBody {
  value: String
}

type PublicLinkContentRepresentationMap {
  atlas_doc_format: PublicLinkContentBody
}

enum PublicLinkContentType {
  page

  whiteboard
}

enum PublicLinkDefaultSpaceStatus {
  OFF

  ON
}

type PublicLinkInformation {
  body: PublicLinkContentRepresentationMap

  id: ID!

  title: String

  type: PublicLinkContentType
}

type PublicLinkOnboardingReference {
  publicLinkId: ID
}

type PublicLinkPage {
  pageId: ID!

  pageStatus: PublicLinkPageStatus!

  pageTitle: String

  publicLinkUrlPath: String

  lastEnabledBy: String

  lastEnabledDate: String

  lastEnabledByUser: Person!
}

type PublicLinkPageConnection {
  nodes: [PublicLinkPage!]

  pageInfo: PublicLinkPageInfo!
}

type PublicLinkPageInfo {
  hasNextPage: Boolean!

  startPage: String

  endPage: String
}

enum PublicLinkPageStatus {
  BLOCKED_BY_ORG

  BLOCKED_BY_PRODUCT

  BLOCKED_BY_SPACE

  BLOCKED_BY_CONTAINER_POLICY

  BLOCKED_BY_CLASSIFICATION_LEVEL

  OFF

  ON

  SITE_BLOCKED

  SITE_DISABLED

  SPACE_BLOCKED

  SPACE_DISABLED
}

enum PublicLinkPageStatusFilter {
  ON

  OFF

  BLOCKED_BY_SPACE

  BLOCKED_BY_PRODUCT
}

type PublicLinkPagesAdminActionPayload {
  success: Boolean!
}

enum PublicLinkPagesByCriteriaOrder {
  DATE_ENABLED

  TITLE

  STATUS
}

type PublicLinkPermissions {
  permissions: [PublicLinkPermissionsType!]!
}

enum PublicLinkPermissionsObjectType {
  CONTENT
}

enum PublicLinkPermissionsType {
  EDIT
}

type PublicLinkSitePayload {
  status: PublicLinkSiteStatus!
}

enum PublicLinkSiteStatus {
  BLOCKED_BY_ORG

  OFF

  ON
}

type PublicLinkSpace {
  spaceId: String!

  name: String

  spaceKey: String!

  spaceAlias: String

  previousStatus: PublicLinkSpaceStatus

  status: PublicLinkSpaceStatus!

  stats: PublicLinkSpaceStats!

  icon: ConfluenceSpaceIcon

  isPolicySetForClassificationLevel: Boolean
}

type PublicLinkSpaceConnection {
  nodes: [PublicLinkSpace!]

  pageInfo: PublicLinkPageInfo!
}

type PublicLinkSpaceStats {
  publicLinks: PublicLinkStats!
}

enum PublicLinkSpaceStatus {
  BLOCKED_BY_CONTAINER_POLICY

  BLOCKED_BY_ORG

  BLOCKED_BY_PRODUCT

  OFF

  ON
}

type PublicLinkSpacesActionPayload {
  newStatus: PublicLinkSpaceStatus!

  success: Boolean!

  updatedSpaceIds: [ID!]
}

enum PublicLinkSpacesByCriteriaOrder {
  ACTIVE_LINKS

  NAME

  STATUS
}

type PublicLinkStats {
  active: Int
}

enum PublicLinkStatus {
  BLOCKED_BY_CLASSIFICATION_LEVEL

  BLOCKED_BY_CONTAINER_POLICY

  BLOCKED_BY_ORG

  BLOCKED_BY_PRODUCT

  BLOCKED_BY_SPACE

  OFF

  ON

  SITE_BLOCKED

  SITE_DISABLED

  SPACE_BLOCKED

  SPACE_DISABLED
}

enum PublicLinksByCriteriaOrder {
  DATE_ENABLED

  STATUS

  TITLE
}

type PublishConditions {
  addonKey: String!

  context: String!

  dialog: PublishConditionsDialog

  errorMessage: String!

  moduleKey: String!

  name: String!
}

type PublishConditionsDialog {
  header: String

  height: String

  url: String!

  width: String
}

type PublishedContentProperties {
  coverPictureWidth: String

  externalVersionId: String
}

type PushNotificationCustomSettings {
  comment: Boolean!

  commentContentCreator: Boolean!

  commentReply: Boolean!

  createBlogPost: Boolean!

  createPage: Boolean!

  editBlogPost: Boolean!

  editPage: Boolean!

  grantContentAccessEdit: Boolean

  grantContentAccessView: Boolean

  likeBlogPost: Boolean!

  likeComment: Boolean!

  likePage: Boolean!

  mentionBlogPost: Boolean!

  mentionComment: Boolean!

  mentionPage: Boolean!

  reactionBlogPost: Boolean

  reactionComment: Boolean

  reactionPage: Boolean

  requestContentAccess: Boolean

  share: Boolean!

  shareGroup: Boolean!

  taskAssign: Boolean!
}

input PushNotificationCustomSettingsInput {
  comment: Boolean!

  commentContentCreator: Boolean!

  commentReply: Boolean!

  createBlogPost: Boolean!

  createPage: Boolean!

  editBlogPost: Boolean!

  editPage: Boolean!

  grantContentAccessEdit: Boolean

  grantContentAccessView: Boolean

  likeBlogPost: Boolean!

  likeComment: Boolean!

  likePage: Boolean!

  mentionBlogPost: Boolean!

  mentionComment: Boolean!

  mentionPage: Boolean!

  reactionBlogPost: Boolean

  reactionComment: Boolean

  reactionPage: Boolean

  requestContentAccess: Boolean

  share: Boolean!

  shareGroup: Boolean!

  taskAssign: Boolean!
}

enum PushNotificationGroupInputType {
  NONE

  QUIET

  STANDARD
}

enum PushNotificationSettingGroup {
  CUSTOM

  NONE

  QUIET

  STANDARD
}

type Query {
  discoverFeed(after: String, first: Int = 25): PaginatedFeed!

  feed(after: String, first: Int = 25): PaginatedFeed!

  getFeedUserConfig: FollowingFeedGetUserConfig!

  getRecommendedFeedUserConfig: RecommendedFeedUserConfig!

  getSmartFeatures(input: [SmartFeaturesInput!]!): SmartFeaturesResponse!

  getSmartContentFeature(contentId: ID!): SmartPageFeatures!

  getRecommendedPages(entityType: String!, entityId: ID!, experience: String!): RecommendedPages!

  getRecommendedPagesSpaceStatus(entityId: ID!): RecommendedPagesSpaceStatus!

  getRecommendedLabels(entityType: String!, entityId: ID!, first: Int, spaceId: ID!): RecommendedLabels!

  getAIConfig(product: Product!): AIConfigResponse

  getSummary(contentId: ID!, contentType: SummaryType!, language: String, lastUpdatedTimeSeconds: Long!, responseType: ResponseType, backendExperiment: BackendExperiment): SmartFeaturesContentSummary

  getCommentsSummary(contentId: ID!, contentType: SummaryType!, commentsType: CommentsType!, language: String): SmartFeaturesCommentsSummary

  getCommentReplySuggestions(commentId: ID!, language: String): CommentReplySuggestions

  catchupEditMetadataForContent(contentId: ID!, contentType: CatchupContentType!, endTimeMs: Long!): CatchupEditMetadataForContent

  catchupVersionSummaryMetadataForContent(contentId: ID!, contentType: CatchupContentType!, endTimeMs: Long!, updateType: CatchupUpdateType!): CatchupVersionSummaryMetadataForContent

  catchupGetLastViewedTime(contentId: ID!, contentType: CatchupContentType!): CatchupLastViewedTimeResponse

  commentsDigest(contentId: ID!, contentType: SummaryType!, language: String, responseType: CommentsDigestResponseType): CommentsDigestResponse

  invitationUrls: InvitationUrlsPayload!

  getMetaTags(url: String, spaceKey: String, contentId: String): MetaTags!

  abTestCohorts: String!

  adminAnnouncementBanner: ConfluenceAdminAnnouncementBanner

  adminAnnouncementBannerSetting(id: String!): ConfluenceAdminAnnouncementBannerSetting

  adminAnnouncementBannerSettings: [ConfluenceAdminAnnouncementBannerSetting]

  adminAnnouncementBannerSettingsByCriteria(after: String, first: Int, isAscending: Boolean, orderBy: AdminAnnouncementBannerSettingsByCriteriaOrder): AdminAnnouncementBannerSettingConnection

  adminReportStatus: ConfluenceAdminReportStatus

  allTemplates(limit: Int = 500, sortingScheme: String = "web.item.sorting.scheme.default", spaceKey: String, start: Int, teamType: String = "unknown"): PaginatedTemplateInfoList

  availableContentStates(contentId: ID!): AvailableContentStates!

  canvasToken(contentId: ID!): CanvasToken

  classificationLevel(id: String!): ContentDataClassificationLevel!

  classificationLevels: [ContentDataClassificationLevel!]!

  collabDraft(format: CollabFormat! = PM, id: ID!): CollabDraft

  collabToken(draftShareId: String = "", id: ID!): CollabTokenResponse!

  comments(after: String, before: String, commentId: ID, contentStatus: [GraphQLContentStatus], depth: Depth = ALL, first: Long = 250, inlineMarkerRef: String, inlineMarkerRefList: [String], last: Long = 250, location: [String], pageId: ID, recentFirst: Boolean = false, type: [CommentType]): PaginatedCommentList

  confluence: ConfluenceQueryApi

  confluenceUsers(accountIds: [String], limit: Int = 200, start: Int): PaginatedPersonList

  contactAdminPageConfig: contactAdminPageConfig!

  content(after: String, draftShareId: String, embeddedContentRender: String = "current", first: Int = 25, id: ID, ids: [ID], navigationType: String, offset: Int, orderby: String, postingDay: String, shareToken: String, spaceKey: String, status: [String], title: String, trigger: String, type: String = "page", version: Int): PaginatedContentListWithChild

  contentBody(id: ID!): ContentBodyPerRepresentation

  contentByState(contentStateId: Long!, first: Int = 25, offset: Int = 0, spaceKey: String!): PaginatedContentList!

  contentContributors(after: String, first: Int, id: ID!, limit: Int = 10, offset: Int, status: [String], version: Int = 0): ContentContributors

  contentConverter(content: String!, contentIdContext: ID, embeddedContentRender: String = "current", expand: String = "", from: String!, spaceKeyContext: String = "", to: String!): ConfluenceBody

  contentHistory(after: String, contentId: ID!, first: Long = 100, limit: Int = 100): PaginatedContentHistoryList

  contentIdByReferenceId(referenceId: String!, type: String = "whiteboard"): Long!

  contentLabelSearch(contentId: ID, ignoreRelated: Boolean, limit: Int = 50, searchText: String!, spaceKey: String): LabelSearchResults

  contentMediaSession(contentId: ID!): ContentMediaSession

  contentPermissions(contentId: ID!): ContentPermissions

  contentRenderer(adf: String!, containedRender: Boolean = false, contentId: ID, mode: ContentRendererMode = RENDERER, outputDeviceType: OutputDeviceType): HtmlDocument

  contentSmartLinks(after: String, first: Int = 100, id: ID!): PaginatedSmartLinkList!

  contentTemplateLabelsByCriteria(contentTemplateId: ID!, limit: Int = 200, prefixes: [String], start: Int): PaginatedLabelList!

  contentVersionHistory(after: String, filter: ContentVersionHistoryFilter!, first: Int! = 100, id: ID!): ContentVersionHistoryConnection

  contentWatchers(after: String, contentId: ID!, first: Int = 200, offset: Int): PaginatedPersonList

  cqlMetaData: Confluence_cqlMetaData

  currentConfluenceUser: CurrentConfluenceUser

  dataSecurityPolicy: Confluence_dataSecurityPolicy

  deactivatedOwnerPages(cursor: String, limit: Int = 25, spaceKey: String!): PaginatedPageList

  deactivatedPageOwnerUsers(batchSize: Int = 25, offset: Int!, sortByPageCount: Boolean = false, spaceKey: String!, userType: DeactivatedPageOwnerUserType = NON_FORMER_USERS): PaginatedDeactivatedUserPageCountEntityList!

  defaultSpacePermissions: SpacePermissions!

  defaultSpaceRoleAssignmentsAll(after: String, first: Int = 20): DefaultSpaceRoleAssignmentsConnection!

  detailsLines(contentId: ID!, contentRepresentation: String!, countComments: Boolean = false, countLikes: Boolean = false, countUnresolvedComments: Boolean = false, cql: String, detailsId: String, headings: String, macroId: String = "", pageIndex: Int = 0, pageSize: Int = 30, reverseSort: Boolean = false, showCreator: Boolean = false, showLastModified: Boolean = false, showPageLabels: Boolean = false, sortBy: String, spaceKey: String!): DetailsSummaryLines!

  editorConversionSettings(spaceKey: String!): EditorConversionSetting!

  editorConversionSiteSettings: EditorConversionSetting!

  entitlements: Entitlements!

  experimentFeatures: String

  externalCanvasToken(shareToken: String!): CanvasToken

  externalCollaboratorDefaultSpace: ExternalCollaboratorDefaultSpace

  externalCollaboratorsByCriteria(after: String, email: String, first: Int = 25, groupIds: [String], name: String, offset: Int, sorts: [ExternalCollaboratorsSortType], spaceAssignmentType: SpaceAssignmentType, spaceIds: [ID]): PaginatedUserList!

  externalContentMediaSession(shareToken: String!): ContentMediaSession

  favoriteContent(limit: Int = 100, start: Int = 0): PaginatedContentList

  featureDiscovery: [DiscoveredFeature]

  futureContentTypeMobileSupport(contentType: String!, locale: String!, mobilePlatform: MobilePlatform!): FutureContentTypeMobileSupport!

  getGlobalDescription: GraphQLGlobalDescription

  globalContextContentCreationMetadata: ContentCreationMetadata!

  globalOperations: [OperationCheckResult]!

  globalSpaceConfiguration: GlobalSpaceConfiguration!

  group(groupId: String, groupName: String): Group

  groupCounts(groupIds: [String]): GraphQLGroupCountsResult

  groupMembers(after: String, filterText: String = "", first: Int = 25, id: String!): PaginatedPersonList

  groups(after: String, first: Int = 25): PaginatedGroupList

  groupsUserSpaceAccess(accountId: String!, limit: Int = 10, spaceKey: String!, start: Int): PaginatedGroupList

  groupsWithContentRestrictions(contentId: ID!, groupIds: [String]!): [GroupWithRestrictions]

  hasUserAccessAdminRole: Boolean!

  hasUserCommented(accountId: String!): Boolean!

  homeUserSettings: HomeUserSettings

  incomingLinksCount(contentId: ID!): IncomingLinksCount

  allIndividualSpaces(after: String, first: Int, key: String = ""): SpaceInfoConnection

  inlineTasks(tasksQuery: InlineTasksByMetadata!): InlineTasksQueryResult

  internalFrontendResource: FrontendResourceRenderResponse!

  isDataClassificationEnabled: Boolean!

  isMoveContentStatesSupported(contentId: ID!, spaceKey: String!): Boolean!

  isNewUser: Boolean!

  isSiteAdmin: Boolean!

  jiraProjects(jiraServerId: ID!): JiraProjectsResult

  jiraServers: JiraServersResult

  labelSearch(contentId: ID, ignoreRelated: Boolean, limit: Int = 50, searchText: String!, spaceKey: String): LabelSearchResults

  license: License

  localStorage: LocalStorage!

  lookAndFeel(spaceKey: String): LookAndFeelSettings

  loomToken: LoomToken

  loomUserStatus: LoomUserStatus!

  macroBodyRenderer(adf: String!, containedRender: Boolean = false, contentId: ID, mode: ContentRendererMode = RENDERER, outputDeviceType: OutputDeviceType): MacroBody

  onboardingState(key: [String]): [OnboardingState!]!

  orgDefaultClassificationLevelId: ID

  organizationContext: OrganizationContext

  page(enablePaging: Boolean = false, id: ID!, pageTree: Int): Page

  pageContextContentCreationMetadata(contentId: ID!): ContentCreationMetadata!

  pages(limit: Int = 25, pageId: ID, parentPageId: ID, spaceKey: String, start: Int, status: [GraphQLPageStatus], title: String): PaginatedPageList

  paywallContentToDisable(contentType: String!): PaywallContentSingle

  paywallStatus(id: ID!): PaywallStatus

  permsReportDownloadLinkForTask(id: ID!): PermsReportDownloadLink

  publicLinkOnboardingReference: PublicLinkOnboardingReference

  publicLinkPage(pageId: ID!): PublicLinkPage

  publicLinkPagesByCriteria(spaceId: ID!, pageTitlePattern: String, status: [PublicLinkPageStatusFilter!], after: String, first: Int = 25, orderBy: PublicLinkPagesByCriteriaOrder = DATE_ENABLED, isAscending: Boolean = true): PublicLinkPageConnection @deprecated(reason: "use publicLinksByCriteria")

  publicLinkPermissionsForObject(objectId: ID!, objectType: PublicLinkPermissionsObjectType!): PublicLinkPermissions

  publicLinkSiteStatus: PublicLinkSitePayload!

  publicLinkSpacesByCriteria(status: [PublicLinkSpaceStatus!], spaceNamePattern: String, after: String, first: Int = 25, orderBy: PublicLinkSpacesByCriteriaOrder = NAME, isAscending: Boolean = false): PublicLinkSpaceConnection

  publicLinkSpace(spaceId: ID!): PublicLinkSpace

  publicLinksByCriteria(after: String, first: Int, isAscending: Boolean, orderBy: PublicLinksByCriteriaOrder, spaceId: ID!, status: [PublicLinkStatus], title: String, type: [String]): PublicLinkConnection

  publishConditions(contentId: ID!): [PublishConditions]!

  pushNotificationSettings: ConfluencePushNotificationSettings!

  quickReload(pageId: Long!, since: Long!): QuickReload

  recentlyViewedSpaces(limit: Int = 25): [Space] @deprecated(reason: "recentlyViewedSpaces will no longer be supported after June 30 2023, consider using GraphQL myVisitedSpaces")

  renderedContentDump(id: ID!): HtmlDocument

  search(after: String, before: String, cql: String!, cqlcontext: String, disableArchivedSpaceFallback: Boolean = false, excerpt: String = "highlight", excludeCurrentSpaces: Boolean = false, first: Int = 25, includeArchivedSpaces: Boolean = false, last: Int = 25, offset: Int): PaginatedSearchResultList

  searchUser(after: String, cql: String!, first: Int = 25, offset: Int, sitePermissionTypeFilter: String = "none"): PaginatedSearchResultList

  signUpProperties: SignUpProperties

  singleContent(id: ID, shareToken: String, status: [String], validatedShareToken: String): Content

  singleRestrictedResource(accessType: ResourceAccessType!, accountId: ID!, resourceId: Long!): RestrictedResourceInfo

  siteConfiguration: SiteConfiguration!

  sitePermissions(operations: [SitePermissionOperationType], permissionTypes: [SitePermissionType]): SitePermission

  siteDescription: SiteDescription

  siteOperations: SiteOperations

  siteSettings: SiteSettings

  snippets(accountId: String!, after: String, first: Int = 25, scope: String, spaceKey: String, type: String): PaginatedSnippetList

  spaViewContext: SpaViewModel

  spaViewModel: SpaViewModel @deprecated(reason: "Use spaViewContext query")

  space(id: ID, identifier: ID, key: String, pageId: ID): Space

  spaceContextContentCreationMetadata(spaceKey: String!): ContentCreationMetadata!

  spaceHomepage(spaceKey: String!, version: Int): Content

  spaceManager(input: SpaceManagerQueryInput!): SpaceManagerRecordConnection

  spacePermissions(spaceKey: String!): SpacePermissions!

  spacePermissionsAll(after: String, first: Int): SpacePermissionConnection

  spaceRoleAssignmentsByCriteria(after: String, first: Int = 10, principalTypes: [PrincipalFilterType], spaceId: Long!, spaceRoleIds: [String]): SpaceRoleAssignmentConnection!

  spaceRoleAssignmentsByPrincipal(after: String, first: Int = 20, principal: RoleAssignmentPrincipalInput!, spaceId: Long!): SpaceRoleAssignmentConnection!

  spaceRolesByCriteria(after: String, first: Int = 25, principal: RoleAssignmentPrincipalInput, spaceId: Long): SpaceRoleConnection!

  spaceRolesBySpace(after: String, first: Int = 20, spaceId: Long!): SpaceRoleConnection!

  spaceSidebarLinks(spaceKey: String): SpaceSidebarLinks

  spaceTheme(spaceKey: String): Theme

  spaceWatchers(after: String, first: Int = 200, offset: Int, spaceId: ID, spaceKey: String): PaginatedPersonList

  spaces(after: String, assignedToGroupId: String, assignedToGroupName: String, assignedToUser: String, creatorAccountIds: [String], excludeTypes: String = "system", favourite: Boolean, favouriteUserAccountId: String, favouriteUserKey: String, first: Int = 25, label: [String], offset: Int, spaceId: Long, spaceIds: [Long], spaceKey: String, spaceKeys: [String], spaceNamePattern: String = "", status: String, type: String, watchedByAccountId: String, watchedSpacesOnly: Boolean): PaginatedSpaceList

  spacesWithExemptions(spaceIds: [Long]): [SpaceWithExemption]

  stalePages(cursor: String, lastActivityEarlierThan: String!, limit: Int = 25, pageStatus: StalePageStatus = CURRENT, sort: StalePagesSortingType = ASC, spaceId: ID!): PaginatedStalePagePayloadList!

  storage(id: ID): Storage

  suggestedSpaces(connections: [String], limit: Int = 3, start: Int = 0): PaginatedSpaceList

  teamCalendarSettings: TeamCalendarSettings!

  teamLabels(first: Int = 200, start: Int = 0): PaginatedLabelList

  template(contentTemplateId: String!): ContentTemplate

  templateBodies(ids: [String], limit: Int = 100, spaceKey: String, start: Int): PaginatedTemplateBodyList

  templateCategories(limit: Int = 25, spaceKey: String, start: Int): PaginatedTemplateCategoryList

  templateInfo(id: ID!): TemplateInfo

  templateMediaSession(collectionId: String, spaceKey: String, templateIds: [String]): TemplateMediaSession!

  templates(limit: Int = 25, spaceKey: String, start: Int): PaginatedContentTemplateList

  tenantContext: TenantContext

  traceTiming: TraceTiming

  userAccessStatus: AccessStatus

  userCanCreateContent: Boolean

  userGroupSearch(maxResults: Int, query: String, sitePermissionTypeFilter: SitePermissionTypeFilter = NONE): GraphQLUserAndGroupSearchResults

  userLocale: String!

  userPreferences: UserPreferences!

  userWithContentRestrictions(accountId: String, contentId: ID): UserWithRestrictions

  usersWithContentRestrictions(accountIds: [String]!, contentId: ID!): [UserWithRestrictions]

  validateConvertPageToLiveEdit(input: ValidateConvertPageToLiveEditInput!): ConvertPageToLiveEditValidationResult!

  validatePageCopy(input: ValidatePageCopyInput!): ValidatePageCopyPayload!

  validatePagePublish(id: ID!, status: String = "draft", title: String, type: String = "page"): PageValidationResult!

  validateSpaceKey(generateUniqueKey: Boolean = false, spaceKey: String!, validateUniqueness: Boolean = false): ValidateSpaceKeyResponse!

  validateTitleForCreate(spaceKey: String, title: String!): ValidateTitleForCreatePayload!

  webItemSections(contentId: ID, key: String, location: String, locations: [String], version: Int): [WebSection]!

  webItems(contentId: ID, key: String, location: String, section: String, version: Int): [WebItem]!

  webPanels(contentId: ID, key: String, location: String, locations: [String], version: Int): [WebPanel]!

  recentSpaces: [Space]

  orgDefaultClassificationLevel: ContentDataClassificationLevel

  pageV2(id: ID!, status: [PageStatusV2!] = [current,archived]): PageV2

  pagesV2(ids: [ID!]!, status: [BulkPageStatusV2!] = [current,archived]): [PageV2]

  pagesV2ForSpace(id: ID!, first: Int, after: String): PageV2Connection

  blogPostV2(id: ID!, status: [BlogStatusV2!] = [current]): BlogPostV2

  blogPostsV2(ids: [ID!]!, status: [BulkBlogPostStatusV2!] = [current]): [BlogPostV2]

  blogPostsV2ForSpace(id: ID!, first: Int, after: String): BlogPostV2Connection

  attachmentV2(id: ID!): AttachmentV2

  spaceV2(id: ID!): SpaceV2

  spacesV2(ids: [ID!]!): [SpaceV2]

  spaceLookAndFeelV2(id: ID!): LookAndFeelV2

  spaceSettingsV2(id: ID!): SpaceSettingsV2

  spacePropertiesV2(spaceId: ID!): SpacePropertyV2Connection

  spaceThemeV2(id: ID!): ThemeV2

  spaceV2ForPage(id: ID!): SpacePageV2

  contentPropertiesV2ForPage(pageId: ID!, keys: [String!]!): [ContentPropertyV2]

  contentPropertiesV2ForBlogPost(blogPostId: ID!, keys: [String!]!): [ContentPropertyV2]

  contentPropertiesV2ForComment(commentId: ID!, keys: [String!]!): [ContentPropertyV2]

  contentPropertiesV2ForAttachment(attachmentId: ID!, keys: [String!]!): [ContentPropertyV2]

  footerCommentV2(id: ID!): FooterCommentV2

  inlineCommentsV2ForPage(id: ID!, first: Int, after: String, resolutionStatus: [InlineCommentResolutionStatusV2!] = [open], status: [InlineCommentStatusV2!] = [current,archived]): InlineCommentV2Connection

  inlineCommentsV2ForBlogPost(id: ID!, first: Int, after: String, resolutionStatus: [InlineCommentResolutionStatusV2!] = [open], status: [InlineCommentStatusV2!] = [current]): InlineCommentV2Connection

  footerCommentsV2ForPage(id: ID!, first: Int, after: String, status: [FooterCommentStatusV2!] = [current,archived]): FooterCommentV2Connection

  footerCommentsV2ForBlogPost(id: ID!, first: Int, after: String, status: [FooterCommentStatusV2!] = [current]): FooterCommentV2Connection

  footerCommentsV2ForParentFooterComment(id: ID!, first: Int, after: String): FooterCommentV2Connection

  inlineCommentV2(id: ID!): InlineCommentV2

  inlineCommentsV2ForParentInlineComment(id: ID!, first: Int, after: String): InlineCommentV2Connection

  organization: Organization

  macros(contentId: ID!, blocklist: [String!], first: Int, after: String): MacroConnection

  renderedMacro(adf: String!, contentId: ID!): RenderedMacro

  publicLinkInformation(id: ID!): PublicLinkInformation

  userV2(id: ID!): UserV2

  usersV2(ids: [ID!]!): [UserV2]

  currentUserV2: UserV2

  permitted(principalId: String, resourceId: String, permissionId: String, dontRequirePrincipalInSite: Boolean): Boolean!

  bulkPermitted(dontRequirePrincipalsInSite: [Boolean], permissionIds: [String], principalIds: [String], resourceIds: [String]): [BulkPermittedResponse]

  mediaConfiguration: MediaConfiguration

  pageMediaSession(contentId: ID!): PageMediaSession @deprecated(reason: "Use contentMediaSession query")

  objectRecommendations(context: CollaborationGraphRequestContext!, modelRequestParams: ModelRequestParams!, maxNumberOfResults: Int = 25): CollaborationGraphRecommendationResults!

  reactedUsers(contentId: String!, containerId: String!, containerType: ContainerType!, contentType: GraphQLReactionContentType!, emojiId: String!): ReactedUsersResponse!

  reactionsSummary(contentId: ID!, contentType: String!, containerId: ID!, containerType: String = "content"): ReactionsSummaryResponse

  reactionsSummaryList(ids: [ReactionsId]!): [ReactionsSummaryResponse]!

  latestKnowledgeGraphObject(objectType: KnowledgeGraphObjectType!, contentId: ID!, contentType: ConfluenceContentType!, language: String = "english", objectVersion: String! = "1"): KnowledgeGraphObjectResponse

  experimentalGenerateSpaceKey(spaceName: String!): ExperimentalGenerateSpaceKeyResponse!

  experimentalSpaceProperties(propertyKey: String!, spaceKey: String!): ExperimentalSpaceProperty

  experimentalSpaceSettings(spaceKey: String!): ExperimentalSpaceSettings

  ptpage(enablePaging: Boolean = true, id: ID, pageTree: Int, status: [PTGraphQLPageStatus], spaceKey: String): PTPage

  user(current: Boolean, id: ID): AtlassianUser

  activities: Activities

  activity: Activity

  note(ari: String!): NoteResponse

  notesByCreator(input: NotesByCreatorInput): NoteConnection

  notesByProductLink(input: NotesByProductLinkInput): RelatedNoteConnection

  featureFlags(prefix: FeatureFlagPrefix! = FRONTEND, prefixes: [FeatureFlagPrefix!], extraTargeting: Boolean = true, after: String, first: Int = 500, offset: Int): PaginatedFeatureFlagList

  tapAttributes: TapAttributes!

  popularFeed(after: String, first: Int = 25, timeGranularity: String): PaginatedPopularFeed!

  spacePopularFeed(spaceId: ID!, after: String, first: Int = 25): PaginatedPopularSpaceFeed!

  allUpdatesFeed(after: String, first: Int = 25, groupBy: [AllUpdatesFeedEventType!], spaceKeys: [String!], users: [String!]): PaginatedAllUpdatesFeed!

  contentAnalyticsViews(contentId: ID!, fromDate: String): ContentAnalyticsViews

  contentAnalyticsViewers(contentId: ID!, fromDate: String): ContentAnalyticsViewers

  contentAnalyticsViewsByDate(contentId: ID!, contentType: String!, fromDate: String!, period: String!, timezone: String!, toDate: String!, type: String!): ContentAnalyticsViewsByDate!

  contentAnalyticsViewsByUser(contentId: ID!, accountIds: [String], limit: Int): ContentAnalyticsViewsByUser!

  contentAnalyticsTotalViewsByPage(contentIds: [ID!]!, startTime: String!, endTime: String): ContentAnalyticsTotalViewsByPage!

  contentAnalyticsLastViewedAtByPage(contentIds: [ID!]!, startTime: String!, endTime: String): ContentAnalyticsLastViewedAtByPage!

  countGroupByPage(spaceId: [ID!], pageId: [ID!], startTime: String!, endTime: String, eventName: [AnalyticsEventName!]!, sortOrder: String, limit: Int): CountGroupByPage!

  countGroupBySpace(spaceId: [ID!], startTime: String!, endTime: String, eventName: [AnalyticsEventName!]!, sortOrder: String, limit: Int): CountGroupBySpace!

  countGroupByUser(pageId: [ID], startTime: String!, endTime: String, eventName: [AnalyticsEventName!]!, sortOrder: String, limit: Int): CountGroupByUser!

  countGroupByEventName(startTime: String!, endTime: String, eventName: [AnalyticsEventName!]!, sortOrder: String, limit: Int): CountGroupByEventName!

  countUsersGroupByPage(pageId: [ID!], startTime: String!, endTime: String, eventName: [AnalyticsEventName!]!, sortOrder: String, limit: Int): CountUsersGroupByPage!

  eventCTR(startTime: String!, endTime: String, clickEventName: AnalyticsClickEventName!, discoverEventName: AnalyticsDiscoverEventName!): EventCTR

  eventTimeseriesCTR(startTime: String!, endTime: String, timezone: String!, granularity: AnalyticsTimeseriesGranularity!, clickEventName: AnalyticsClickEventName!, discoverEventName: AnalyticsDiscoverEventName!, sortOrder: String): EventTimeseriesCTR

  instanceAnalyticsCount(startTime: String!, endTime: String, eventName: [AnalyticsEventName!]!): InstanceAnalyticsCount!

  myVisitedSpaces(limit: Int): MyVisitedSpaces

  myVisitedPages(limit: Int): MyVisitedPages

  pageActivity(after: String, contentId: ID!, first: Int = 25, fromDate: String): PaginatedPageActivity!

  topRelevantUsers(spaceId: [String!]!, eventName: [AnalyticsEventName], startTime: String, endTime: String, userFilter: RelevantUserFilter, sortOrder: RelevantUsersSortOrder): TopRelevantUsers

  pageAnalyticsTimeseriesCount(pageId: ID!, startTime: String!, endTime: String, granularity: AnalyticsTimeseriesGranularity!, timezone: String!, uniqueBy: PageAnalyticsTimeseriesCountType = ALL, eventName: [AnalyticsEventName!]!): PageAnalyticsTimeseriesCount

  pageAnalyticsCount(pageId: ID!, startTime: String!, endTime: String, uniqueBy: PageAnalyticsCountType = ALL, eventName: [AnalyticsEventName!]!, accountIds: [String]): PageAnalyticsCount

  totalSearchCTR(startTime: String!, endTime: String, timezone: String!): TotalSearchCTR

  timeseriesCount(startTime: String!, endTime: String, granularity: AnalyticsTimeseriesGranularity!, timezone: String!, eventName: [AnalyticsEventName!]!, spaceId: [String!]): TimeseriesCount

  timeseriesPageBlogCount(startTime: String!, endTime: String, granularity: AnalyticsTimeseriesGranularity!, timezone: String!, contentAction: ContentAction!, contentType: AnalyticsContentType!, spaceId: [String!]): TimeseriesPageBlogCount

  timeseriesUniqueUserCount(startTime: String!, endTime: String, granularity: AnalyticsTimeseriesGranularity!, timezone: String!, eventName: [AnalyticsEventName!]!, spaceId: [String!]): TimeseriesUniqueUserCount

  entityTimeseriesCount(startTime: String!, endTime: String, granularity: AnalyticsTimeseriesGranularity!, timezone: String!, eventName: [AnalyticsMeasuresEventName!]!, spaceId: [String!]): EntityTimeseriesCount

  entityCountBySpace(limit: Int, sortOrder: String, spaceId: [String], startTime: String!, endTime: String, eventName: [AnalyticsMeasuresSpaceEventName!]!): EntityCountBySpace

  searchesByTerm(fromDate: String!, toDate: String!, timezone: String!, sorting: SearchesByTermColumns!, sortDirection: String!, period: SearchesByTermPeriod!, offset: Int, limit: Int, searchFilter: String): SearchesByTerm

  searchesWithZeroCTR(fromDate: String!, toDate: String!, timezone: String!, sortDirection: String, limit: Int): SearchesWithZeroCTR

  searchTimeseriesCount(startTime: String!, endTime: String, granularity: AnalyticsTimeseriesGranularity!, timezone: String!, eventName: [AnalyticsSearchEventName!]!, sortOrder: String): SearchTimeseriesCount

  searchTimeseriesCTR(startTime: String!, endTime: String, granularity: AnalyticsTimeseriesGranularity!, timezone: String!, eventName: [AnalyticsSearchEventName!]!, sortOrder: String, searchTerm: String): SearchTimeseriesCTR

  contentAnalyticsViewedComments(contentId: ID!): ViewedComments!

  tenant(current: Boolean = true): Tenant!

  confluenceContentSearch(query: String!, scopes: [ConfluenceContentSearchScope!]!, filters: ConfluenceSearchFilters, sessionAttributes: SessionAttributes, sort: [ConfluenceContentSortField!], first: Int!, token: String): ConfluenceContentSearchResults!

  frontendExperimentsBootstrap: FrontendExperimentsBootstrap
}

type QuickReload {
  comments: [QuickReloadComment!]!

  editorForPage: User

  time: Long!
}

type QuickReloadComment {
  asyncRenderSafe: Boolean!

  comment: Comment!

  primaryActions: [CommentUserAction]!

  secondaryActions: [CommentUserAction]!
}

type ReactedUsersResponse {
  ari: String!

  containerAri: String!

  count: Int!

  emojiId: String!

  reacted: Boolean!

  users: [User]!
}

input ReactionsId {
  contentId: ID!

  contentType: String!

  containerId: ID!

  containerType: String!
}

type ReactionsSummaryForEmoji {
  emojiId: String!

  count: Int!

  reacted: Boolean!

  id: String!
}

type ReactionsSummaryResponse {
  ari: String!

  containerAri: String!

  reactionsCount: Int!

  reactionsSummaryForEmoji: [ReactionsSummaryForEmoji]!
}

input ReattachInlineCommentInput {
  commentId: ID!

  containerId: ID!

  lastFetchTimeMillis: Long!

  matchIndex: Int!

  numMatches: Int!

  originalSelection: String!

  publishedVersion: Int

  step: Step
}

enum RecentFilter {
  ALL

  CREATED

  WORKED_ON
}

type RecentlyViewedSummary {
  friendlyLastSeen: String

  lastSeen: String
}

type RecommendedFeedUserConfig {
  recommendedSpaces: [RecommendedSpaceItem!]!

  recommendedPeople: [RecommendedPeopleItem!]!
}

type RecommendedLabelItem {
  id: ID!

  name: String!

  strategy: [String!]!

  namespace: String!
}

type RecommendedLabels {
  recommendedLabels: [RecommendedLabelItem]!
}

type RecommendedPages {
  recommendedPages: [RecommendedPagesItem!]!

  status: RecommendedPagesStatus!
}

type RecommendedPagesItem {
  contentId: ID!

  strategy: [String!]!

  content: Content!
}

enum RecommendedPagesSpaceBehavior {
  HIDDEN

  SHOWN
}

type RecommendedPagesSpaceStatus {
  recommendedPagesEnabled: Boolean!

  defaultBehavior: RecommendedPagesSpaceBehavior!

  isSpaceAdmin: Boolean!
}

type RecommendedPagesStatus {
  isEnabled: Boolean!

  userCanToggle: Boolean!
}

type RecommendedPeopleItem {
  accountId: String!

  score: Float!

  user: AtlassianUser
}

type RecommendedSpaceItem {
  spaceId: Long!

  score: Float!

  space: Space
}

input RecoverSpaceAdminPermissionInput {
  spaceKey: String!
}

type RecoverSpaceAdminPermissionPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input RecoverSpaceWithAdminRoleAssignmentInput {
  spaceId: Long!
}

type RecoverSpaceWithAdminRoleAssignmentPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type RelatedNoteConnection {
  related: NoteConnection

  remaining: NoteConnection
}

enum RelationSourceType {
  user
}

enum RelationTargetType {
  content

  space
}

enum RelationType {
  collaborator

  favourite

  touched
}

type RelevantSpaceUsersWrapper {
  id: String

  accountIds: [String]

  users: [Person]
}

type RelevantSpacesWrapper {
  space: RelevantSpaceUsersWrapper
}

enum RelevantUserFilter {
  collaborators
}

enum RelevantUsersSortOrder {
  asc

  desc
}

input RemoveGroupSpacePermissionsInput {
  groupIds: [String]

  groupNames: [String]

  spaceKey: String!
}

input RemovePublicLinkPermissionsInput {
  objectId: ID!

  objectType: PublicLinkPermissionsObjectType!

  permissions: [PublicLinkPermissionsType!]!
}

type RemovePublicLinkPermissionsPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type RemoveSpacePermissionsPayload {
  status: Boolean!
}

input RemoveUserSpacePermissionsInput {
  accountId: String!

  spaceKey: String!
}

type RenderedMacro {
  macroBodyStorage: String

  macroRenderedRepresentation: ContentRepresentationV2

  mediaToken: EmbeddedMediaTokenV2

  value: String

  webResource: WebResourceDependenciesV2
}

input ReplyInlineCommentInput {
  commentBody: CommentBody!

  commentSource: Platform

  containerId: ID!

  createdFrom: CommentCreationLocation

  parentCommentId: ID!
}

input RequestPageAccessInput {
  accessType: AccessType!

  pageId: String!
}

type RequestPageAccessPayload {
  displayName: String!
}

input ResetExCoSpacePermissionsInput {
  accountId: String!

  spaceKey: String
}

type ResetExCoSpacePermissionsPayload {
  status: Boolean!
}

input ResetSpaceRolesFromAnotherSpaceInput {
  sourceSpaceId: Long!

  targetSpaceId: Long!
}

type ResetSpaceRolesFromAnotherSpacePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ResetToDefaultSpaceRoleAssignmentsInput {
  spaceId: Long!
}

type ResetToDefaultSpaceRoleAssignmentsPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type ResolveInlineCommentPayload {
  resolveProperties: InlineCommentResolveProperties

  status: Boolean!
}

input ResolveRestrictionsInput {
  accessType: ResourceAccessType!

  accountId: ID!

  resourceId: Long!

  resourceType: ResourceType!
}

type ResolveRestrictionsPayload implements Payload {
  errors: [MutationError!]!

  success: Boolean!
}

enum ResourceAccessType {
  EDIT

  VIEW
}

enum ResourceType {
  DATABASE

  FOLDER

  PAGE

  SPACE

  WHITEBOARD
}

enum ResponseType {
  BULLET_LIST_ADF

  BULLET_LIST_MARKDOWN

  PARAGRAPH_PLAINTEXT
}

type RestoreSpacePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type RestrictedResource {
  requiredAccessType: ResourceAccessType

  resourceId: Long!

  resourceLink: RestrictedResourceLinks!

  resourceTitle: String!

  resourceType: ResourceType!
}

type RestrictedResourceInfo {
  canSetPermission: Boolean

  hasMultipleRestriction: Boolean

  restrictedResourceList: [RestrictedResource]
}

type RestrictedResourceLinks {
  base: String

  webUi: String
}

enum ReverseTrialCohort {
  CONTROL

  ENROLLED

  NOT_ENROLLED

  UNASSIGNED

  UNKNOWN

  VARIANT
}

enum RevertToLegacyEditorResult {
  NOT_REVERTED

  REVERTED
}

input RoleAssignment {
  principal: RoleAssignmentPrincipalInput!

  roleId: ID!
}

input RoleAssignmentPrincipalInput {
  principalId: ID!

  principalType: RoleAssignmentPrincipalType!
}

enum RoleAssignmentPrincipalType {
  ACCESS_CLASS

  GROUP

  TEAM

  USER
}

type RunImportError {
  message: String

  statusCode: Int
}

input RunImportInput {
  filestoreId: String!

  baseUrl: String!

  application: String!

  cloudId: String!

  accountId: String!

  integrationToken: String!

  accessToken: String!

  importPageData: Boolean!

  importPermissions: String

  fullImport: Boolean!

  spaceName: String

  importUsers: Boolean!

  orgId: String!
}

type RunImportPayload {
  taskId: String

  errors: [RunImportError!]!

  success: Boolean!
}

type SaveReactionResponse {
  ari: String!

  containerAri: String!

  emojiId: String!
}

type SchedulePublishInfo {
  date: String

  links: LinksContextBase

  minorEdit: Boolean

  restrictions: ScheduledRestrictions

  targetLocation: TargetLocation

  targetType: String

  versionComment: String
}

type ScheduledPublishSummary {
  isScheduled: Boolean

  when: String
}

type ScheduledRestriction {
  group: PaginatedGroupList

  user: PaginatedUserList
}

type ScheduledRestrictions {
  read: ScheduledRestriction

  update: ScheduledRestriction
}

type ScreenLookAndFeel {
  background: String

  backgroundAttachment: String

  backgroundBlendMode: String

  backgroundClip: String

  backgroundColor: String

  backgroundImage: String

  backgroundOrigin: String

  backgroundPosition: String

  backgroundRepeat: String

  backgroundSize: String

  gutterBottom: String

  gutterLeft: String

  gutterRight: String

  gutterTop: String

  layer: LayerScreenLookAndFeel
}

type SearchFieldLookAndFeel {
  backgroundColor: String

  color: String
}

type SearchResult {
  breadcrumbs: [Breadcrumb]!

  content: Content

  entityType: String

  excerpt: String

  friendlyLastModified: String

  iconCssClass: String

  lastModified: String

  links: LinksContextBase

  resultGlobalContainer: ContainerSummary

  resultParentContainer: ContainerSummary

  score: Float

  space: Space

  title: String

  url: String

  user: User
}

type SearchResultEdge {
  cursor: String

  node: SearchResult
}

type SearchTimeseriesCTR {
  nodes: [SearchTimeseriesCTRItem!]!
}

type SearchTimeseriesCTRItem {
  timestamp: String!

  ctr: Float!
}

type SearchTimeseriesCount {
  nodes: [TimeseriesCountItem!]!
}

type SearchesByTerm {
  nodes: [SearchesByTermItems!]!

  pageInfo: SearchesPageInfo!
}

enum SearchesByTermColumns {
  pageViewedPercentage

  searchClickCount

  searchTerm

  total

  uniqueUsers

  searchSessionCount
}

type SearchesByTermItems {
  searchTerm: String!

  total: Int!

  uniqueUsers: Int!

  pageViewedPercentage: Float!

  searchClickCount: Int!

  searchSessionCount: Int!
}

enum SearchesByTermPeriod {
  day

  week

  month
}

type SearchesPageInfo {
  next: String

  prev: String
}

type SearchesWithZeroCTR {
  nodes: [SearchesWithZeroCTRItem]!
}

type SearchesWithZeroCTRItem {
  searchTerm: String!

  count: Int!
}

input SessionAttributes {
  experience: String!

  searchSessionId: ID
}

input SetDefaultSpaceRoleAssignmentsInput {
  spaceRoleAssignmentList: [RoleAssignment!]!
}

type SetDefaultSpaceRoleAssignmentsPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input SetFeedUserConfigInput {
  followSpaces: [Long]

  followUsers: [ID]

  unfollowSpaces: [Long]

  unfollowUsers: [ID]
}

type SetFeedUserConfigPayload {
  accountIds: [String]!

  spaceIds: [Long]!

  success: Boolean!

  errors: [SetFeedUserConfigPayloadError!]

  spaces: [Space]

  users: [Person]
}

type SetFeedUserConfigPayloadError {
  message: String

  extensions: SetFeedUserConfigPayloadErrorExtension
}

type SetFeedUserConfigPayloadErrorExtension {
  statusCode: Int
}

input SetRecommendedPagesSpaceStatusInput {
  entityId: ID!

  enableRecommendedPages: Boolean

  defaultBehavior: RecommendedPagesSpaceBehavior
}

type SetRecommendedPagesSpaceStatusPayload {
  success: Boolean!

  errors: [SetRecommendedPagesSpaceStatusPayloadError!]
}

type SetRecommendedPagesSpaceStatusPayloadError {
  message: String

  extensions: SetRecommendedPagesStatusPayloadErrorExtension
}

type SetRecommendedPagesSpaceStatusPayloadErrorExtension {
  statusCode: Int
}

input SetRecommendedPagesStatusInput {
  entityType: String!

  entityId: ID!

  enableRecommendedPages: Boolean!
}

type SetRecommendedPagesStatusPayload {
  success: Boolean!

  errors: [SetRecommendedPagesStatusPayloadError!]
}

type SetRecommendedPagesStatusPayloadError {
  message: String

  extensions: SetRecommendedPagesStatusPayloadErrorExtension
}

type SetRecommendedPagesStatusPayloadErrorExtension {
  statusCode: Int
}

input SetSpaceRoleAssignmentsInput {
  spaceId: Long!

  spaceRoleAssignmentList: [RoleAssignment!]!
}

type SetSpaceRoleAssignmentsPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input ShareResourceInput {
  atlOrigin: String!

  contextualPageId: String!

  emails: [String]!

  entityId: String!

  entityType: String!

  groupIds: [String]

  groups: [String]!

  isShareEmailExperiment: Boolean!

  note: String!

  shareType: ShareType!

  users: [String]!
}

type ShareResourcePayload {
  success: Boolean!
}

enum ShareType {
  INVITE_TO_EDIT

  SHARE_PAGE
}

type SignUpProperties {
  reverseTrial: ReverseTrialCohort
}

type SiteConfiguration {
  ccpEntitlementId: String

  companyHubName: String

  customSiteLogo: Boolean!

  frontCoverState: String!

  newCustomer: Boolean!

  productAdmins(after: String, excludeAddOns: Boolean = false, first: Int = 25, offset: Int): PaginatedPersonList!

  showFrontCover: Boolean!

  showSiteTitle: Boolean!

  siteFaviconUrl: String!

  siteLogoUrl: String!

  siteTitle: String!

  tenantId: ID
}

type SiteDescription {
  logoUrl: String
}

type SiteEmailAddress {
  emailAddress: String

  emailAddressStatus: ConfluenceSiteEmailAddressStatus
}

type SiteLookAndFeel {
  backgroundColor: String

  faviconFiles: [FaviconFile!]!

  frontCoverState: String

  highlightColor: String

  showFrontCover: Boolean

  showSiteName: Boolean

  siteLogoFileStoreId: ID

  siteName: String
}

type SiteOperations {
  allOperations: [OperationCheckResult]!

  application: [String]!

  userProfile: [String]!
}

type SitePermission {
  anonymous: Anonymous

  anonymousAccessDSPBlocked: Boolean!

  groups(after: String, filterText: String, first: Int = 25): PaginatedGroupWithPermissions

  unlicensedUserWithPermissions: UnlicensedUserWithPermissions

  users(after: String, filterText: String, first: Int = 25): PaginatedUserWithPermissions
}

input SitePermissionInput {
  permissionsToAdd: UpdateSitePermissionInput

  permissionsToRemove: UpdateSitePermissionInput
}

enum SitePermissionOperationType {
  ADMINISTER_CONFLUENCE

  ADMINISTER_SYSTEM

  CREATE_PROFILEATTACHMENT

  CREATE_SPACE

  EXTERNAL_COLLABORATOR

  LIMITED_USE_CONFLUENCE

  READ_USERPROFILE

  UPDATE_USERSTATUS

  USE_CONFLUENCE

  USE_PERSONALSPACE
}

enum SitePermissionType {
  ANONYMOUS

  APP

  EXTERNAL

  INTERNAL

  JSD
}

enum SitePermissionTypeFilter {
  ALL

  EXTERNALCOLLABORATOR

  NONE
}

type SiteSettings {
  companyHubName: String

  frontCover: FrontCover

  homepage: Homepage

  showApplicationTitle: Boolean!

  siteTitle: String!
}

type SmartConnectorsFeature {
  isEntitled: Boolean!
}

type SmartFeaturesCommentsSummary {
  contentId: ID!

  summary: String!

  summaryId: ID!

  language: String!
}

type SmartFeaturesContentSummary {
  contentId: ID!

  language: String!

  lastUpdatedTimeSeconds: Long!

  summary: String!

  summaryId: String!
}

type SmartFeaturesError {
  id: String!

  message: String!

  errorCode: String!
}

type SmartFeaturesErrorResponse {
  entityType: String!

  error: [SmartFeaturesError]
}

input SmartFeaturesInput {
  entityType: String!

  entityIds: [String!]!

  features: [String]
}

type SmartFeaturesPageResult {
  id: String!

  features: SmartPageFeatures!
}

type SmartFeaturesPageResultResponse implements SmartFeaturesResultResponse {
  entityType: String!

  result: [SmartFeaturesPageResult]
}

type SmartFeaturesResponse {
  errors: [SmartFeaturesErrorResponse]

  results: [SmartFeaturesResultResponse]
}

interface SmartFeaturesResultResponse {
  entityType: String!
}

type SmartFeaturesSpaceResult {
  id: String!

  features: SmartSpaceFeatures!
}

type SmartFeaturesSpaceResultResponse implements SmartFeaturesResultResponse {
  entityType: String!

  result: [SmartFeaturesSpaceResult]
}

type SmartFeaturesUserResult {
  id: String!

  features: SmartUserFeatures!
}

type SmartFeaturesUserResultResponse implements SmartFeaturesResultResponse {
  entityType: String!

  result: [SmartFeaturesUserResult]
}

interface SmartLink {
  url: String!
}

type SmartLinkEdge {
  cursor: String

  node: SmartLink
}

type SmartPageFeatures {
  commentsDaily: Float

  likesDaily: Float

  viewsDaily: Float

  commentsWeekly: Float

  likesWeekly: Float

  viewsWeekly: Float

  commentsMonthly: Float

  likesMonthly: Float

  viewsMonthly: Float

  commentsYearly: Float

  likesYearly: Float

  viewsYearly: Float

  readTime: Int
}

type SmartSectionsFeature {
  isEntitled: Boolean!
}

type SmartSpaceFeatures {
  top_templates: [TopTemplateItem]
}

type SmartUserFeatures {
  recommendedPeople: [RecommendedPeopleItem]

  recommendedSpaces: [RecommendedSpaceItem]
}

type Snippet {
  body: String

  creationDate: Date

  creator: String

  icon: String

  id: ID

  position: Float

  scope: String

  spaceKey: String

  title: String

  type: String
}

type SnippetEdge {
  cursor: String

  node: Snippet
}

type SoftDeleteSpacePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

enum SortOrder {
  ASC

  DESC
}

type SpaUnfriendlyMacro {
  links: LinksContextBase

  name: String
}

type SpaViewModel {
  abTestCohorts: String @deprecated(reason: "Use abTestCohorts top level query")

  experimentFeatures: String @deprecated(reason: "Use experimentFeatures top level query")

  homepageTitle: String

  homepageUri: String

  isAnonymous: Boolean

  isNewUser: Boolean @deprecated(reason: "Use Onboarding.isNewUser")

  isSiteAdmin: Boolean @deprecated(reason: "Use isSiteAdmin top level query")

  resourceContexts: [String]

  resourceKeys: [String]

  showEditButton: Boolean

  showSiteTitle: Boolean @deprecated(reason: "Use SiteConfiguration.showSiteTitle")

  showWelcomeMessageEditHint: Boolean

  siteLogoUrl: String @deprecated(reason: "Use SiteConfiguration.siteLogoUrl")

  siteTitle: String @deprecated(reason: "Use SiteConfiguration.siteTitle")

  tenantId: ID @deprecated(reason: "Use SiteConfiguration.tenantId")

  userCanCreateContent: Boolean

  welcomeMessageEditUrl: String

  welcomeMessageHtml: String
}

type Space {
  admins(accountType: AccountType): [Person]!

  alias: String

  archivedContentRoots(first: Int = 25, offset: Int, orderBy: String): PaginatedContentList! @deprecated(reason: "Use contentRoots")

  containsExternalCollaborators: Boolean!

  contentRoots(first: Int = 10, offset: Int, orderBy: String = "history.by.when desc", status: String): PaginatedContentList!

  creatorAccountId: String

  currentUser: SpaceUserMetadata!

  dataClassificationTags: [String]!

  defaultClassificationLevelId: ID

  description: SpaceDescriptions

  didContainUserContent: Boolean!

  directAccessExternalCollaborators(limit: Int = 10, start: Int): PaginatedPersonList

  externalCollaboratorAndGroupCount: Int!

  externalCollaboratorCount: Int!

  externalGroupsWithAccess(limit: Int = 10, start: Int): PaginatedGroupList

  hasDefaultClassificationLevel: Boolean!

  hasGroupRestriction(groupID: String!, permission: InspectPermissions!): Boolean!

  hasRestriction(accountID: String!, permission: InspectPermissions!): Boolean!

  history: SpaceHistory

  homepage: Content

  homepageId: ID

  icon: Icon

  id: ID

  identifiers: GlobalSpaceIdentifier

  isBlogToggledOffByPTL: Boolean!

  isExportEnabled: Boolean!

  key: String

  links: LinksDownloadEdituiWebuiContextSelfTinyuiCollectionBase

  lookAndFeel: LookAndFeel

  metadata: SpaceMetadata!

  name: String

  operations: [OperationCheckResult]

  permissions: [SpacePermission]

  settings: SpaceSettings

  spaceAdmins(after: String, excludeAddOns: Boolean = false, first: Int = 25, offset: Int): PaginatedPersonList!

  spaceTypeSettings: SpaceTypeSettings!

  status: String

  theme: Theme

  totalBlogpostsWithoutClassificationLevelOverride: Long!

  totalContentWithoutClassificationLevelOverride: Int!

  totalPagesWithoutClassificationLevelOverride: Long!

  type: String

  homepageV2: Content

  homepageWebSections(location: String, locations: [String], version: Int): [WebSection]

  pageTree(enablePaging: Boolean, pageTree: Int, status: [PTGraphQLPageStatus]): PTPage

  homepageComments(type: [CommentType], depth: Depth): PaginatedCommentList
}

enum SpaceAssignmentType {
  ASSIGNED

  UNASSIGNED
}

enum SpaceDescriptionEnum {
  plain

  view
}

type SpaceDescriptionV2 {
  plain: FormattedPageV2

  view: FormattedPageV2
}

type SpaceDescriptions {
  atlas_doc_format: FormattedBody

  dynamic: FormattedBody

  editor: FormattedBody

  editor2: FormattedBody

  export_view: FormattedBody

  plain: FormattedBody

  raw: FormattedBody

  storage: FormattedBody

  styled_view: FormattedBody

  view: FormattedBody

  wiki: FormattedBody
}

type SpaceDump {
  key: String!

  pageRestrictions(after: String, first: Int = 50000): PaginatedSpaceDumpPageRestrictionList!

  pages(after: String, first: Int = 50000): PaginatedSpaceDumpPageList!
}

type SpaceDumpPage {
  creator: String

  id: String!

  parent: String

  position: Int

  status: String
}

type SpaceDumpPageEdge {
  cursor: String

  node: SpaceDumpPage
}

type SpaceDumpPageRestriction {
  groups: [String]!

  pageId: String

  type: SpaceDumpPageRestrictionType

  users: [String]!
}

type SpaceDumpPageRestrictionEdge {
  cursor: String

  node: SpaceDumpPageRestriction
}

enum SpaceDumpPageRestrictionType {
  EDIT

  SHARE

  VIEW
}

type SpaceEdge {
  cursor: String

  node: Space
}

type SpaceHistory {
  createdBy: Person

  createdDate: String

  lastModifiedBy: Person

  lastModifiedDate: String

  links: LinksContextBase
}

type SpaceIconV2 {
  path: String

  apiDownloadLink: String
}

type SpaceInfo {
  id: ID!

  key: String!

  name: String!

  spaceAdminAccess: Boolean!
}

type SpaceInfoConnection {
  edges: [SpaceInfoEdge]

  nodes: [SpaceInfo!]!

  pageInfo: SpaceInfoPageInfo!
}

type SpaceInfoEdge {
  cursor: String

  node: SpaceInfo!
}

type SpaceInfoPageInfo {
  endCursor: String

  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String
}

input SpaceInput {
  key: ID!
}

enum SpaceManagerFilterType {
  PERSONAL

  TEAM_AND_PROJECT
}

input SpaceManagerFilters {
  searchQuery: String

  status: ConfluenceSpaceStatus

  types: [SpaceManagerFilterType]
}

enum SpaceManagerOrderColumn {
  KEY

  TITLE
}

enum SpaceManagerOrderDirection {
  ASC

  DESC
}

input SpaceManagerOrdering {
  column: SpaceManagerOrderColumn

  direction: SpaceManagerOrderDirection
}

input SpaceManagerQueryInput {
  after: String

  filters: SpaceManagerFilters

  first: Int

  orderInfo: SpaceManagerOrdering
}

type SpaceManagerRecord {
  alias: String

  canManage: Boolean

  canView: Boolean

  createdBy: GraphQLUserInfo

  icon: ConfluenceSpaceIcon

  key: String

  lastViewedAt: String

  spaceId: ID!

  title: String
}

type SpaceManagerRecordConnection {
  edges: [SpaceManagerRecordEdge]!

  nodes: [SpaceManagerRecord]!

  pageInfo: SpaceManagerRecordPageInfo!
}

type SpaceManagerRecordEdge {
  cursor: String!

  node: SpaceManagerRecord!
}

type SpaceManagerRecordPageInfo {
  endCursor: String

  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String
}

type SpaceMetadata {
  labels: PaginatedLabelList

  recentCommenters: PaginatedUserList

  recentWatchers: PaginatedUserList

  totalCommenters: Long!

  totalCurrentBlogPosts: Long!

  totalCurrentPages: Long!

  totalPageUpdatesSinceLast7Days: Long!

  totalWatchers: Long!
}

type SpaceOrContent {
  alias: String

  ancestors: [Content]

  body: ContentBodyPerRepresentation

  childTypes: ChildContentTypesAvailable

  container: SpaceOrContent

  creatorAccountId: String

  dataClassificationTags: [String]!

  description: SpaceDescriptions

  extensions: [KeyValueHierarchyMap]

  history: History

  homepage: Content

  homepageId: ID

  icon: Icon

  id: ID

  identifiers: GlobalSpaceIdentifier

  key: String

  links: LinksDownloadEdituiWebuiContextSelfTinyuiCollectionBase

  lookAndFeel: LookAndFeel

  macroRenderedOutput: [MapOfStringToFormattedBody]

  metadata: ContentMetadata!

  name: String

  operations: [OperationCheckResult]

  permissions: [SpacePermission]

  referenceId: String

  restrictions: ContentRestrictions

  schedulePublishDate: String

  schedulePublishInfo: SchedulePublishInfo

  settings: SpaceSettings

  space: Space

  status: String

  subType: String

  theme: Theme

  title: String

  type: String

  version: Version
}

type SpacePageEditorSettingsV2 {
  page: String

  blogPost: String

  default: String
}

type SpacePageLinksV2 {
  webui: String

  base: String
}

type SpacePageSettingsV2 {
  routeOverrideEnabled: Boolean

  editor: SpacePageEditorSettingsV2
}

type SpacePageV2 implements Node {
  id: ID!

  key: String!

  alias: String

  name: String!

  type: SpaceTypeV2!

  status: SpaceStatusV2!

  icon: SpaceIconV2

  createdAt: String

  authorId: ID

  homepageId: ID!

  description(format: SpaceDescriptionEnum = plain): SpaceDescriptionV2

  lookAndFeel: LookAndFeelV2

  theme: ThemeV2

  settings: SpacePageSettingsV2

  _links: SpacePageLinksV2
}

input SpacePagesDisplayView {
  spaceKey: String!

  spacePagesPersistenceOption: PagesDisplayPersistenceOption!
}

input SpacePagesSortView {
  spaceKey: String!

  spacePagesSortPersistenceOption: PagesSortPersistenceOptionInput!
}

type SpacePermission {
  anonymousAccess: Boolean

  id: ID

  links: LinksContextBase

  operation: OperationCheckResult

  subjects: SubjectsByType

  unlicensedAccess: Boolean
}

type SpacePermissionConnection {
  edges: [SpacePermissionEdge]

  nodes: [SpacePermissionInfo!]!

  pageInfo: SpacePermissionPageInfo!
}

type SpacePermissionEdge {
  cursor: String

  node: SpacePermissionInfo!
}

type SpacePermissionGroup {
  displayName: String!

  priority: Int!
}

type SpacePermissionInfo {
  description: String

  displayName: String!

  group: SpacePermissionGroup!

  id: String!

  priority: Int!

  requiredSpacePermissions: [String]
}

type SpacePermissionPageInfo {
  endCursor: String

  hasNextPage: Boolean!

  startCursor: String
}

type SpacePermissionSubject {
  filteredPrincipalSubjectKey: FilteredPrincipalSubjectKey

  permissions: [SpacePermissionType]

  subjectKey: SubjectKey
}

type SpacePermissionSubjectEdge {
  cursor: String

  node: SpacePermissionSubject
}

enum SpacePermissionType {
  ADMINISTER_SPACE

  ARCHIVE_PAGE

  COMMENT

  CREATE_ATTACHMENT

  CREATE_EDIT_PAGE

  EDIT_BLOG

  EXPORT_PAGE

  EXPORT_SPACE

  MANAGE_GUEST_USERS

  MANAGE_NONLICENSED_USERS

  MANAGE_USERS

  REMOVE_ATTACHMENT

  REMOVE_BLOG

  REMOVE_COMMENT

  REMOVE_MAIL

  REMOVE_OWN_CONTENT

  REMOVE_PAGE

  SET_PAGE_PERMISSIONS

  VIEW_SPACE
}

type SpacePermissions {
  anonymousAccessDSPBlocked: Boolean!

  editable: Boolean!

  filteredSubjectsWithPermissions(after: String, filterText: String, first: Int = 500, permissionDisplayType: PermissionDisplayType): PaginatedSpacePermissionSubjectList!

  groupsWithDefaultSpacePermissions(after: String, filterText: String, first: Int = 500): PaginatedSpacePermissionSubjectList!

  subjectsWithDefaultSpacePermissions(after: String, filterText: String, first: Int = 500): PaginatedSpacePermissionSubjectList!

  subjectsWithPermissions(after: String, filterText: String, first: Int = 500): PaginatedSpacePermissionSubjectList!
}

type SpacePropertyV2 {
  key: String!

  value: JSON!

  createdAt: String!

  createdBy: String

  authorId: ID!

  version: SpaceVersionV2!
}

type SpacePropertyV2Connection {
  edges: [SpacePropertyV2Edge]

  pageInfo: PageInfoV2!

  nodes: [SpacePropertyV2]
}

type SpacePropertyV2Edge {
  node: SpacePropertyV2!

  cursor: String
}

type SpaceRole {
  roleDescription: String!

  roleDisplayName: String!

  roleId: ID!

  roleType: SpaceRoleType!

  spacePermissionList: [SpacePermissionInfo!]!
}

type SpaceRoleAccessClassPrincipal implements SpaceRolePrincipal {
  displayName: String!

  principalId: ID!
}

type SpaceRoleAssignment {
  permissions: [SpacePermissionInfo!]

  principal: SpaceRolePrincipal!

  role: SpaceRole

  spaceId: Long!
}

type SpaceRoleAssignmentConnection {
  edges: [SpaceRoleAssignmentEdge]

  nodes: [SpaceRoleAssignment!]

  pageInfo: SpacePermissionPageInfo!
}

type SpaceRoleAssignmentEdge {
  cursor: String

  node: SpaceRoleAssignment!
}

type SpaceRoleConnection {
  edges: [SpaceRoleEdge]

  nodes: [SpaceRole]!

  pageInfo: SpaceRolePageInfo!
}

type SpaceRoleEdge {
  cursor: String

  node: SpaceRole!
}

type SpaceRoleGroupPrincipal implements SpaceRolePrincipal {
  displayName: String!

  principalId: ID!
}

type SpaceRoleGuestPrincipal implements SpaceRolePrincipal {
  displayName: String!

  email: String

  principalId: ID!

  profilePicture: Icon
}

type SpaceRolePageInfo {
  endCursor: String

  hasNextPage: Boolean!

  startCursor: String
}

interface SpaceRolePrincipal {
  displayName: String!

  principalId: ID!
}

enum SpaceRoleType {
  CUSTOM

  SYSTEM
}

type SpaceRoleUserPrincipal implements SpaceRolePrincipal {
  displayName: String!

  email: String

  principalId: ID!

  profilePicture: Icon
}

type SpaceSettings {
  contentStateSettings: ContentStateSettings!

  customHeaderAndFooter: SpaceSettingsMetadata!

  editor: EditorVersionsMetadataDto

  links: LinksContextSelfBase

  routeOverrideEnabled: Boolean
}

type SpaceSettingsMetadata {
  footer: HtmlMeta!

  header: HtmlMeta!
}

type SpaceSettingsV2 {
  routeOverrideEnabled: Boolean
}

type SpaceSidebarLink {
  canHide: Boolean

  hidden: Boolean!

  icon: Icon

  iconClass: String

  id: ID!

  linkIdentifier: String

  position: Int!

  styleClass: String

  title: String

  tooltip: String

  type: SpaceSidebarLinkType!

  url: String

  urlWithoutContextPath: String

  webItemCompleteKey: String

  webItemKey: String
}

enum SpaceSidebarLinkType {
  EXTERNAL_LINK

  FORGE

  PINNED_ATTACHMENT

  PINNED_BLOG_POST

  PINNED_PAGE

  PINNED_SPACE

  PINNED_USER_INFO

  WEB_ITEM
}

type SpaceSidebarLinks {
  advanced: [SpaceSidebarLink]

  main(includeHidden: Boolean): [SpaceSidebarLink]

  quick: [SpaceSidebarLink]
}

enum SpaceStatusV2 {
  current

  archived
}

type SpaceTypeSettings {
  enabledContentTypes: EnabledContentTypes!

  enabledFeatures: EnabledFeatures!
}

input SpaceTypeSettingsInput {
  enabledContentTypes: EnabledContentTypesInput

  enabledFeatures: EnabledFeaturesInput
}

enum SpaceTypeV2 {
  global

  personal
}

type SpaceUserMetadata {
  isAdmin: Boolean!

  isFavourited: Boolean!

  isWatched: Boolean!

  isWatchingBlogs: Boolean!

  lastVisitedDate(format: GraphQLDateFormat): Date
}

type SpaceV2 implements Node {
  id: ID!

  alias: String

  key: String!

  name: String!

  type: SpaceTypeV2!

  status: SpaceStatusV2!

  icon: SpaceIconV2

  createdAt: String

  homepageId: ID!

  description(format: SpaceDescriptionEnum = plain): SpaceDescriptionV2

  homepage: PageV2

  pagesV2(ids: [ID!]!, status: [BulkPageStatusV2!] = [current,archived]): [PageV2]
}

type SpaceVersionV2 {
  number: Int!

  createdAt: String!

  createdBy: String

  authorId: ID!

  message: String
}

input SpaceViewsPersistence {
  persistenceOption: SpaceViewsPersistenceOption!

  spaceKey: String!
}

enum SpaceViewsPersistenceOption {
  POPULARITY

  RECENTLY_MODIFIED

  RECENTLY_VIEWED

  TITLE_AZ

  TREE
}

type SpaceWithExemption {
  alias: String

  icon: Icon

  id: Long

  key: String

  name: String

  status: String

  type: String
}

type StalePagePayload {
  lastActivityDate: String!

  lastViewedDate: String

  pageId: String!

  pageStatus: StalePageStatus!

  spaceId: String!

  page: Content
}

type StalePagePayloadEdge {
  cursor: String

  node: StalePagePayload
}

enum StalePageStatus {
  ARCHIVED

  CURRENT

  DRAFT
}

enum StalePagesSortingType {
  ASC

  DESC
}

input Step {
  from: Long

  mark: Mark!

  pos: Long

  to: Long
}

type Storage {
  bytesUsed: Long!

  gracePeriodEndDate: String

  isStorageEnforcementGracePeriodComplete: Boolean
}

type SubjectKey {
  displayName: String

  group: Group

  id: String

  principalType: PrincipalType!

  user: User
}

input SubjectPermissionDeltas {
  permissionsToAdd: [SpacePermissionType]!

  permissionsToRemove: [SpacePermissionType]!

  subjectKeyInput: UpdatePermissionSubjectKeyInput!
}

input SubjectPermissionDeltasV2 {
  permissionsToAdd: [String]!

  permissionsToRemove: [String]!

  principalInput: RoleAssignmentPrincipalInput!
}

type SubjectUserOrGroup {
  displayName: String

  group: GroupWithRestrictions

  id: String

  permissions: [ContentPermissionType]!

  type: String

  user: UserWithRestrictions
}

type SubjectUserOrGroupEdge {
  cursor: String

  node: SubjectUserOrGroup
}

type SubjectsByType {
  group(limit: Int = 200, start: Int): PaginatedGroupList

  groupWithRestrictions(limit: Int = 200, start: Int): PaginatedGroupWithRestrictions

  links: LinksContextBase

  user(limit: Int = 200, start: Int): PaginatedUserList

  userWithRestrictions(limit: Int = 200, start: Int): PaginatedUserWithRestrictions
}

enum SummaryType {
  PAGE

  BLOGPOST
}

type SuperAdminPayload {
  user: AtlassianUser
}

type SuperBatchWebResources {
  links: LinksContextBase

  metatags: String

  tags: WebResourceTags

  uris: WebResourceUris
}

type SuperBatchWebResourcesV2 {
  metatags: String

  tags: WebResourceTagsV2

  uris: WebResourceUrisV2
}

input SystemSpaceHomepageInput {
  systemSpaceHomepageTemplate: SystemSpaceHomepageTemplate!
}

enum SystemSpaceHomepageTemplate {
  EAP

  MINIMAL

  VISUAL
}

type TapAttributes {
  id: ID!

  strings: [TapString!]!

  booleans: [TapBoolean!]!

  numbers: [TapNumber!]!

  stringsList: [TapStrings!]!

  numbersList: [TapNumbers!]!
}

type TapBoolean {
  key: String!

  value: Boolean!
}

type TapExperiment {
  experimentKey: String!

  experimentValue: String!
}

type TapNumber {
  key: String!

  value: Number!
}

type TapNumbers {
  key: String!

  value: [Number!]!
}

type TapString {
  key: String!

  value: String!
}

type TapStrings {
  key: String!

  value: [String!]!
}

type TargetLocation {
  destinationSpace: Space

  links: LinksContextBase

  parentId: ID
}

enum TaskStatus {
  CHECKED

  UNCHECKED
}

enum TeamCalendarDayOfWeek {
  FRIDAY

  MONDAY

  SATURDAY

  SUNDAY

  THURSDAY

  TUESDAY

  WEDNESDAY
}

type TeamCalendarFeature {
  isEntitled: Boolean!
}

type TeamCalendarSettings {
  startDayOfWeek: TeamCalendarDayOfWeek!
}

type TemplateBody {
  body: ContentBody!

  id: String!
}

type TemplateBodyEdge {
  cursor: String

  node: TemplateBody
}

type TemplateCategory {
  id: String

  name: String
}

type TemplateCategoryEdge {
  cursor: String

  node: TemplateCategory
}

input TemplateEntityFavouriteStatus {
  isFavourite: Boolean!

  templateEntityId: String!
}

type TemplateInfo {
  author: String

  blueprintModuleCompleteKey: String

  categoryIds: [String]!

  contentBlueprintId: String

  darkModeIconURL: String

  description: String

  hasGlobalBlueprintContent: Boolean!

  hasWizard: Boolean

  iconURL: String

  isConvertible: Boolean

  isFavourite: Boolean

  isLegacyTemplate: Boolean

  isNew: Boolean

  isPromoted: Boolean

  itemModuleCompleteKey: String

  keywords: [String]

  link: String

  links: LinksContextBase

  name: String

  recommendationRank: Int

  spaceKey: String

  styleClass: String

  templateId: String

  templateType: String
}

type TemplateInfoEdge {
  cursor: String

  node: TemplateInfo
}

type TemplateMediaSession {
  collections: [MapOfStringToString]!

  configuration: MediaConfiguration!

  downloadToken: TemplateMediaToken!

  uploadToken: TemplateMediaToken!
}

type TemplateMediaToken {
  duration: Int

  value: String
}

type TemplateMigration {
  unsupportedTemplatesNames: [String]!
}

type TemplatePropertySet {
  contentAppearance: GraphQLTemplateContentAppearance
}

input TemplatePropertySetInput {
  contentAppearance: GraphQLTemplateContentAppearance
}

type TemplatePropertySetPayload {
  contentAppearance: GraphQLTemplateContentAppearance
}

input TemplatizeInput {
  contentId: ID!

  description: String

  name: String

  spaceKey: String
}

type Tenant {
  cloudId: ID!

  shard: String!

  environment: Environment!

  activationId: String

  editions: ConfluenceEditions
}

type TenantContext {
  baseUrl: String!

  customDomainUrl: String

  editions: Editions!

  initialProductList: [String]

  licenseStates: LicenseStates

  licensedProducts: [LicensedProduct!]!
}

type Theme {
  description: String

  icon: Icon

  links: LinksContextBase

  name: String

  themeKey: String
}

type ThemeV2 {
  name: String

  themeKey: String
}

type TimeseriesCount {
  nodes: [TimeseriesCountItem!]!
}

type TimeseriesCountItem {
  date: String!

  count: Int!
}

type TimeseriesPageBlogCount {
  nodes: [TimeseriesCountItem!]!
}

type TimeseriesUniqueUserCount {
  nodes: [TimeseriesCountItem!]!
}

type TopRelevantUsers {
  nodes: [RelevantSpacesWrapper]
}

type TopTemplateItem {
  rank: Int!

  templateId: String!
}

type TotalSearchCTR {
  nodes: [TotalSearchCTRItems!]!
}

type TotalSearchCTRItems {
  clicks: Long!

  ctr: Float!

  searches: Long!
}

type TraceTiming {
  end: String

  start: String
}

input TransitionFilter {
  from: String!

  to: String!
}

input UnarchiveSpaceInput {
  alias: String!
}

type UnarchiveSpacePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

type UnknownUser implements Person {
  accountId: String

  accountType: String

  displayName: String

  email: String

  operations: [OperationCheckResult]

  permissionType: SitePermissionType

  profilePicture: Icon

  publicName: String

  timeZone: String

  type: String

  userKey: String

  username: String
}

type UnlicensedUserWithPermissions {
  operations: [OperationCheckResult]
}

input UnlicensedUserWithPermissionsInput {
  operations: [OperationCheckResultInput]!
}

input UpdateArchiveNotesInput {
  archiveNote: String

  areChildrenIncluded: Boolean

  excludedBranchRootPageIDs: [Long]

  isSelected: Boolean

  pageID: Long!
}

type UpdateArchiveNotesPayload {
  status: Boolean!

  taskId: String
}

input UpdateCommentInput {
  commentBody: CommentBody!

  commentId: ID!

  version: Int
}

input UpdateContentDataClassificationLevelInput {
  classificationLevelId: ID!

  contentStatus: ContentDataClassificationMutationContentStatus!

  id: Long!
}

type UpdateContentDataClassificationLevelPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input UpdateContentPermissionsInput {
  contentRole: ContentRole!

  principalId: ID!

  principalType: PrincipalType!
}

input UpdateContentTemplateInput {
  body: ContentTemplateBodyInput!

  description: String

  id: ID

  labels: [ContentTemplateLabelInput]

  name: String!

  space: ContentTemplateSpaceInput

  templateId: ID!

  templateType: GraphQLContentTemplateType!
}

input UpdateCoverPictureWidthInput {
  contentId: ID!

  contentStatus: ConfluenceMutationContentStatus

  coverPictureWidth: GraphQLCoverPictureWidth!
}

type UpdateCoverPictureWidthPayload implements Payload {
  content: Content!

  errors: [MutationError!]

  success: Boolean!
}

input UpdateDefaultSpacePermissionsInput {
  permissionsToAdd: [SpacePermissionType]!

  permissionsToRemove: [SpacePermissionType]!

  subjectKeyInput: UpdatePermissionSubjectKeyInput!
}

input UpdateDefaultSpacePermissionsInputV2 {
  subjectPermissionDeltasListV2: [SubjectPermissionDeltasV2!]!
}

type UpdateDefaultSpacePermissionsPayload {
  errors: [MutationError!]

  success: Boolean!
}

type UpdateDefaultSpacePermissionsPayloadV2 implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input UpdateEmbedInput {
  embedIconUrl: String

  embedUrl: String

  extensionKey: String

  id: ID!

  product: String

  resourceType: String

  title: String
}

input UpdateExCoSpacePermissionsInput {
  accountId: String!

  spaceId: Long!
}

type UpdateExCoSpacePermissionsMutationErrorExtension implements MutationErrorExtension {
  accountId: String

  errorType: String

  spaceId: Long

  statusCode: Int
}

type UpdateExCoSpacePermissionsPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input UpdateExternalCollaboratorDefaultSpaceInput {
  enabled: Boolean!

  spaceId: Long!
}

type UpdateExternalCollaboratorDefaultSpacePayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input UpdateMetadataInput {
  ari: String!

  isPinned: Boolean

  productLink: String

  thumbnailId: String

  labels: [String!]

  extraProps: [PropInput!]
}

type UpdateNestedPageOwnersPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!

  taskId: ID!

  warnings: [ChangeOwnerWarning]
}

input UpdateNoteInput {
  title: String

  body: String

  metadata: UpdateMetadataInput!
}

type UpdateNotePayload {
  errors: [NoteMutationError!]

  success: Boolean!

  note: NoteResponse
}

input UpdateOwnerInput {
  contentId: ID!

  ownerId: String!
}

type UpdateOwnerPayload {
  content: Content!
}

input UpdatePageExtensionInput {
  key: String!

  value: String!
}

input UpdatePageInput {
  pageId: ID!

  status: PageStatusInput

  mediaAttachments: [MediaAttachmentInput!]

  body: PageBodyInput

  restrictions: PageRestrictionsInput

  title: String

  minorEdit: Boolean

  extensions: [UpdatePageExtensionInput]
}

input UpdatePageOwnersInput {
  ownerId: ID!

  pageIDs: [Long]!
}

type UpdatePageOwnersPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!

  taskId: ID!
}

type UpdatePagePayload {
  pageId: ID!

  mediaAttached: [MediaAttachmentOrError!]!

  restrictions: PageRestrictions

  page: Page

  content: Content
}

input UpdatePageStatusesInput {
  pages: [NestedPageInput]!

  spaceKey: String!

  targetContentState: ContentStateInput!
}

type UpdatePageStatusesPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!

  taskId: ID!
}

input UpdatePageV2Input {
  body: FormattedBodyV2Input!

  id: ID!

  parentId: ID

  spaceId: ID

  status: PageUpdateStatusV2!

  title: String!

  version: VersionV2Input!
}

type UpdatePageV2Payload {
  pageV2: PageV2
}

input UpdatePermissionSubjectKeyInput {
  permissionDisplayType: PermissionDisplayType!

  subjectId: String!
}

input UpdateRelationInput {
  relationName: RelationType!

  sourceKey: String!

  sourceStatus: String

  sourceType: RelationSourceType!

  sourceVersion: Int

  targetKey: String!

  targetStatus: String

  targetType: RelationTargetType!

  targetVersion: Int
}

type UpdateRelationPayload {
  targetKey: String!

  sourceKey: String!

  relationName: String!

  url: String!
}

input UpdateSiteLookAndFeelInput {
  backgroundColor: String

  faviconFiles: [FaviconFileInput!]!

  frontCoverState: GraphQLFrontCoverState

  highlightColor: String

  resetFavicon: Boolean

  resetSiteLogo: Boolean

  showFrontCover: Boolean

  showSiteName: Boolean

  siteLogoFileStoreId: ID

  siteName: String
}

type UpdateSiteLookAndFeelPayload implements Payload {
  errors: [MutationError!]

  siteLookAndFeel: SiteLookAndFeel

  success: Boolean!
}

input UpdateSitePermissionInput {
  anonymous: AnonymousWithPermissionsInput

  groups: [GroupWithPermissionsInput]

  unlicensedUser: UnlicensedUserWithPermissionsInput

  users: [UserWithPermissionsInput]
}

input UpdateSpaceDefaultClassificationLevelInput {
  classificationLevelId: ID!

  id: Long!
}

type UpdateSpaceDefaultClassificationLevelPayload implements Payload {
  errors: [MutationError!]

  success: Boolean!
}

input UpdateSpacePermissionsInput {
  spaceKey: String!

  subjectPermissionDeltasList: [SubjectPermissionDeltas!]!
}

input UpdateSpacePermissionsInputV2 {
  spaceId: Long!

  subjectPermissionDeltasListV2: [SubjectPermissionDeltasV2!]!
}

type UpdateSpacePermissionsMutationErrorExtension implements MutationErrorExtension {
  errorType: String

  spaceId: Long

  spacePermissionType: SpacePermissionType

  statusCode: Int

  subjectId: String
}

type UpdateSpacePermissionsPayload {
  errors: [MutationError!]

  spaceKey: String!

  success: Boolean!
}

type UpdateSpacePermissionsPayloadV2 implements Payload {
  errors: [MutationError!]

  spaceId: Long!

  success: Boolean!
}

input UpdateSpaceTypeSettingsInput {
  spaceKey: String

  spaceTypeSettings: SpaceTypeSettingsInput
}

type UpdateSpaceTypeSettingsPayload implements Payload {
  errors: [MutationError!]

  spaceTypeSettings: SpaceTypeSettings

  success: Boolean!
}

input UpdateTemplatePropertySetInput {
  templateId: Long!

  templatePropertySet: TemplatePropertySetInput!
}

type UpdateTemplatePropertySetPayload {
  templateId: ID!

  templatePropertySet: TemplatePropertySetPayload!
}

input UpdatedNestedPageOwnersInput {
  ownerId: ID!

  pages: [NestedPageInput]!
}

type User implements Person {
  accountId: String

  accountType: String

  displayName: String

  email: String

  operations: [OperationCheckResult]

  permissionType: SitePermissionType

  profilePicture: Icon

  publicName: String

  timeZone: String

  type: String

  userKey: String

  username: String

  spacesAssigned: PaginatedSpaceList
}

type UserEdge {
  cursor: String

  node: User
}

type UserOnboardingState {
  key: String!

  value: String
}

type UserPreferences {
  endOfPageRecommendationsOptInStatus: String!

  favouriteTemplateEntityIds: [String]!

  feedRecommendedUserSettingsDismissTimestamp: String!

  feedTab: String

  feedType: FeedType

  globalPageCardAppearancePreference: PagesDisplayPersistenceOption!

  homePagesDisplayView: PagesDisplayPersistenceOption!

  homeWidgets: [HomeWidget!]!

  isHomeOnboardingDismissed: Boolean!

  keyboardShortcutDisabled: Boolean!

  missionControlOverview(spaceId: Long): [String]!

  nextGenFeedOptInStatus: String!

  onboarded: Boolean!

  onboardingState(key: [String]): [UserOnboardingState!]!

  premiumToolsDropdownPersistence(spaceKey: String!): PremiumToolsDropdownStatus!

  recentFilter: RecentFilter!

  searchExperimentOptInStatus: String!

  shouldShowCardOnPageTreeHover: PageCardInPageTreeHoverPreference!

  spacePagesDisplayView(spaceKey: String!): PagesDisplayPersistenceOption!

  spacePagesSortView(spaceKey: String!): PagesSortPersistenceOption!

  spaceViewsPersistence(spaceKey: String!): SpaceViewsPersistenceOption!

  theme: String!

  topNavigationOptedOut: Boolean

  userSpacesNotifiedChangeBoardingOfExternalCollab: [String]!

  userSpacesNotifiedOfExternalCollab: [String]!

  watchMyOwnContent: Boolean
}

input UserPreferencesInput {
  addUserSpaceNotifiedChangeBoardingOfExternalCollab: String

  addUserSpaceNotifiedOfExternalCollab: String

  endOfPageRecommendationsOptInStatus: String

  feedRecommendedUserSettingsDismissTimestamp: String

  feedTab: String

  feedType: FeedType

  globalPageCardAppearancePreference: PagesDisplayPersistenceOption

  homePagesDisplayView: PagesDisplayPersistenceOption

  homeWidget: HomeWidgetInput

  isHomeOnboardingDismissed: Boolean

  keyboardShortcutDisabled: Boolean

  missionControlOverview: MissionControlOverview

  nextGenFeedOptInStatus: String

  premiumToolsDropdownPersistence: PremiumToolsDropdownPersistence

  recentFilter: RecentFilter

  searchExperimentOptInStatus: String

  shouldShowCardOnPageTreeHover: PageCardInPageTreeHoverPreference

  spacePagesDisplayView: SpacePagesDisplayView

  spacePagesSortView: SpacePagesSortView

  spaceViewsPersistence: SpaceViewsPersistence

  templateEntityFavouriteStatus: TemplateEntityFavouriteStatus

  theme: String

  topNavigationOptedOut: Boolean
}

type UserV2 {
  id: ID!

  accountType: String

  accountStatus: String

  name: String

  picture: String

  nickname: String

  locale: String

  lastUpdated: String

  zoneInfo: String

  email: String

  orgId: String

  extendedProfile: ExtendedProfile
}

input UserWithPermissionsInput {
  accountId: ID!

  operations: [OperationCheckResultInput]!
}

type UserWithRestrictions {
  accountId: String

  accountType: String

  displayName: String

  email: String

  hasSpaceEditPermission: Boolean

  hasSpaceViewPermission: Boolean

  operations: [OperationCheckResult]

  permissionType: SitePermissionType

  profilePicture: Icon

  publicName: String

  restrictingContent: Content

  timeZone: String

  type: String

  userKey: String

  username: String
}

type UserWithRestrictionsEdge {
  cursor: String

  node: UserWithRestrictions
}

type UsersWithEffectiveRestrictions {
  directPermissions: [ContentPermissionType]!

  displayName: String

  id: String

  permissionsViaGroups: PermissionsViaGroups!

  user: UserWithRestrictions
}

input ValidateConvertPageToLiveEditInput {
  adf: String!

  contentId: ID!
}

input ValidatePageCopyInput {
  destinationSpaceId: ID!

  pageId: ID!

  validatePageRestrictionsCopyInput: ValidatePageRestrictionsCopyInput
}

type ValidatePageCopyPayload {
  validatePageRestrictionsCopyPayload: ValidatePageRestrictionsCopyPayload
}

input ValidatePageRestrictionsCopyInput {
  includeChildren: Boolean!
}

type ValidatePageRestrictionsCopyPayload {
  isValid: Boolean!

  message: PageCopyRestrictionValidationStatus!
}

type ValidateSpaceKeyResponse {
  generatedUniqueKey: String

  isValid: Boolean!
}

type ValidateTitleForCreatePayload {
  isValid: Boolean!

  message: String
}

type Version {
  by: Person

  collaborators: ContributorUsers

  confRev: String

  content: Content

  contentTypeModified: Boolean

  friendlyWhen: String

  links: LinksContextSelfBase

  message: String

  minorEdit: Boolean

  ncsStepVersion: String

  ncsStepVersionSource: String

  number: Int

  syncRev: String

  syncRevSource: String

  when: String
}

type VersionSummaryMetaDataItem {
  versionNumber: Int!

  creationDate: String!

  collaborators: [String]

  users: [Person]
}

type VersionV2 {
  createdAt: String

  message: String

  number: Int!

  minorEdit: Boolean

  authorId: ID

  author: UserV2

  usersV2(ids: [ID!]!): [UserV2]
}

input VersionV2Input {
  message: String

  number: Int!
}

type ViewedComments {
  commentIds: [ID]!
}

input WatchContentInput {
  accountId: String

  contentId: ID!

  currentUser: Boolean
}

type WatchContentPayload {
  content: Content!
}

input WatchSpaceInput {
  accountId: String

  currentUser: Boolean

  spaceId: ID

  spaceKey: String
}

type WatchSpacePayload {
  space: Space!
}

type WebItem {
  accessKey: String

  completeKey: String

  hasCondition: Boolean

  icon: Icon

  id: String

  label: String

  moduleKey: String

  params: [MapOfStringToString]

  section: String

  styleClass: String

  tooltip: String

  url: String

  urlWithoutContextPath: String

  weight: Int
}

type WebPanel {
  completeKey: String

  html: String

  label: String

  location: String

  moduleKey: String

  name: String

  weight: Int
}

type WebResourceDependencies {
  contexts: [String]!

  keys: [String]!

  links: LinksContextBase

  superbatch: SuperBatchWebResources

  tags: WebResourceTags

  uris: WebResourceUris
}

type WebResourceDependenciesV2 {
  contexts: [String]!

  keys: [String]!

  superbatch: SuperBatchWebResourcesV2

  tags: WebResourceTagsV2

  uris: WebResourceUrisV2
}

type WebResourceTags {
  css: String

  data: String

  js: String
}

type WebResourceTagsV2 {
  css: String

  data: String

  js: String
}

type WebResourceUris {
  css: [String]

  data: [String]

  js: [String]
}

type WebResourceUrisV2 {
  css: [String]

  data: [String]

  js: [String]
}

type WebSection {
  cacheKey: String

  id: ID

  items: [WebItem]!

  label: String

  styleClass: String
}

type WhiteboardFeatures {
  smartConnectors: SmartConnectorsFeature

  smartSections: SmartSectionsFeature
}

type XpsPageInfo {
  hasNextPage: Boolean!

  nextPageToken: String
}

type __Directive {
  """
  The __Directive type represents a Directive that a server supports.
  """
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  onOperation: Boolean @deprecated(reason: "Use `locations`.")

  onFragment: Boolean @deprecated(reason: "Use `locations`.")

  onField: Boolean @deprecated(reason: "Use `locations`.")
}

"""
An enum describing valid locations where a directive can be placed
"""
enum __DirectiveLocation {
  """
  Indicates the directive is valid on queries.
  """
  QUERY

  """
  Indicates the directive is valid on mutations.
  """
  MUTATION

  """
  Indicates the directive is valid on subscriptions.
  """
  SUBSCRIPTION

  """
  Indicates the directive is valid on fields.
  """
  FIELD

  """
  Indicates the directive is valid on fragment definitions.
  """
  FRAGMENT_DEFINITION

  """
  Indicates the directive is valid on fragment spreads.
  """
  FRAGMENT_SPREAD

  """
  Indicates the directive is valid on inline fragments.
  """
  INLINE_FRAGMENT

  """
  Indicates the directive is valid on variable definitions.
  """
  VARIABLE_DEFINITION

  """
  Indicates the directive is valid on a schema SDL definition.
  """
  SCHEMA

  """
  Indicates the directive is valid on a scalar SDL definition.
  """
  SCALAR

  """
  Indicates the directive is valid on an object SDL definition.
  """
  OBJECT

  """
  Indicates the directive is valid on a field SDL definition.
  """
  FIELD_DEFINITION

  """
  Indicates the directive is valid on a field argument SDL definition.
  """
  ARGUMENT_DEFINITION

  """
  Indicates the directive is valid on an interface SDL definition.
  """
  INTERFACE

  """
  Indicates the directive is valid on an union SDL definition.
  """
  UNION

  """
  Indicates the directive is valid on an enum SDL definition.
  """
  ENUM

  """
  Indicates the directive is valid on an enum value SDL definition.
  """
  ENUM_VALUE

  """
  Indicates the directive is valid on an input object SDL definition.
  """
  INPUT_OBJECT

  """
  Indicates the directive is valid on an input object field SDL definition.
  """
  INPUT_FIELD_DEFINITION
}

type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String

  isDeprecated: Boolean

  deprecationReason: String
}

"""
A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  'A list of all directives supported by this server.
  """
  directives: [__Directive!]!

  """
  'If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type
}

type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  specifiedByUrl: String
}

"""
An enum describing what kind of type a given __Type is
"""
enum __TypeKind {
  """
  Indicates this type is a scalar. 'specifiedByUrl' is a valid field
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

type contactAdminPageConfig {
  contactAdministratorsMessage: String

  disabledReason: ContactAdminPageDisabledReason

  isEnabled: Boolean!

  recaptchaSharedKey: String
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Operations with this directive affects SLA of the experience.
"""
directive @SLA on QUERY|MUTATION

"""
Operations with this directive are considered a work in progress and may introduce breaking changes in the future. Recommended not to use this field.
"""
directive @alpha on FIELD_DEFINITION

"""
Operations with this directive makes the query or mutation run with super admin permissions.
"""
directive @asSuperAdmin on QUERY|MUTATION

directive @batchall (name: String!, batchArg: String!, arg: String) on FIELD_DEFINITION

"""
Marks the field, argument, input field or enum value as deprecated
"""
directive @deprecated ("The reason for the deprecation" reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|ENUM_VALUE|INPUT_FIELD_DEFINITION

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
